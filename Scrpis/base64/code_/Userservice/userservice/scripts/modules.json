[{"_id":"Brinson.7","name":"Brinson","version":7,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":7,"friendly_name":"Brinson绩效归因","category":"量化分析","arguments":"(backtest_ds=None, benchmark='000300.HIX')","doc":"\n    Brinson绩效归因，用于回测结果分析。将投资组合的收益分解到择时timing、选股selection、其他other、超额excess四个维度。模块返回区间收益归因图。\n    ","desc":"\n    Brinson绩效归因，用于回测结果分析。将投资组合的收益分解到择时timing、选股selection、其他other、超额excess四个维度。模块返回区间收益归因图。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"绩效归因","specific_type_name":null,"name":"perf_attribution","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"回测详细数据","specific_type_name":"DataSource","name":"backtest_ds","optional":false,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"策略基准， 默认为沪深300","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"benchmark","default":"000300.HIX"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.687000"},{"_id":"adaboost_classifier.1","name":"adaboost_classifier","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"自适应提升树-分类","category":"机器学习\\分类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, n_estimators=50, algorithm='SAMME.R', learning_rate=1.0, key_cols='date,instrument', other_train_parameters={'base_estimator': None})","doc":"\n    adaboost自适应提升树算法，用于分类，此算法基于boosting，根据上次分类的准确率确定下次训练每个样本的权值，将修改过权值的新数据集送给下层分类器进行训练，最后将每次训练得到的分类器融合，作为最后的决策分类器。\n\n    ","desc":"\n    adaboost自适应提升树算法，用于分类，此算法基于boosting，根据上次分类的准确率确定下次训练每个样本的权值，将修改过权值的新数据集送给下层分类器进行训练，最后将每次训练得到的分类器融合，作为最后的决策分类器。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"弱学习器个数，弱学习器最大迭代次数，太小容易欠拟合，太大容易过拟合，默认为50","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"n_estimators","default":50},{"type_name":"Enumerated","desc":"分类算法，SAMME.R使用了对样本集分类的预测概率大小来作为弱学习器权重，迭代一般比SAMME快","specific_type_name":null,"values":["SAMME.R","SAMME"],"multi":false,"type_code":"choice","name":"algorithm","default":"SAMME.R"},{"type_name":"Float","desc":"学习率，该值缩减每个弱学习器的权重，通常较小的系数需要更多的迭代，因此n_estimators和learning_rate要一起调参","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"float","name":"learning_rate","default":1.0},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列名用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{'base_estimator': None}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.717000"},{"_id":"adaboost_regressor.1","name":"adaboost_regressor","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"自适应提升树-回归","category":"机器学习\\回归","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, n_estimators=50, learning_rate=1.0, loss='linear', key_cols='date,instrument', other_train_parameters={'base_estimator': None})","doc":"\n    adaboost自适应提升树算法，用于回归，此算法基于boosting，根据上次回归的效果确定下次训练每个样本的权值，将修改过权值的新数据集送给下层分类器进行训练，最后将每次训练得到的弱学习器融合，作为最后的回归模型。\n\n    ","desc":"\n    adaboost自适应提升树算法，用于回归，此算法基于boosting，根据上次回归的效果确定下次训练每个样本的权值，将修改过权值的新数据集送给下层分类器进行训练，最后将每次训练得到的弱学习器融合，作为最后的回归模型。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"弱学习器个数，弱学习器最大迭代次数，太小容易欠拟合，太大容易过拟合，默认为50","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"n_estimators","default":50},{"type_name":"Float","desc":"学习率，该值缩减每个弱学习器的权重，通常较小的系数需要更多的迭代，因此n_estimators和learning_rate要一起调参","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"float","name":"learning_rate","default":1.0},{"type_name":"Enumerated","desc":"损失函数，每次增强迭代后更新权重时使用的损失函数，默认为线性","specific_type_name":null,"values":["linear","square","exponential"],"multi":false,"type_code":"choice","name":"loss","default":"linear"},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{'base_estimator': None}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.718000"},{"_id":"advanced_auto_labeler.0","name":"advanced_auto_labeler","version":0,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":0,"friendly_name":"自动数据标注","category":"数据标注","arguments":"(instruments=, label_expr=, start_date='', end_date='', benchmark='000300.SHA', drop_na_label=True, cast_label_int=True, user_functions={})","doc":"\n        可以使用表达式，对数据做任何标注。比如基于未来给定天数的收益/波动率等数据，来实现对数据做自动标注。标注后数据可作为预测对象或者离散化的特征。\n        ","desc":null,"doc_url":"https://bigquant.com/docs/develop/modules/advanced_auto_labeler.html","interface":[{"type_name":null,"desc":"标注数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"证券代码列表","specific_type_name":"列表|DataSource","name":"instruments","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Script","desc":"标注表达式，可以使用多个表达式，顺序执行，从第二个开始，可以使用label字段。可用数据字段见 https://bigquant.com/docs/develop/datasource/deprecated/history_data.html，添加benchmark_前缀，可使用对应的benchmark数据。可用操作符和函数见 `表达式引擎 <https://bigquant.com/docs/develop/bigexpr/usage.html>`_","specific_type_name":"列表","language":"","default":"# #号开始的表示注释\n# 0. 每行一个，顺序执行，从第二个开始，可以使用label字段\n# 1. 可用数据字段见 https://bigquant.com/docs/develop/datasource/deprecated/history_data.html\n#   添加benchmark_前缀，可使用对应的benchmark数据\n# 2. 可用操作符和函数见 `表达式引擎 <https://bigquant.com/docs/develop/bigexpr/usage.html>`_\n\n# 计算收益：5日收盘价(作为卖出价格)除以明日开盘价(作为买入价格)\nshift(close, -5) / shift(open, -1)\n\n# 极值处理：用1%和99%分位的值做clip\nclip(label, all_quantile(label, 0.01), all_quantile(label, 0.99))\n\n# 将分数映射到分类，这里使用20个分类\nall_wbins(label, 20)\n\n# 过滤掉一字涨停的情况 (设置label为NaN，在后续处理和训练中会忽略NaN的label)\nwhere(shift(high, -1) == shift(low, -1), NaN, label)\n","auto_complete_type":"history_data_fields,bigexpr_functions","type_code":"code","name":"label_expr"},{"type_name":"String","desc":"开始日期，示例 2017-02-12，一般不需要指定，使用 证券代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，示例 2017-02-12，一般不需要指定，使用 证券代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":"String","desc":"基准指数，如果给定，可以使用 benchmark_* 变量","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"benchmark","default":"000300.SHA"},{"type_name":"Boolean","desc":"删除无标注数据，是否删除没有标注的数据","specific_type_name":null,"type_code":"bool","name":"drop_na_label","default":true},{"type_name":"Boolean","desc":"将标注转换为整数，将标注转换为整数，可勾选，一般用于分类学习","specific_type_name":null,"type_code":"bool","name":"cast_label_int","default":true},{"type_name":"Script","desc":"自定义表达式函数，字典格式，例:{'user_rank':user_rank}，字典的key是方法名称，字符串类型，字典的value是方法的引用，参考 文档-表达式引擎 https://bigquant.com/docs/develop/bigexpr/usage.html","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":null,"type_code":"code","name":"user_functions"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.721000"},{"_id":"advanced_auto_labeler.2","name":"advanced_auto_labeler","version":2,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":2,"friendly_name":"自动标注(股票)","category":"数据标注","arguments":"(instruments=, label_expr=, start_date='', end_date='', benchmark='000300.SHA', drop_na_label=True, cast_label_int=True, user_functions={})","doc":"\n        可以使用表达式，对数据做任何标注。比如基于未来给定天数的收益/波动率等数据，来实现对数据做自动标注。标注后数据可作为预测对象或者离散化的特征。\n        ","desc":null,"doc_url":"https://bigquant.com/docs/develop/modules/advanced_auto_labeler.html","interface":[{"type_name":null,"desc":"标注数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"代码列表","specific_type_name":"列表|DataSource","name":"instruments","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Script","desc":"标注表达式，可以使用多个表达式，顺序执行，从第二个开始，可以使用label字段。[可用数据字段](https://bigquant.com/docs/develop/datasource/deprecated/history_data.html)，添加benchmark_前缀，可使用对应的benchmark数据。可用操作符和函数见[表达式引擎](https://bigquant.com/docs/develop/bigexpr/usage.html)","specific_type_name":"列表","language":"","default":"# #号开始的表示注释\n# 0. 每行一个，顺序执行，从第二个开始，可以使用label字段\n# 1. 可用数据字段见 https://bigquant.com/docs/develop/datasource/deprecated/history_data.html\n#   添加benchmark_前缀，可使用对应的benchmark数据\n# 2. 可用操作符和函数见 `表达式引擎 <https://bigquant.com/docs/develop/bigexpr/usage.html>`_\n\n# 计算收益：5日收盘价(作为卖出价格)除以明日开盘价(作为买入价格)\nshift(close, -5) / shift(open, -1)\n\n# 极值处理：用1%和99%分位的值做clip\nclip(label, all_quantile(label, 0.01), all_quantile(label, 0.99))\n\n# 将分数映射到分类，这里使用20个分类\nall_wbins(label, 20)\n\n# 过滤掉一字涨停的情况 (设置label为NaN，在后续处理和训练中会忽略NaN的label)\nwhere(shift(high, -1) == shift(low, -1), NaN, label)\n","auto_complete_type":"history_data_fields,bigexpr_functions","type_code":"code","name":"label_expr"},{"type_name":"String","desc":"开始日期，示例 2017-02-12，一般不需要指定，使用 代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，示例 2017-02-12，一般不需要指定，使用 代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":"String","desc":"基准指数，如果给定，可以使用 benchmark_* 变量","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"benchmark","default":"000300.SHA"},{"type_name":"Boolean","desc":"删除无标注数据，是否删除没有标注的数据","specific_type_name":null,"type_code":"bool","name":"drop_na_label","default":true},{"type_name":"Boolean","desc":"将标注转换为整数，一般用于分类学习","specific_type_name":null,"type_code":"bool","name":"cast_label_int","default":true},{"type_name":"Script","desc":"自定义表达式函数，字典格式，例:{'user_rank':user_rank}，字典的key是方法名称，字符串类型，字典的value是方法的引用，参考文档[表达式引擎](https://bigquant.com/docs/develop/bigexpr/usage.html)","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":null,"type_code":"code","name":"user_functions"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.722000"},{"_id":"advanced_auto_labeler_vx1.1","name":"advanced_auto_labeler_vx1","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"自动标注(股票)","category":"数据标注","arguments":"(instruments=, label_expr=, start_date='', end_date='', benchmark='000300.SHA', drop_na_label=True, cast_label_int=True, user_functions={})","doc":"\n        可以使用表达式，对数据做任何标注。比如基于未来给定天数的收益/波动率等数据，来实现对数据做自动标注。标注后数据可作为预测对象或者离散化的特征。\n        ","desc":null,"doc_url":"https://bigquant.com/docs/develop/modules/advanced_auto_labeler.html","interface":[{"type_name":null,"desc":"标注数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"证券代码列表","specific_type_name":"列表|DataSource","name":"instruments","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Script","desc":"标注表达式，可以使用多个表达式，顺序执行，从第二个开始，可以使用label字段。可用数据字段见 https://bigquant.com/docs/develop/datasource/deprecated/history_data.html，添加benchmark_前缀，可使用对应的benchmark数据。可用操作符和函数见 `表达式引擎 <https://bigquant.com/docs/develop/bigexpr/usage.html>`_","specific_type_name":"列表","language":"","default":"# #号开始的表示注释\n# 0. 每行一个，顺序执行，从第二个开始，可以使用label字段\n# 1. 可用数据字段见 https://bigquant.com/docs/develop/datasource/deprecated/history_data.html\n#   添加benchmark_前缀，可使用对应的benchmark数据\n# 2. 可用操作符和函数见 `表达式引擎 <https://bigquant.com/docs/develop/bigexpr/usage.html>`_\n\n# 计算收益：5日收盘价(作为卖出价格)除以明日开盘价(作为买入价格)\nshift(close, -5) / shift(open, -1)\n\n# 极值处理：用1%和99%分位的值做clip\nclip(label, all_quantile(label, 0.01), all_quantile(label, 0.99))\n\n# 将分数映射到分类，这里使用20个分类\nall_wbins(label, 20)\n\n# 过滤掉一字涨停的情况 (设置label为NaN，在后续处理和训练中会忽略NaN的label)\nwhere(shift(high, -1) == shift(low, -1), NaN, label)\n","auto_complete_type":"history_data_fields,bigexpr_functions","type_code":"code","name":"label_expr"},{"type_name":"String","desc":"开始日期，示例 2017-02-12，一般不需要指定，使用 证券代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，示例 2017-02-12，一般不需要指定，使用 证券代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":"String","desc":"基准指数，如果给定，可以使用 benchmark_* 变量","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"benchmark","default":"000300.SHA"},{"type_name":"Boolean","desc":"删除无标注数据，是否删除没有标注的数据","specific_type_name":null,"type_code":"bool","name":"drop_na_label","default":true},{"type_name":"Boolean","desc":"将标注转换为整数，一般用于分类学习","specific_type_name":null,"type_code":"bool","name":"cast_label_int","default":true},{"type_name":"Script","desc":"自定义表达式函数，字典格式，例:{'user_rank':user_rank}，字典的key是方法名称，字符串类型，字典的value是方法的引用，参考 文档-表达式引擎 https://bigquant.com/docs/develop/bigexpr/usage.html","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":null,"type_code":"code","name":"user_functions"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.723000"},{"_id":"algoqi_all_datasource.1","name":"algoqi_all_datasource","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"全部数据分类","category":"资讯行情中心","arguments":"()","doc":"","desc":null,"doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.724000"},{"_id":"algoqi_datasource.1","name":"algoqi_datasource","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"数据分类详细","category":"资讯行情中心","arguments":"(datasource='')","doc":"\n        东方证券资讯行情中心，数据分类详情获取模块\n        :param datasource:\n        :param instruments:\n        :param fields:\n        :param start_date:\n        :param end_date:\n        ","desc":null,"doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"数据分类","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"datasource","default":""}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.725000"},{"_id":"algoqi_factordata.1","name":"algoqi_factordata","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"资讯因子数据","category":"资讯行情中心","arguments":"(datasource='fundscore', instruments=['000001.SZ'], factors='TOTAL_SCORE', start_date='2019-01-01', end_date='2019-02-01')","doc":"\n        东方证券资讯行情中心，因子数据获取模块\n        :param datasource:\n        :param instruments:\n        :param fields:\n        :param start_date:\n        :param end_date:\n        ","desc":null,"doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"数据分类","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"datasource","default":"fundscore"},{"type_name":null,"desc":"代码列表","specific_type_name":"列表|DataSource","name":"instruments","optional":false,"type":"通用","type_code":"input_port","default":["000001.SZ"]},{"type_name":"String","desc":"因子列表，列表或者逗号隔开","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"factors","default":"TOTAL_SCORE"},{"type_name":"String","desc":"开始日期，示例 2017-02-12，一般不需要指定，使用 代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":"2019-01-01"},{"type_name":"String","desc":"结束日期，示例 2017-02-12，一般不需要指定，使用 代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":"2019-02-01"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.726000"},{"_id":"algoqi_mktdata.1","name":"algoqi_mktdata","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"资讯行情数据","category":"资讯行情中心","arguments":"(datasource='', instruments=['000001.SZ'], fields='close', start_date='2019-01-01', end_date='2019-02-01')","doc":"\n        东方证券资讯行情中心，行情数据获取模块\n        :param datasource:\n        :param instruments:\n        :param fields:\n        :param start_date:\n        :param end_date:\n        ","desc":null,"doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"数据分类","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"datasource","default":""},{"type_name":null,"desc":"代码列表","specific_type_name":"列表|DataSource","name":"instruments","optional":false,"type":"通用","type_code":"input_port","default":["000001.SZ"]},{"type_name":"String","desc":"字段列表，列表或者逗号隔开","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"fields","default":"close"},{"type_name":"String","desc":"开始日期，示例 2017-02-12，一般不需要指定，使用 代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":"2019-01-01"},{"type_name":"String","desc":"结束日期，示例 2017-02-12，一般不需要指定，使用 代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":"2019-02-01"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.727000"},{"_id":"auto_labeler_on_datasource.1","name":"auto_labeler_on_datasource","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"自动标注(任意数据源)","category":"数据标注","arguments":"(input_data=, label_expr=, drop_na_label=True, cast_label_int=True, date_col='date', instrument_col='instrument', user_functions={})","doc":"\n        可以使用表达式，对数据做任何标注。比如基于未来给定天数的收益/波动率等数据，来实现对数据做自动标注。标注后数据可作为预测对象或者离散化的特征。这里数据不局限于股票数据，期货、基金、期权、指数等数据均可标注。\n        ","desc":null,"doc_url":"https://bigquant.com/","interface":[{"type_name":null,"desc":"标注数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"用来做标注的数据，一般是行情数据","specific_type_name":"DataSource","name":"input_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Script","desc":"标注表达式，可以使用多个表达式，顺序执行，从第二个开始，可以使用label字段。[可用数据字段](https://bigquant.com/docs/develop/datasource/deprecated/history_data.html)。可用操作符和函数见[表达式引擎](https://bigquant.com/docs/develop/bigexpr/usage.html)","specific_type_name":"列表","language":"","default":"# #号开始的表示注释\n# 0. 每行一个，顺序执行，从第二个开始，可以使用label字段\n# 1. 可用数据字段见 https://bigquant.com/docs/develop/datasource/deprecated/history_data.html\n# 2. 可用操作符和函数见 `表达式引擎 <https://bigquant.com/docs/develop/bigexpr/usage.html>`_\n\n# 计算收益：5日收盘价(作为卖出价格)除以明日开盘价(作为买入价格)\nshift(close, -5) / shift(open, -1)\n\n# 极值处理：用1%和99%分位的值做clip\nclip(label, all_quantile(label, 0.01), all_quantile(label, 0.99))\n\n# 将分数映射到分类，这里使用20个分类\nall_wbins(label, 20)\n\n# 过滤掉一字涨停的情况 (设置label为NaN，在后续处理和训练中会忽略NaN的label)\nwhere(shift(high, -1) == shift(low, -1), NaN, label)\n","auto_complete_type":"history_data_fields,bigexpr_functions","type_code":"code","name":"label_expr"},{"type_name":"Boolean","desc":"删除无标注数据，是否删除没有标注的数据","specific_type_name":null,"type_code":"bool","name":"drop_na_label","default":true},{"type_name":"Boolean","desc":"将标注转换为整数，一般用于分类学习","specific_type_name":null,"type_code":"bool","name":"cast_label_int","default":true},{"type_name":"String","desc":"日期列名，标明日期列，如果在表达式中用到切面相关函数时，比如 rank，会用到此列名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"date_col","default":"date"},{"type_name":"String","desc":"证券代码列名，标明证券代码列，如果在表达式中用到时间序列相关函数时，比如 shift，会用到此列名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"instrument_col","default":"instrument"},{"type_name":"Script","desc":"自定义表达式函数，字典格式，例:{'user_rank':user_rank}，字典的key是方法名称，字符串类型，字典的value是方法的引用，参考文档[表达式引擎](https://bigquant.com/docs/develop/bigexpr/usage.html)","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":null,"type_code":"code","name":"user_functions"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.730000"},{"_id":"auto_labeler_on_datasource_vx1.1","name":"auto_labeler_on_datasource_vx1","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"自动标注(任意数据源)","category":"数据标注","arguments":"(input_data=, label_expr=, drop_na_label=True, cast_label_int=True, date_col='date', instrument_col='instrument', user_functions={})","doc":"\n        可以使用表达式，对数据做任何标注。比如基于未来给定天数的收益/波动率等数据，来实现对数据做自动标注。标注后数据可作为预测对象或者离散化的特征。这里数据不局限于股票数据，期货、基金、期权、指数等数据均可标注。\n        ","desc":null,"doc_url":"https://bigquant.com/","interface":[{"type_name":null,"desc":"标注数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"用来做标注的数据，一般是行情数据","specific_type_name":"DataSource","name":"input_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Script","desc":"标注表达式，可以使用多个表达式，顺序执行，从第二个开始，可以使用label字段。可用数据字段见 https://bigquant.com/docs/develop/datasource/deprecated/history_data.html。可用操作符和函数见 `表达式引擎 <https://bigquant.com/docs/develop/bigexpr/usage.html>`_","specific_type_name":"列表","language":"","default":"# #号开始的表示注释\n# 0. 每行一个，顺序执行，从第二个开始，可以使用label字段\n# 1. 可用数据字段见 https://bigquant.com/docs/develop/datasource/deprecated/history_data.html\n# 2. 可用操作符和函数见 `表达式引擎 <https://bigquant.com/docs/develop/bigexpr/usage.html>`_\n\n# 计算收益：5日收盘价(作为卖出价格)除以明日开盘价(作为买入价格)\nshift(close, -5) / shift(open, -1)\n\n# 极值处理：用1%和99%分位的值做clip\nclip(label, all_quantile(label, 0.01), all_quantile(label, 0.99))\n\n# 将分数映射到分类，这里使用20个分类\nall_wbins(label, 20)\n\n# 过滤掉一字涨停的情况 (设置label为NaN，在后续处理和训练中会忽略NaN的label)\nwhere(shift(high, -1) == shift(low, -1), NaN, label)\n","auto_complete_type":"history_data_fields,bigexpr_functions","type_code":"code","name":"label_expr"},{"type_name":"Boolean","desc":"删除无标注数据，是否删除没有标注的数据","specific_type_name":null,"type_code":"bool","name":"drop_na_label","default":true},{"type_name":"Boolean","desc":"将标注转换为整数，一般用于分类学习","specific_type_name":null,"type_code":"bool","name":"cast_label_int","default":true},{"type_name":"String","desc":"日期列名，如果在表达式中用到切面相关函数时，比如 rank，会用到此列名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"date_col","default":"date"},{"type_name":"String","desc":"证券代码列名，如果在表达式中用到时间序列相关函数时，比如 shift，会用到此列名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"instrument_col","default":"instrument"},{"type_name":"Script","desc":"自定义表达式函数，字典格式，例:{'user_rank':user_rank}，字典的key是方法名称，字符串类型，字典的value是方法的引用，参考 文档-表达式引擎 https://bigquant.com/docs/develop/bigexpr/usage.html","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":null,"type_code":"code","name":"user_functions"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.731000"},{"_id":"bagging_classifier.1","name":"bagging_classifier","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"Bagging-分类","category":"机器学习\\分类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, n_estimators=10, subsample=1.0, feature_fraction=1.0, bootstrap=True, bootstrap_features=False, oob_score=False, key_cols='date,instrument', workers=1, random_state=0, other_train_parameters={'base_estimator': None})","doc":"\n    Bagging有放回随机抽样算法，用于分类，有放回随机抽取小样本，训练弱学习器，采取多数投票机制获得最终分类结果。\n    ","desc":"\n    Bagging有放回随机抽样算法，用于分类，有放回随机抽取小样本，训练弱学习器，采取多数投票机制获得最终分类结果。\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"弱学习器个数，基准估计器个数，默认为10","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"n_estimators","default":10},{"type_name":"Float","desc":"随机子集比重，训练基准估计器使用该随机子集","specific_type_name":null,"min":0,"max":1.0,"type_code":"float","name":"subsample","default":1.0},{"type_name":"Float","desc":"特征使用率，寻找最佳分割时要考虑的特征比率，float类型，默认考虑所有特征数，即取值1.0","specific_type_name":null,"min":0,"max":1.0,"type_code":"float","name":"feature_fraction","default":1.0},{"type_name":"Boolean","desc":"数据有放回抽样，是否有放回采样，默认为True","specific_type_name":null,"type_code":"bool","name":"bootstrap","default":true},{"type_name":"Boolean","desc":"特征有放回抽样，是否对特征有放回采样，默认为False","specific_type_name":null,"type_code":"bool","name":"bootstrap_features","default":false},{"type_name":"Boolean","desc":"采用袋外样本来评估误差，是否使用袋外样本估计泛化误差，默认为False，评估结果保存在oob_score_","specific_type_name":null,"type_code":"bool","name":"oob_score","default":false},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Int","desc":"并行作业数，同时使用多少个进程进行计算，默认是1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Int","desc":"随机数种子，默认是0","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"random_state","default":0},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{'base_estimator': None}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.733000"},{"_id":"bagging_regressor.1","name":"bagging_regressor","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"Bagging-回归","category":"机器学习\\回归","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, n_estimators=10, subsample=1.0, feature_fraction=1.0, bootstrap=True, bootstrap_features=False, oob_score=False, key_cols='date,instrument', workers=1, random_state=0, other_train_parameters={'base_estimator': None})","doc":"\n    Bagging有放回随机抽样算法，用于回归，有放回随机抽取小样本，训练弱学习器，通过平均获得最终回归结果。\n\n    ","desc":"\n    Bagging有放回随机抽样算法，用于回归，有放回随机抽取小样本，训练弱学习器，通过平均获得最终回归结果。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"弱学习器个数，基准估计器个数，默认为10","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"n_estimators","default":10},{"type_name":"Float","desc":"随机子集比重，训练基准估计器使用该随机子集","specific_type_name":null,"min":0,"max":1.0,"type_code":"float","name":"subsample","default":1.0},{"type_name":"Float","desc":"特征使用率，寻找最佳分割时要考虑的特征比率，float类型，默认考虑所有特征数，即取值1.0","specific_type_name":null,"min":0,"max":1.0,"type_code":"float","name":"feature_fraction","default":1.0},{"type_name":"Boolean","desc":"数据有放回抽样，是否有放回采样，默认为True","specific_type_name":null,"type_code":"bool","name":"bootstrap","default":true},{"type_name":"Boolean","desc":"特征有放回抽样，是否对特征有放回采样，默认为False","specific_type_name":null,"type_code":"bool","name":"bootstrap_features","default":false},{"type_name":"Boolean","desc":"采用袋外样本来评估误差，是否使用袋外样本估计泛化误差，默认为False，评估结果保存在oob_score_","specific_type_name":null,"type_code":"bool","name":"oob_score","default":false},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Int","desc":"并行作业数，同时使用多少个进程进行计算，默认是1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Int","desc":"随机数种子，默认是0","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"random_state","default":0},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{'base_estimator': None}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.734000"},{"_id":"cached.3","name":"cached","version":3,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":3,"friendly_name":"自定义Python模块","category":"自定义模块","arguments":"(run=, post_run=None, input_1=None, input_2=None, input_3=None, input_ports='', params={}, output_ports='', kwargs=None)","doc":"\n        执行任意Python代码，支持缓存加速。此模块支持1-3个输入端和1-3个输出端。使用此模块，我们可以快速的自定义模块，并支持缓存加速和增量运算。对于需要较多计算资源 (比如运行时间超过10s) 或者存储资源 (比如生成较多或者较大的文件) 的程序，都用此模块封装。\n        ","desc":null,"doc_url":"https://bigquant.com/docs/develop/modules/cache.html","interface":[{"type_name":null,"desc":"输出1，对应函数输出的 data_1","specific_type_name":null,"name":"data_1","optional":true,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输出2，对应函数输出的 data_2","specific_type_name":null,"name":"data_2","optional":true,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输出3，对应函数输出的 data_3","specific_type_name":null,"name":"data_3","optional":true,"type":"通用","type_code":"output_port"},{"type_name":"Script","desc":"主函数，返回Outputs对象","specific_type_name":"函数","language":"script.py","default":"# Python 代码入口函数，input_1/2/3 对应三个输入端，data_1/2/3 对应三个输出端\ndef bigquant_run(input_1, input_2, input_3):\n    # 示例代码如下。在这里编写您的代码\n    df = pd.DataFrame({'data': [1, 2, 3]})\n    data_1 = DataSource.write_df(df)\n    data_2 = DataSource.write_pickle(df)\n    return Outputs(data_1=data_1, data_2=data_2, data_3=None)\n","auto_complete_type":"python,history_data_fields,feature_fields,bigexpr_functions","type_code":"code","name":"run"},{"type_name":"Script","desc":"后处理函数，输入是主函数的输出，此函数输出不会被缓存","specific_type_name":"函数","language":"script.py","default":"# 后处理函数，可选。输入是主函数的输出，可以在这里对数据做处理，或者返回更友好的outputs数据格式。此函数输出不会被缓存。\ndef bigquant_run(outputs):\n    return outputs\n","auto_complete_type":"python,history_data_fields,feature_fields,bigexpr_functions","type_code":"code","name":"post_run"},{"type_name":null,"desc":"输入1，传入到函数的参数 input_1","specific_type_name":null,"name":"input_1","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入2，传入到函数的参数 input_2","specific_type_name":null,"name":"input_2","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入3，传入到函数的参数 input_3","specific_type_name":null,"name":"input_3","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"模块输入端，另存为模块时使用，示例input1,input2...","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"input_ports","default":""},{"type_name":"Script","desc":"模块参数，字典形式，给出参数的值。比如{'param1':1,'param2':2}","specific_type_name":"字典","language":"","default":"{}","auto_complete_type":null,"type_code":"code","name":"params"},{"type_name":"String","desc":"模块输出端，另存为模块时使用，示例data1,data2...","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"output_ports","default":""},{"type_name":"doc","desc":"主函数参数，run的参数，如果函数接受参数 input_1/2/3，如上的 input_1/2/3也将被加入到此参数里。在可视化模式下，只有参数 input_1/2/3 可用。","specific_type_name":"字典","name":"kwargs","type_code":"doc","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.737000"},{"_id":"cluster_affinity_propagation.1","name":"cluster_affinity_propagation","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"近邻传播-聚类","category":"机器学习\\聚类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, damping=0.5, iterations=200, convergence_iter=15, copy=True, affinity='euclidean', key_cols='date,instrument', other_train_parameters={})","doc":"\n    近邻传播算法，用于聚类，此算法为半监督，首先通过消息传递机制来搜索网络中各个数据点的聚类中心以及数据点与数据中心之间的隶属关系，然后根据数据中心和顶点之间的隶属关系来对待聚类数据集进行划分，形成若干个具有特定意义的子集。\n\n    ","desc":"\n    近邻传播算法，用于聚类，此算法为半监督，首先通过消息传递机制来搜索网络中各个数据点的聚类中心以及数据点与数据中心之间的隶属关系，然后根据数据中心和顶点之间的隶属关系来对待聚类数据集进行划分，形成若干个具有特定意义的子集。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据集，聚类训练结果为列label","specific_type_name":null,"name":"transform_trainds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Float","desc":"阻尼系数，取值在0.5到1之间，减少算法迭代产生震荡","specific_type_name":null,"min":0.5,"max":1.0,"type_code":"float","name":"damping","default":0.5},{"type_name":"Int","desc":"最大迭代次数，默认为200","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"iterations","default":200},{"type_name":"Int","desc":"算法收敛迭代次数，直到分类数没有变化时算法的迭代次数，默认为15","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"convergence_iter","default":15},{"type_name":"Boolean","desc":"复制输入数据，是否复制输入数据，默认为True","specific_type_name":null,"type_code":"bool","name":"copy","default":true},{"type_name":"Enumerated","desc":"距离度量方法，距离度量，目前支持precomputed和euclidean","specific_type_name":null,"values":["precomputed","euclidean"],"multi":false,"type_code":"choice","name":"affinity","default":"euclidean"},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.742000"},{"_id":"cluster_agglomerative.1","name":"cluster_agglomerative","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"层次-聚类","category":"机器学习\\聚类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, n_clusters=2, affinity='euclidean', linkage='ward', key_cols='date,instrument', other_train_parameters={})","doc":"\n    层次算法，用于聚类，通过计算不同类别的相似度类创建一个有层次的嵌套的树。在聚类树中，先找出和每个点最近似的点两两聚类，然后反复迭代这一过程，直到聚类完成。\n\n    ","desc":"\n    层次算法，用于聚类，通过计算不同类别的相似度类创建一个有层次的嵌套的树。在聚类树中，先找出和每个点最近似的点两两聚类，然后反复迭代这一过程，直到聚类完成。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据集，聚类训练结果为列label","specific_type_name":null,"name":"transform_trainds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"分类簇数量，默认为2","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"n_clusters","default":2},{"type_name":"Enumerated","desc":"距离度量方法，度量的方法，包括cosine,manhattan,euclidean等","specific_type_name":null,"values":["euclidean","l1","l2","manhattan","cosine","precomputed"],"multi":false,"type_code":"choice","name":"affinity","default":"euclidean"},{"type_name":"Enumerated","desc":"连接算法，如果使用ward，则距离度量只能使用euclidean","specific_type_name":null,"values":["ward","complete","average","single"],"multi":false,"type_code":"choice","name":"linkage","default":"ward"},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.743000"},{"_id":"cluster_birch.1","name":"cluster_birch","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"Birch-聚类","category":"机器学习\\聚类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, compute_labels=True, threshold=0.5, branching_factor=50, key_cols='date,instrument', other_train_parameters={'n_clusters': 3})","doc":"\n    Birch算法，用于聚类，作为一种层次聚类算法，BIRCH只需要单遍扫描数据集就能进行聚类。\n其他参数：n_clusters：分类簇的数量，在类别数特别多，没有先验知识的情况下，n_clusters可用None，即直接读取叶子结点中的子聚类。默认为3\n\n    ","desc":"\n    Birch算法，用于聚类，作为一种层次聚类算法，BIRCH只需要单遍扫描数据集就能进行聚类。\n其他参数：n_clusters：分类簇的数量，在类别数特别多，没有先验知识的情况下，n_clusters可用None，即直接读取叶子结点中的子聚类。默认为3\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据集，聚类训练结果为列label","specific_type_name":null,"name":"transform_trainds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Boolean","desc":"输出时表示类别，是否标示类别输出，默认为True","specific_type_name":null,"type_code":"bool","name":"compute_labels","default":true},{"type_name":"Float","desc":"簇半径阈值，限制新加入的样本和存在与现有子集群中样本的最大距离，默认为0.5","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"threshold","default":0.5},{"type_name":"Int","desc":"分支因子，限制一个节点中的子集群的数量，默认是50","specific_type_name":null,"min":2,"max":2147483647,"type_code":"int","name":"branching_factor","default":50},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{'n_clusters': 3}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.744000"},{"_id":"cluster_dbscan.1","name":"cluster_dbscan","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"DBSCAN-聚类","category":"机器学习\\聚类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, eps=0.5, min_samples=5, algorithm='auto', key_cols='date,instrument', workers=1, other_train_parameters={'metric': 'precomputed'})","doc":"\n    DBSCAN算法，用于聚类，\n\n    ","desc":"\n    DBSCAN算法，用于聚类，\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据集，聚类训练结果为列label","specific_type_name":null,"name":"transform_trainds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Float","desc":"邻域的距离阈值，两样本间最大距离","specific_type_name":null,"min":0.0,"max":1.7976931348623157e+308,"type_code":"float","name":"eps","default":0.5},{"type_name":"Int","desc":"最小样本数，核心点邻域中最小样本数，包括点本身","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"min_samples","default":5},{"type_name":"Enumerated","desc":"k-means算法调节，支持蛮力实现、KD树实现、球树实现，默认为自动选取最优","specific_type_name":null,"values":["auto","ball_tree","kd_tree","brute"],"multi":false,"type_code":"choice","name":"algorithm","default":"auto"},{"type_name":"String","desc":"关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Int","desc":"并行作业数，同时使用多少个进程进行计算，默认是1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{'metric': 'precomputed'}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.746000"},{"_id":"cluster_kmeans.1","name":"cluster_kmeans","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"K均值-聚类","category":"机器学习\\聚类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, n_clusters=8, init='k-means++', n_init=10, iterations=300, algorithm='auto', key_cols='date,instrument', workers=1, random_state=0, other_train_parameters={})","doc":"\n    K-means算法，用于聚类，先随机初始化各自的中心点，然后计算每个数据点到中心点的距离，将数据点划分到最近的中心点类别。然后用每一类的中心点作为新的中心点，重复迭代，直到迭代后变化不大为止。\n\n    ","desc":"\n    K-means算法，用于聚类，先随机初始化各自的中心点，然后计算每个数据点到中心点的距离，将数据点划分到最近的中心点类别。然后用每一类的中心点作为新的中心点，重复迭代，直到迭代后变化不大为止。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据集，聚类训练结果为列label","specific_type_name":null,"name":"transform_trainds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"簇的个数，聚类中心数量，默认为8","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"n_clusters","default":8},{"type_name":"Enumerated","desc":"质心初始化方法，默认为k-means++","specific_type_name":null,"values":["k-means++","random"],"multi":false,"type_code":"choice","name":"init","default":"k-means++"},{"type_name":"Int","desc":"质心初始化次数，初始化质心的次数，默认为10","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"n_init","default":10},{"type_name":"Int","desc":"最大迭代次数，迭代得到最终质心的次数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"iterations","default":300},{"type_name":"Enumerated","desc":"K-Means算法，auto选择elkan表示密集数据，full表示稀疏数据","specific_type_name":null,"values":["auto","full","elkan"],"multi":false,"type_code":"choice","name":"algorithm","default":"auto"},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Int","desc":"并行作业数，同时使用多少个进程进行计算，默认是1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Int","desc":"随机数种子，默认是0","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"random_state","default":0},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.747000"},{"_id":"cluster_spectral.1","name":"cluster_spectral","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"谱-聚类","category":"机器学习\\聚类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, n_clusters=3, affinity='rbf', n_neighbors=10, eigen_solver=None, eigen_tol=0.0, n_init=10, gamma=1.0, assign_labels='kmeans', key_cols='date,instrument', workers=1, random_state=0, other_train_parameters={})","doc":"\n    用于聚类，将图论应用于聚类。把所有的数据看做空间中的点，这些点之间可以用边连接起来。距离较远的两个点之间的边权重值较低，而距离较近的两个点之间的边权重值较高，通过对所有数据点组成的图进行切图，让切图后不同的子图间边权重和尽可能的低，而子图内的边权重和尽可能的高，从而达到聚类的目的。\n\n    ","desc":"\n    用于聚类，将图论应用于聚类。把所有的数据看做空间中的点，这些点之间可以用边连接起来。距离较远的两个点之间的边权重值较低，而距离较近的两个点之间的边权重值较高，通过对所有数据点组成的图进行切图，让切图后不同的子图间边权重和尽可能的低，而子图内的边权重和尽可能的高，从而达到聚类的目的。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据集，聚类训练结果为列label","specific_type_name":null,"name":"transform_trainds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"分类簇的数量，切图时降到的维数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"n_clusters","default":3},{"type_name":"Enumerated","desc":"相似矩阵的建立方式，为nearest_neighbors时忽略参数gamma，默认为rbf","specific_type_name":null,"values":["rbf","nearest_neighbors","precomputed","linear","poly","sigmoid"],"multi":false,"type_code":"choice","name":"affinity","default":"rbf"},{"type_name":"Int","desc":"近邻个数，KNN算法的K的个数，默认是10，affinity为nearest_neighbors忽略此参数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"n_neighbors","default":10},{"type_name":"Enumerated","desc":"特征值分解策略，amg存在稳定性问题，平台暂不支持","specific_type_name":null,"values":[null,"arpack","lobpcg"],"multi":false,"type_code":"choice","name":"eigen_solver","default":null},{"type_name":"Float","desc":"停止拉普拉斯矩阵特征分解条件，当eigen_solver为eigen_solver时生效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"eigen_tol","default":0.0},{"type_name":"Int","desc":"K-Means聚类的运行次数，最终结果是连续运行后的最佳输出","specific_type_name":null,"min":0,"max":2147483647,"type_code":"int","name":"n_init","default":10},{"type_name":"Float","desc":"核系数，rbf，poly，sigmoid，laplacian和chi2的核系数","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"gamma","default":1.0},{"type_name":"Enumerated","desc":"聚类方法，常用kmeans，但对质心初始化较敏感，discretize则不敏感","specific_type_name":null,"values":["kmeans","discretize"],"multi":false,"type_code":"choice","name":"assign_labels","default":"kmeans"},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Int","desc":"并行作业数，同时使用多少个进程进行计算，默认是1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Int","desc":"随机数种子，默认是0","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"random_state","default":0},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.749000"},{"_id":"concat.3","name":"concat","version":3,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":3,"friendly_name":"数据合并","category":"数据处理","arguments":"(input_data_1=None, input_data_2=None, input_data_3=None, input_data_list=[])","doc":"\n    将输入的数据按行进行上下合并，比如df1、df2各自10行，合并后就是20行的一个数据\n    ","desc":"\n    将输入的数据按行进行上下合并，比如df1、df2各自10行，合并后就是20行的一个数据\n    ","doc_url":"https://bigquant.com/docs/develop/modules/concat.html","interface":[{"type_name":null,"desc":"合并后的数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入1，DataSource第1个","specific_type_name":null,"name":"input_data_1","optional":false,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入2，DataSource第2个","specific_type_name":null,"name":"input_data_2","optional":false,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入3，DataSource第3个","specific_type_name":null,"name":"input_data_3","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"doc","desc":"输入列表，DataSource列表","specific_type_name":null,"name":"input_data_list","type_code":"doc","default":[]}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.750000"},{"_id":"custom_backtest.1","name":"custom_backtest","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"镜像回测","category":"回测与交易","arguments":"(instruments=, image=, start_date='', end_date='', till_now=False, commission=0.0, meta_data=None, parameters={}, risks={}, simulator={}, extra_parameters={'host_aliases': {'10.46.26.200': ['dolphindb.ficc.orient.com.cn'], '10.46.0.222': ['dockerhub.orient.ai']}, 'custom_backtest_mount_path': '/root/.config/SmartQuant Ltd', 'output_mount_path': '/root/.config/SmartQuant Ltd/OpenQuant 2014/data/output', 'data_base_mount_path': '/root/.config/SmartQuant Ltd/OpenQuant 2014/data', 'output_file_sep': {'orders': '\\t', 'staticstics': '\\t', 'performance': '\\t'}, 'need_convert_member': ['orders', 'staticstics', 'performance']}, clear_output=True, always_pull_image=False)","doc":"\n        定制回测模块,使用定制回测镜像来完成回测\n        ","desc":null,"doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"回测详细数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"合约代码","specific_type_name":"DataSource","name":"instruments","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"回测镜像，用来进行定制回测的镜像","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"image"},{"type_name":"String","desc":"开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":"Boolean","desc":"tillNow","specific_type_name":null,"type_code":"bool","name":"till_now","default":false},{"type_name":"Float","desc":"手续费（元/手）","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"commission","default":0.0},{"type_name":null,"desc":"因子数据","specific_type_name":"DataSource","name":"meta_data","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Script","desc":"回测参数, 字典形式。比如{'param1':1,'param2':2}","specific_type_name":"字典","language":"","default":"{\n    \"Alpha_MAwindow\": 3350.0,\n    \"Alpha_Sigmaratio\": 0.1,\n    \"OrderAmount\": 1.0,\n    \"FastMode\": true\n}\n","auto_complete_type":null,"type_code":"code","name":"parameters"},{"type_name":"Script","desc":"风控参数，字典形式。比如{'param1':1,'param2':2}","specific_type_name":"字典","language":"","default":"{\n}\n","auto_complete_type":null,"type_code":"code","name":"risks"},{"type_name":"Script","desc":"回测引擎参数，字典形式。比如{'param1':1,'param2':2}","specific_type_name":"字典","language":"","default":"{\n   \"FillOnQuote\": true,\n   \"FillOnTrade\": true,\n   \"PartialFills\": true,\n   \"FillOnLevel2\": false,\n   \"UseProbability\": false,\n   \"Probability\": 0\n}\n","auto_complete_type":null,"type_code":"code","name":"simulator"},{"type_name":"Script","desc":"额外参数，字典形式，给出参数的值。比如{'param1':1,'param2':2}","specific_type_name":"字典","language":"","default":"{\n    \"host_aliases\":\n        {\n            \"10.46.26.200\": [\"dolphindb.ficc.orient.com.cn\"],\n            \"10.46.0.222\": [\"dockerhub.orient.ai\"]\n        },\n    \"custom_backtest_mount_path\": \"/root/.config/SmartQuant Ltd\",\n    \"output_mount_path\" : \"/root/.config/SmartQuant Ltd/OpenQuant 2014/data/output\",\n    \"data_base_mount_path\" : \"/root/.config/SmartQuant Ltd/OpenQuant 2014/data\",\n    \"output_file_sep\": {\"orders\": \"\\t\", \"staticstics\": \"\\t\", \"performance\": \"\\t\"}\n    \"need_convert_member\": [\"orders\", \"staticstics\", \"performance\"]\n}\n","auto_complete_type":null,"type_code":"code","name":"extra_parameters"},{"type_name":"Boolean","desc":"清除回测产物","specific_type_name":null,"type_code":"bool","name":"clear_output","default":true},{"type_name":"Boolean","desc":"是否总是拉取镜像","specific_type_name":null,"type_code":"bool","name":"always_pull_image","default":false}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.752000"},{"_id":"daily_position_analysis.6","name":"daily_position_analysis","version":6,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":6,"friendly_name":"每日持仓分析","category":"量化分析","arguments":"(backtest_ds=None)","doc":"\n    用于回测结果分析。分析每日持仓股票的行业分布和数量分布。输出持仓行业市值和top10持仓的股票。\n    ","desc":"\n    用于回测结果分析。分析每日持仓股票的行业分布和数量分布。输出持仓行业市值和top10持仓的股票。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"每日各行业市值(申万一级)","specific_type_name":null,"name":"industry_market_value_daily","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"每日的top10持仓","specific_type_name":null,"name":"top10_positions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"回测详细数据","specific_type_name":"DataSource","name":"backtest_ds","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.753000"},{"_id":"datahub_kube_operator.2","name":"datahub_kube_operator","version":2,"owner":"bigquant","shared":false,"data":{"cacheable":false,"opensource":false,"serviceversion":2,"friendly_name":"创建定时任务(自定义)","category":"数据导入与构建","arguments":"(run_now=True, schedule_interval='15 5 * * *', task_name='当前文件名', email='', retry_times='3', image='default', node_selectors=None, volume_mounts=None, env_vars=None)","doc":"","desc":null,"doc_url":"https://bigquant.com/","interface":[{"type_name":null,"desc":"任务","specific_type_name":null,"name":"task","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Boolean","desc":"即时执行, 如果不勾选, 此模块不会即时执行","specific_type_name":null,"type_code":"bool","name":"run_now","default":true},{"type_name":"String","desc":"定时设置,可参考linux cron语法或者使用 @daily / @once / @hourly / @weekly / @monthly / @yearly","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"schedule_interval","default":"15 5 * * *"},{"type_name":"Enumerated","desc":"任务名, 默认为当前文件目录 + 当前文件名的形式生成","specific_type_name":null,"values":["当前文件名"],"multi":false,"type_code":"choice","name":"task_name","default":"当前文件名"},{"type_name":"String","desc":"通知邮箱, 多个可以使用 \",\" 分隔, 任务失败发送邮件提醒","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"email","default":""},{"type_name":"String","desc":"重试次数","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"retry_times","default":"3"},{"type_name":"String","desc":"镜像, 默认用户userbox镜像，使用其他镜像在此填入镜像地址","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"image","default":"default"},{"type_name":"Script","desc":"节点选择","specific_type_name":"函数","language":"script.py","default":"# 节点选择 选择节点的label\n# 当您选择了不同的节点执行定时任务，必须要注意每个节点可能需要挂载的目录是不同的\n{\"node1\": \"true\"}\n","auto_complete_type":"python","type_code":"code","name":"node_selectors"},{"type_name":"Script","desc":"挂载目录","specific_type_name":"函数","language":"script.py","default":"# 添加额外的挂载路径\n# 默认挂载路径为当前userbox的挂载路径\n# {key(pod目录) : value(host目录)}\n# 两个path都相同 后者可以使用None代替, pvc路径写法为  'pvc://' + claimName\n# 没有特殊设置可以不填\n{}\n","auto_complete_type":"python","type_code":"code","name":"volume_mounts"},{"type_name":"Script","desc":"环境变量","specific_type_name":"函数","language":"script.py","default":"# 额外环境变量设置\n# 默认环境变量为当前userbox的环境变量\n# 没有特殊设置可以不填\n{}\n","auto_complete_type":"python","type_code":"code","name":"env_vars"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.761000"},{"_id":"decision_tree_regressor.1","name":"decision_tree_regressor","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"决策树-回归","category":"机器学习\\回归","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, criterion='mse', feature_fraction=1, max_depth=30, min_samples_per_leaf=200, key_cols='date,instrument', other_train_parameters={})","doc":"\n    决策树算法，用于回归，回归树遍历所有特征对空间进行划分，直到取到某个特征的某个值使损失函数最小，从而得到划分点。回归结果为子空间内的样本平均数。\n\n    ","desc":"\n    决策树算法，用于回归，回归树遍历所有特征对空间进行划分，直到取到某个特征的某个值使损失函数最小，从而得到划分点。回归结果为子空间内的样本平均数。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Enumerated","desc":"决定分割的标准，支持均方误差mse，平均绝对误差mae及弗里德曼改进均方误差friedman_mse。默认是mse","specific_type_name":null,"values":["mse","mae","friedman_mse"],"multi":false,"type_code":"choice","name":"criterion","default":"mse"},{"type_name":"Float","desc":"特征使用率：寻找最佳分割时要考虑的特征比率","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"float","name":"feature_fraction","default":1},{"type_name":"Int","desc":"树的最大深度，限制每棵树的最大深度，数值大拟合能力强，数值小泛化能力强。设置为0则不限制","specific_type_name":null,"min":0,"max":2147483647,"type_code":"int","name":"max_depth","default":30},{"type_name":"Int","desc":"每叶节点最小样本数：每个叶节点最少需要的样本数量，一般值越大，泛化性性越好","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"min_samples_per_leaf","default":200},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.779000"},{"_id":"decomposition_pca.1","name":"decomposition_pca","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"主成分分析降维","category":"机器学习\\特征预处理","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, n_components=1, whiten=False, other_train_parameters={})","doc":"\n    主成分分析，主要功能为降维，是数据预处理的一个步骤。通过主成分分析对于原特征进行线性组合，得到影响力最大的新特征并输出。\n\n    ","desc":"\n    主成分分析，主要功能为降维，是数据预处理的一个步骤。通过主成分分析对于原特征进行线性组合，得到影响力最大的新特征并输出。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"降维后的特征","specific_type_name":null,"name":"pca_features","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"降维后训练集，降维特征通过属性pca_features查看","specific_type_name":null,"name":"transform_trainds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"降维后预测集，降维特征通过属性pca_features查看","specific_type_name":null,"name":"transform_predictds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要特征指定输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"主成分特征个数，希望PCA降维后的特征维度数目","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"n_components","default":1},{"type_name":"Boolean","desc":"白化，使得每个特征具有相同的方差","specific_type_name":null,"type_code":"bool","name":"whiten","default":false},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.781000"},{"_id":"derived_feature_extractor.2","name":"derived_feature_extractor","version":2,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":2,"friendly_name":"衍生特征抽取","category":"特征抽取","arguments":"(input_data=, features=, date_col='date', instrument_col='instrument', user_functions={})","doc":"\n        衍生特征(因子)抽取：对于衍生特征（通过表达式定义的，e.g. close_1/close_0），通过表达式引擎，计算表其值\n        ","desc":null,"doc_url":"https://bigquant.com/docs/develop/modules/derived_feature_extractor.html","interface":[{"type_name":null,"desc":"特征数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"特征数据，包含用于构建衍生因子的基础因子数据，一般来自基础特征抽取或者衍生特征抽取模块","specific_type_name":"DataSource","name":"input_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"特征列表，需要抽取的衍生特征，由表达式构建。可用数据字段来自输入的data，可用操作符和函数见 `表达式引擎 <https://bigquant.com/docs/develop/bigexpr/usage.html>`_","specific_type_name":"列表|DataSource","name":"features","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"日期列名，如果在表达式中用到切面相关函数时，比如 rank，会用到此列名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"date_col","default":"date"},{"type_name":"String","desc":"证券代码列名，如果在表达式中用到时间序列相关函数时，比如 shift，会用到此列名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"instrument_col","default":"instrument"},{"type_name":"Script","desc":"自定义表达式函数，字典格式，例:{'user_rank':user_rank}，字典的key是方法名称，字符串类型，字典的value是方法的引用，参考 文档-表达式引擎 https://bigquant.com/docs/develop/bigexpr/usage.html","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"feature_fields,bigexpr_functions","type_code":"code","name":"user_functions"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.782000"},{"_id":"derived_feature_extractor.3","name":"derived_feature_extractor","version":3,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":3,"friendly_name":"衍生特征抽取","category":"特征抽取","arguments":"(input_data=, features=, date_col='date', instrument_col='instrument', drop_na=False, remove_extra_columns=False, user_functions={})","doc":"\n        衍生特征(因子)抽取：对于衍生特征（通过表达式定义的，e.g. close_1/close_0），通过表达式引擎，计算表其值。只要涉及到表达式引擎构建的因子，都需要通过该模块构建出衍生因子。。只要涉及到表达式引擎构建的因子，都需要通过该模块构建出衍生因子。。只要涉及到表达式引擎构建的因子，都需要通过该模块构建出衍生因子。。只要涉及到表达式引擎构建的因子，都需要通过该模块构建出衍生因子。。只要涉及到表达式引擎构建的因子，都需要通过该模块构建出衍生因子。\n        ","desc":null,"doc_url":"https://bigquant.com/docs/develop/modules/derived_feature_extractor.html","interface":[{"type_name":null,"desc":"输出数据，抽取后特征数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输出数据，抽取后特征数据，包含用于构建衍生因子的基础因子数据，一般来自基础特征抽取或者衍生特征抽取模块","specific_type_name":"DataSource","name":"input_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"特征列表，需要抽取的衍生特征，由表达式构建。可用数据字段来自输入的data，可用操作符和函数见[表达式引擎](https://bigquant.com/docs/develop/bigexpr/usage.html)","specific_type_name":"列表|DataSource","name":"features","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"日期列名，如果在表达式中用到切面相关函数时，比如 rank，会用到此列名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"date_col","default":"date"},{"type_name":"String","desc":"代码列名，如果在表达式中用到时间序列相关函数时，比如 shift，会用到此列名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"instrument_col","default":"instrument"},{"type_name":"Boolean","desc":"删除na数据，删除存在空数据(NA)的行","specific_type_name":null,"type_code":"bool","name":"drop_na","default":false},{"type_name":"Boolean","desc":"删除多余的列，删除不在输入特征、日期和代码的列","specific_type_name":null,"type_code":"bool","name":"remove_extra_columns","default":false},{"type_name":"Script","desc":"自定义表达式函数，字典格式，例:{'user_rank':user_rank}，字典的key是方法名称，字符串类型，字典的value是方法的引用，参考文档[表达式引擎](https://bigquant.com/docs/develop/bigexpr/usage.html)","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"feature_fields,bigexpr_functions","type_code":"code","name":"user_functions"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.783000"},{"_id":"dl_convert_to_bin.1","name":"dl_convert_to_bin","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"序列窗口滚动(深度学习)","category":"深度学习\\数据处理","arguments":"(input_data=, features=, window_size=1)","doc":"\n        对使用深度学习模块的数据进行预处理\n        ","desc":null,"doc_url":"","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"DataSource数据","specific_type_name":"DataSource","name":"input_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"特征列表","specific_type_name":"列表|DataSource","name":"features","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Int","desc":"窗口大小，滚动窗口大小，1为不滚动，只用当前一行特征","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"window_size","default":1}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.786000"},{"_id":"dl_convert_to_bin.2","name":"dl_convert_to_bin","version":2,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":2,"friendly_name":"序列窗口滚动(深度学习)","category":"深度学习\\数据处理","arguments":"(input_data=, features=, window_size=1, feature_clip=5, flatten=True, window_along_col='instrument')","doc":"\n        对使用深度学习模块的数据进行预处理，一般在标准化后使用。模块先根据“分组滚动窗口”对输入数据进行分组，再剪除特征绝对值大于“特征剪裁值”的数据避免极值的影响，最后根据“序列窗口大小”确定序列长度，如：窗口大小设置为5即为使用过去5天的因子数据。\n        ","desc":null,"doc_url":"","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"DataSource数据","specific_type_name":"DataSource","name":"input_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"特征列表","specific_type_name":"列表|DataSource","name":"features","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Int","desc":"窗口大小，滚动窗口大小，1为不滚动，只用当前一行特征","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"window_size","default":1},{"type_name":"Int","desc":"特征裁剪值","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"feature_clip","default":5},{"type_name":"Boolean","desc":"是否特征展开，如果为True是(window_size*feature_size,)，False是(window_wize，feature_size)","specific_type_name":null,"type_code":"bool","name":"flatten","default":true},{"type_name":"String","desc":"分组滚动窗口，按window_along_col字段分组窗口滚动","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"window_along_col","default":"instrument"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.787000"},{"_id":"dl_layer_activation.1","name":"dl_layer_activation","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"激活层(Activation)","category":"深度学习\\常用层","arguments":"(activation='tanh', user_activation=None, name=None, inputs=None)","doc":"\n    激活层，对一个层的输出施加激活函数\n    ","desc":"\n    激活层，对一个层的输出施加激活函数\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"tanh"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.789000"},{"_id":"dl_layer_activityregularization.1","name":"dl_layer_activityregularization","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"ActivityRegularization层","category":"深度学习\\常用层","arguments":"(l1=0.0, l2=0.0, name=None, inputs=None)","doc":"\n    ActivityRegularizer层，经过本层的数据不会有任何变化，但会基于其激活值更新损失函数值，可设置L1/L2范数更新损失函数。\n    ","desc":"\n    ActivityRegularizer层，经过本层的数据不会有任何变化，但会基于其激活值更新损失函数值，可设置L1/L2范数更新损失函数。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Float","desc":"L1范数，l1，L1范数正则因子（正浮点数）","specific_type_name":null,"min":0,"max":1.7976931348623157e+308,"type_code":"float","name":"l1","default":0.0},{"type_name":"Float","desc":"L2范数，l2，L2范数正则因子（正浮点数）","specific_type_name":null,"min":0,"max":1.7976931348623157e+308,"type_code":"float","name":"l2","default":0.0},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.790000"},{"_id":"dl_layer_add.1","name":"dl_layer_add","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Add层","category":"深度学习\\融合层","arguments":"(input1=, input2=, input3=None, name=None)","doc":"\n    属于融合层。属于融合层。该层接收一个列表的同shape张量，并返回它们的和，shape不变。\n    ","desc":"\n    属于融合层。属于融合层。该层接收一个列表的同shape张量，并返回它们的和，shape不变。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入1","specific_type_name":null,"name":"input1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入2","specific_type_name":null,"name":"input2","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入3","specific_type_name":null,"name":"input3","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.791000"},{"_id":"dl_layer_alphadropout.1","name":"dl_layer_alphadropout","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"AlphaDropout层","category":"深度学习\\噪声层","arguments":"(rate=, noise_shape=None, seed=None, name=None, inputs=None)","doc":"\n    对输入施加Alpha Dropout。Alpha Dropout是一种保持输入均值和方差不变的Dropout，该层的作用是即使在dropout时也保持数据的自规范性。 通过随机对负的饱和值进行激活，Alphe Drpout与selu激活函数配合较好。\n    ","desc":"\n    对输入施加Alpha Dropout。Alpha Dropout是一种保持输入均值和方差不变的Dropout，该层的作用是即使在dropout时也保持数据的自规范性。 通过随机对负的饱和值进行激活，Alphe Drpout与selu激活函数配合较好。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Float","desc":"dropout率，断连概率,与Dropout层相同","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"rate"},{"type_name":"String","desc":"noise_shape，noise_shape。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"noise_shape","default":null},{"type_name":"Int","desc":"随机数种子，整数","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"seed","default":null},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.792000"},{"_id":"dl_layer_average.1","name":"dl_layer_average","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Average层","category":"深度学习\\融合层","arguments":"(input1=, input2=, input3=None, name=None)","doc":"\n    属于融合层。属于融合层。该层接收一个列表的同shape张量，并返回它们的逐元素均值，shape不变。\n    ","desc":"\n    属于融合层。属于融合层。该层接收一个列表的同shape张量，并返回它们的逐元素均值，shape不变。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入1","specific_type_name":null,"name":"input1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入2","specific_type_name":null,"name":"input2","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入3","specific_type_name":null,"name":"input3","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.794000"},{"_id":"dl_layer_averagepooling1d.1","name":"dl_layer_averagepooling1d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"AveragePooling1D层","category":"深度学习\\池化层","arguments":"(pool_size=2, strides=None, padding='valid', name=None, inputs=None)","doc":"\n    对时域1D信号进行平均值池化\n    ","desc":"\n    对时域1D信号进行平均值池化\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"池化的窗口大小，窗口大小，pool_size，整数，池化","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"pool_size","default":2},{"type_name":"Int","desc":"下采样因子，strides，整数或None，例如设2将会使得输出shape为输入的一半，若为None则默认值为pool_size","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"strides","default":null},{"type_name":"Enumerated","desc":"padding","specific_type_name":null,"values":["valid","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.795000"},{"_id":"dl_layer_averagepooling2d.1","name":"dl_layer_averagepooling2d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"AveragePooling2D层","category":"深度学习\\池化层","arguments":"(pool_size='2,2', strides=None, padding='valid', data_format='channels_last', name=None, inputs=None)","doc":"\n    为空域信号施加平均值池化\n    ","desc":"\n    为空域信号施加平均值池化\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"pool_size，代表在两个方向（竖直，水平）上的下采样因子，如取（2，2）将使图片在两个维度上均变为原长的一半。为整数意为各个维度值相同且为该数字。。长为 2 的整数列表，列表用英文逗号(,)分隔，例如 2,2","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"pool_size","default":"2,2"},{"type_name":"String","desc":"步长，strides，步长值，如果不设置，默认是pool_size。长为 2 的整数列表，列表用英文逗号(,)分隔，例如 2,2","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strides","default":null},{"type_name":"Enumerated","desc":"padding方式，padding，用于在卷积时保持边界信息。SAME方式，直接填充；VALID方式，直接计算输出","specific_type_name":null,"values":["valid","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"Enumerated","desc":"通道维位置，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.796000"},{"_id":"dl_layer_averagepooling3d.1","name":"dl_layer_averagepooling3d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"AveragePooling3D层","category":"深度学习\\池化层","arguments":"(pool_size='2,2,2', strides=None, padding='valid', data_format='channels_last', name=None, inputs=None)","doc":"\n    为3D信号（空域或时空域）施加平均值池化\n    ","desc":"\n    为3D信号（空域或时空域）施加平均值池化\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"pool_size，代表在三个维度上的下采样因子，如取（2，2，2）将使信号在每个维度都变为原来的一半长。。长为 3 的整数列表，列表用英文逗号(,)分隔，例如 2,2,2","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"pool_size","default":"2,2,2"},{"type_name":"String","desc":"步长，strides，步长值，如果不设置，默认是pool_size。长为 3 的整数列表，列表用英文逗号(,)分隔，例如 2,2,2","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strides","default":null},{"type_name":"Enumerated","desc":"padding方式，padding，用于在卷积时保持边界信息。SAME方式，直接填充；VALID方式，直接计算输出","specific_type_name":null,"values":["valid","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"Enumerated","desc":"通道维位置，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.797000"},{"_id":"dl_layer_batchnormalization.1","name":"dl_layer_batchnormalization","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"BatchNormalization层","category":"深度学习\\规范层","arguments":"(axis=-1, momentum=0.99, epsilon=0.001, center=True, scale=True, beta_initializer='zeros', user_beta_initializer=None, gamma_initializer='ones', user_gamma_initializer=None, moving_mean_initializer='zeros', user_moving_mean_initializer=None, moving_variance_initializer='ones', user_moving_variance_initializer=None, beta_regularizer='None', beta_regularizer_l1=0, beta_regularizer_l2=0, user_beta_regularizer=None, gamma_regularizer='None', gamma_regularizer_l1=0, gamma_regularizer_l2=0, user_gamma_regularizer=None, beta_constraint='None', user_beta_constraint=None, gamma_constraint='None', user_gamma_constraint=None, name=None, inputs=None)","doc":"\n    该层在每个batch上将前一层的激活值重新规范化，使其输出数据的均值接近0，其标准差接近1。\nBN层的作用：加速收敛；控制过拟合，可以少用或不用Dropout和正则；降低网络对初始化权重不敏感；允许使用较大的学习率。\n    ","desc":"\n    该层在每个batch上将前一层的激活值重新规范化，使其输出数据的均值接近0，其标准差接近1。\nBN层的作用：加速收敛；控制过拟合，可以少用或不用Dropout和正则；降低网络对初始化权重不敏感；允许使用较大的学习率。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"需要规范化的轴，axis，指定要规范化的轴，通常为特征轴。例如在进行data_format=\"channels_first的2D卷积后，一般会设axis=1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"axis","default":-1},{"type_name":"Float","desc":"动量，momentum，动态均值的动量","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"momentum","default":0.99},{"type_name":"Float","desc":"epsilon，大于0的小浮点数，用于防止除0错误","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"epsilon","default":0.001},{"type_name":"Boolean","desc":"中心化，center，若设为True，将会将beta作为偏置加上去，否则忽略参数beta","specific_type_name":null,"type_code":"bool","name":"center","default":true},{"type_name":"Boolean","desc":"规范化，scale，若设为True，则会乘以gamma，否则不使用gamma。当下一层是线性的时，可以设False，因为scaling的操作将被下一层执行。","specific_type_name":null,"type_code":"bool","name":"scale","default":true},{"type_name":"Enumerated","desc":"beta初始化，beta_initializer，本选项里的函数使用的是默认参数，如果需要使用自定义参数或者其他函数，可以选择自定义，然后在下面输入自定义函数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"beta_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义beta初始化，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_beta_initializer"},{"type_name":"Enumerated","desc":"gamma初始化，gamma_initializer，本选项里的函数使用的是默认参数，如果需要使用自定义参数或者其他函数，可以选择自定义，然后在下面输入自定义函数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"gamma_initializer","default":"ones"},{"type_name":"Script","desc":"自定义gamma初始化，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_gamma_initializer"},{"type_name":"Enumerated","desc":"moving_mean初始化，moving_mean_initializer，本选项里的函数使用的是默认参数，如果需要使用自定义参数或者其他函数，可以选择自定义，然后在下面输入自定义函数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"moving_mean_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义moving_mean初始化，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_moving_mean_initializer"},{"type_name":"Enumerated","desc":"moving_variance初始化，moving_variance_initializer，本选项里的函数使用的是默认参数，如果需要使用自定义参数或者其他函数，可以选择自定义，然后在下面输入自定义函数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"moving_variance_initializer","default":"ones"},{"type_name":"Script","desc":"自定义moving_variance初始化，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_moving_variance_initializer"},{"type_name":"Enumerated","desc":"beta正则项，beta_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"beta_regularizer","default":"None"},{"type_name":"Float","desc":"beta正则项 L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"beta_regularizer_l1","default":0},{"type_name":"Float","desc":"beta正则项 L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"beta_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义beta正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_beta_regularizer"},{"type_name":"Enumerated","desc":"gamma正则项，gamma_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"gamma_regularizer","default":"None"},{"type_name":"Float","desc":"gamma正则项 L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"gamma_regularizer_l1","default":0},{"type_name":"Float","desc":"gamma正则项 L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"gamma_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义gamma正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_gamma_regularizer"},{"type_name":"Enumerated","desc":"beta约束项，beta_constraint，在优化过程中为网络的参数施加约束。本选项里的函数使用的是默认参数，如果需要使用自定义参数或者其他函数，可以选择自定义，然后在下面输入自定义函数","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"beta_constraint","default":"None"},{"type_name":"Script","desc":"自定义beta约束项，示例：\ndef bigquant_run(w):\n    from tensorflow.keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_beta_constraint"},{"type_name":"Enumerated","desc":"gamma约束项，gamma_constraint，在优化过程中为网络的参数施加约束。本选项里的函数使用的是默认参数，如果需要使用自定义参数或者其他函数，可以选择自定义，然后在下面输入自定义函数","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"gamma_constraint","default":"None"},{"type_name":"Script","desc":"自定义gamma约束项，示例：\ndef bigquant_run(w):\n    from tensorflow.keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_gamma_constraint"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.798000"},{"_id":"dl_layer_bidirectional.1","name":"dl_layer_bidirectional","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Bidirectional层","category":"深度学习\\包装器","arguments":"(layer=, merge_mode='None', weights=None, name=None, inputs=None)","doc":"\n    双向RNN包装器\n    ","desc":"\n    双向RNN包装器\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入层","specific_type_name":null,"name":"layer","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Enumerated","desc":"merge_mode，Mode by which outputs of the forward and backward RNNs will be combined. 前向和后向RNN输出的结合方式，为sum,mul,concat,ave和None之一，若设为None，则返回值不结合，而是以列表的形式返回","specific_type_name":null,"values":["sum","mul","concat","ave","None"],"multi":false,"type_code":"choice","name":"merge_mode","default":"None"},{"type_name":"String","desc":"weights，列表，列表用英文逗号(,)分隔，例如 1,2","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"weights","default":null},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.800000"},{"_id":"dl_layer_concatenate.1","name":"dl_layer_concatenate","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Concatenate层","category":"深度学习\\融合层","arguments":"(input1=, input2=, input3=None, axis=-1, name=None)","doc":"\n    该层接收一个列表的同shape张量，并返回它们的按照给定轴相接构成的向量。\n    ","desc":"\n    该层接收一个列表的同shape张量，并返回它们的按照给定轴相接构成的向量。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入1","specific_type_name":null,"name":"input1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入2","specific_type_name":null,"name":"input2","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入3","specific_type_name":null,"name":"input3","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"axis，想接的轴","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"axis","default":-1},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.801000"},{"_id":"dl_layer_conv1d.1","name":"dl_layer_conv1d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Conv1D层","category":"深度学习\\卷积层","arguments":"(filters=, kernel_size=, strides='1', padding='valid', dilation_rate=1, activation='None', user_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, bias_initializer='Zeros', user_bias_initializer=None, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, bias_constraint='None', user_bias_constraint=None, name=None, inputs=None)","doc":"\n    一维卷积层（即时域卷积），用以在一维输入信号上进行邻域滤波。当使用该层作为首层时，需要提供关键字参数input_shape。例如(10,128)代表一个长为10的序列，序列中每个信号为128向量。而(None, 128)代表变长的128维向量序列。\n该层生成将输入信号与卷积核按照单一的空域（或时域）方向进行卷积。如果use_bias=True，则还会加上一个偏置项，若activation不为None，则输出为经过激活函数的输出。\n    ","desc":"\n    一维卷积层（即时域卷积），用以在一维输入信号上进行邻域滤波。当使用该层作为首层时，需要提供关键字参数input_shape。例如(10,128)代表一个长为10的序列，序列中每个信号为128向量。而(None, 128)代表变长的128维向量序列。\n该层生成将输入信号与卷积核按照单一的空域（或时域）方向进行卷积。如果use_bias=True，则还会加上一个偏置项，若activation不为None，则输出为经过激活函数的输出。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"卷积核数目，filters，即输出的维度","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"filters"},{"type_name":"String","desc":"kernel_size，卷积核的空域或时域窗长度。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"kernel_size"},{"type_name":"String","desc":"步长，strides，卷积的步长。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strides","default":"1"},{"type_name":"Enumerated","desc":"padding，补0策略，为“valid”, “same” 或“causal”，“causal”将产生因果（膨胀的）卷积，即output[t]不依赖于input[t+1：]。当对不能违反时间顺序的时序信号建模时有用。参考WaveNet: A Generative Model for Raw Audio, section 2.1.。“valid”代表只进行有效的卷积，即对边界数据不处理。“same”代表保留边界处的卷积结果，通常会导致输出shape与输入shape相同。","specific_type_name":null,"values":["valid","causal","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"Int","desc":"dilation_rate，整数，指定dilated convolution中的膨胀比例。任何不为1的dilation_rate均与任何不为1的strides均不兼容。","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"dilation_rate","default":1},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"None"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"Zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.802000"},{"_id":"dl_layer_conv2d.1","name":"dl_layer_conv2d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Conv2D层","category":"深度学习\\卷积层","arguments":"(filters=, kernel_size=, strides='1,1', padding='valid', data_format='channels_last', dilation_rate='1,1', activation='None', user_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, bias_initializer='Zeros', user_bias_initializer=None, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, bias_constraint='None', user_bias_constraint=None, name=None, inputs=None)","doc":"\n    二维卷积层，即对图像的空域卷积。该层对二维输入进行滑动窗卷积，当使用该层作为第一层时，应提供input_shape参数。例如input_shape = (128,128,3)代表128*128的彩色RGB图像（data_format='channels_last'）\n    ","desc":"\n    二维卷积层，即对图像的空域卷积。该层对二维输入进行滑动窗卷积，当使用该层作为第一层时，应提供input_shape参数。例如input_shape = (128,128,3)代表128*128的彩色RGB图像（data_format='channels_last'）\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"卷积核数目，filters，即输出的维度","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"filters"},{"type_name":"String","desc":"kernel_size，卷积核的空域或时域窗长度。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"kernel_size"},{"type_name":"String","desc":"步长，strides，卷积的步长。长为 2 的整数列表，列表用英文逗号(,)分隔，例如 2,2","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strides","default":"1,1"},{"type_name":"Enumerated","desc":"padding，补0策略，为“valid”, “same” 。“valid”代表只进行有效的卷积，即对边界数据不处理。“same”代表保留边界处的卷积结果，通常会导致输出shape与输入shape相同。","specific_type_name":null,"values":["valid","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"dilation_rate，整数或由2个整数构成的list/tuple，指定dilated convolution中的膨胀比例。任何不为1的dilation_rate均与任何不为1的strides均不兼容。","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"dilation_rate","default":"1,1"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"None"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"Zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.804000"},{"_id":"dl_layer_conv2dtranspose.1","name":"dl_layer_conv2dtranspose","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Conv2DTranspose层","category":"深度学习\\卷积层","arguments":"(filters=, kernel_size=, strides='1,1', padding='valid', data_format='channels_last', dilation_rate='1,1', activation='None', user_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, bias_initializer='zeros', user_bias_initializer=None, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, bias_constraint='None', user_bias_constraint=None, name=None, inputs=None)","doc":"\n    该层是转置的卷积操作（反卷积）。需要反卷积的情况通常发生在用户想要对一个普通卷积的结果做反方向的变换。例如，将具有该卷积层输出shape的tensor转换为具有该卷积层输入shape的tensor。同时保留与卷积层兼容的连接模式。\n当使用该层作为第一层时，应提供input_shape参数。例如input_shape = (3,128,128)代表128*128的彩色RGB图像\n    ","desc":"\n    该层是转置的卷积操作（反卷积）。需要反卷积的情况通常发生在用户想要对一个普通卷积的结果做反方向的变换。例如，将具有该卷积层输出shape的tensor转换为具有该卷积层输入shape的tensor。同时保留与卷积层兼容的连接模式。\n当使用该层作为第一层时，应提供input_shape参数。例如input_shape = (3,128,128)代表128*128的彩色RGB图像\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"卷积核数目，filters，即输出的维度","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"filters"},{"type_name":"String","desc":"kernel_size，卷积核的空域或时域窗长度。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"kernel_size"},{"type_name":"String","desc":"卷积的步长，strides，单个整数或由两个整数构成的list/tuple，为卷积的步长。如为单个整数，则表示在各个空间维度的相同步长。任何不为1的strides均与任何不为1的dilation_rate均不兼容。用英文逗号(,)分隔的整数列表，例如 10,20","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strides","default":"1,1"},{"type_name":"Enumerated","desc":"padding，补0策略，为“valid”, “same” 。“valid”代表只进行有效的卷积，即对边界数据不处理。“same”代表保留边界处的卷积结果，通常会导致输出shape与输入shape相同。","specific_type_name":null,"values":["valid","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"dilation_rate，整数或由2个整数构成的list/tuple，指定dilated convolution中的膨胀比例。任何不为1的dilation_rate均与任何不为1的strides均不兼容。","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"dilation_rate","default":"1,1"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"None"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.806000"},{"_id":"dl_layer_conv3d.1","name":"dl_layer_conv3d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Conv3D层","category":"深度学习\\卷积层","arguments":"(filters=, kernel_size=, strides='1,1,1', padding='valid', data_format='channels_last', dilation_rate='1,1,1', activation='None', user_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, bias_initializer='zeros', user_bias_initializer=None, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, bias_constraint='None', user_bias_constraint=None, name=None, inputs=None)","doc":"\n    三维卷积对三维的输入进行滑动窗卷积，当使用该层作为第一层时，应提供input_shape参数。例如input_shape = (3,10,128,128)代表对10帧128*128的彩色RGB图像进行卷积。数据的通道位置仍然有data_format参数指定。\n    ","desc":"\n    三维卷积对三维的输入进行滑动窗卷积，当使用该层作为第一层时，应提供input_shape参数。例如input_shape = (3,10,128,128)代表对10帧128*128的彩色RGB图像进行卷积。数据的通道位置仍然有data_format参数指定。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"卷积核数目，filters，即输出的维度","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"filters"},{"type_name":"String","desc":"kernel_size，卷积核的空域或时域窗长度。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"kernel_size"},{"type_name":"String","desc":"卷积的步长，strides，单个整数或由3个整数构成的list/tuple，为卷积的步长。如为单个整数，则表示在各个空间维度的相同步长。任何不为1的strides均与任何不为1的dilation_rate均不兼容","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strides","default":"1,1,1"},{"type_name":"Enumerated","desc":"padding，补0策略，为“valid”, “same” 。“valid”代表只进行有效的卷积，即对边界数据不处理。“same”代表保留边界处的卷积结果，通常会导致输出shape与输入shape相同。","specific_type_name":null,"values":["valid","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"dilation_rate，单个整数或由3个个整数构成的list/tuple，指定dilated convolution中的膨胀比例。任何不为1的dilation_rate均与任何不为1的strides均不兼容。","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"dilation_rate","default":"1,1,1"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"None"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.808000"},{"_id":"dl_layer_convlstm2d.1","name":"dl_layer_convlstm2d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"ConvLSTM2D层","category":"深度学习\\循环层","arguments":"(filters=, kernel_size=, strides='1,1', padding='valid', data_format='channels_last', dilation_rate='1,1', activation='tanh', user_activation=None, recurrent_activation='hard_sigmoid', user_recurrent_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, recurrent_initializer='orthogonal', user_recurrent_initializer=None, bias_initializer='zeros', user_bias_initializer=None, unit_forget_bias=True, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, recurrent_regularizer='None', recurrent_regularizer_l1=0, recurrent_regularizer_l2=0, user_recurrent_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, recurrent_constraint='None', user_recurrent_constraint=None, bias_constraint='None', user_bias_constraint=None, return_sequences=False, go_backwards=False, stateful=False, dropout=0.0, recurrent_dropout=0.0, implementation='2', name=None, inputs=None)","doc":"\n    ConvLSTM2D是一个LSTM网络，但它的输入变换和循环变换是通过卷积实现的\n    ","desc":"\n    ConvLSTM2D是一个LSTM网络，但它的输入变换和循环变换是通过卷积实现的\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"卷积核数目，filters，即输出的维度","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"filters"},{"type_name":"String","desc":"kernel_size，卷积核的空域或时域窗长度。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"kernel_size"},{"type_name":"String","desc":"strides，卷积步长。当不等于1时，无法使用dilation功能，即dialation_rate必须为1。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strides","default":"1,1"},{"type_name":"Enumerated","desc":"padding，补0策略","specific_type_name":null,"values":["valid","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"dilation_rate，指定dilated convolution中的膨胀比例。任何不为1的dilation_rate均与任何不为1的strides均不兼容。。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"dilation_rate","default":"1,1"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"tanh"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Enumerated","desc":"recurrent激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用recurrent自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_activation","default":"hard_sigmoid"},{"type_name":"Script","desc":"recurrent自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"循环核初始化方法，recurrent_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"recurrent_initializer","default":"orthogonal"},{"type_name":"Script","desc":"自定义循环核初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Boolean","desc":"unit_forget_bias，如果为, 初始化时在遗忘门的偏置项加1。设置为True，会强制使bias_initializer=\"Zeros\"","specific_type_name":null,"type_code":"bool","name":"unit_forget_bias","default":true},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"循环核正则项，recurrent_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_regularizer","default":"None"},{"type_name":"Float","desc":"循环核正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l1","default":0},{"type_name":"Float","desc":"循环核正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义循环核正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"循环核约束项，recurrent_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_constraint","default":"None"},{"type_name":"Script","desc":"自定义循环核约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"Boolean","desc":"return_sequences，默认False，控制返回类型。若为True则返回整个序列，否则仅返回输出序列的最后一个输出","specific_type_name":null,"type_code":"bool","name":"return_sequences","default":false},{"type_name":"Boolean","desc":"go_backwards，默认为False，若为True，则逆向处理输入序列并返回逆序后的序列","specific_type_name":null,"type_code":"bool","name":"go_backwards","default":false},{"type_name":"Boolean","desc":"stateful，默认为False，若为True，则一个batch中下标为i的样本的最终状态将会用作下一个batch同样下标的样本的初始状态","specific_type_name":null,"type_code":"bool","name":"stateful","default":false},{"type_name":"Float","desc":"dropout，0~1之间的浮点数，控制输入线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"dropout","default":0.0},{"type_name":"Float","desc":"recurrent_dropout，0~1之间的浮点数，控制循环状态的线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"recurrent_dropout","default":0.0},{"type_name":"Enumerated","desc":"implementation, 1或2，如果设为1，则RNN将以更多但更小的矩阵乘法实现，因此在CPU上运行更慢，在GPU上运行更快，并且消耗更少的内存。如果设为2，则RNN将以更少但是更大的矩阵乘法实现，因此在CPU上运行更快，但消耗更多的内存。","specific_type_name":null,"values":["1","2"],"multi":false,"type_code":"choice","name":"implementation","default":"2"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.810000"},{"_id":"dl_layer_cropping1d.1","name":"dl_layer_cropping1d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Cropping1D层","category":"深度学习\\卷积层","arguments":"(cropping='1,1', name=None, inputs=None)","doc":"\n    在时间轴（axis1）上对1D输入（即时间序列）进行裁剪\n    ","desc":"\n    在时间轴（axis1）上对1D输入（即时间序列）进行裁剪\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"cropping，长为2的tuple，指定在序列的首尾要裁剪掉多少个元素，用英文逗号(,)分隔的整数列表，例如 10 或者 32,24","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"cropping","default":"1,1"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.813000"},{"_id":"dl_layer_cropping2d.1","name":"dl_layer_cropping2d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Cropping2D层","category":"深度学习\\卷积层","arguments":"(cropping='0,0,0,0', data_format='channels_last', name=None, inputs=None)","doc":"\n    对2D输入（图像）进行裁剪，将在空域维度，即宽和高的方向上裁剪 (e.g. picture).\n    ","desc":"\n    对2D输入（图像）进行裁剪，将在空域维度，即宽和高的方向上裁剪 (e.g. picture).\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"cropping，长为4的列表，2个一组，分别为宽和高方向上头部与尾部需要裁剪掉的元素数。列表用英文逗号(,)分隔的整数列表，例如 10 或者 32,24","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"cropping","default":"0,0,0,0"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.814000"},{"_id":"dl_layer_cropping3d.1","name":"dl_layer_cropping3d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Cropping3D层","category":"深度学习\\卷积层","arguments":"(cropping='1,1,1,1,1,1', data_format='channels_last', name=None, inputs=None)","doc":"\n    对3D输入（图像）进行裁剪 (e.g. spatial or spatio-temporal).\n    ","desc":"\n    对3D输入（图像）进行裁剪 (e.g. spatial or spatio-temporal).\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"cropping，长为6的列表，2个一组，分别为三个方向上头部与尾部需要裁剪掉的元素数。列表用英文逗号(,)分隔的整数列表，例如 10 或者 32,24","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"cropping","default":"1,1,1,1,1,1"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.815000"},{"_id":"dl_layer_cudnngru.1","name":"dl_layer_cudnngru","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"CuDNNGRU层","category":"深度学习\\循环层","arguments":"(units=, activation='tanh', user_activation=None, kernel_initializer='glorot_uniform', user_kernel_initializer=None, recurrent_initializer='orthogonal', user_recurrent_initializer=None, bias_initializer='zeros', user_bias_initializer=None, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, recurrent_regularizer='None', recurrent_regularizer_l1=0, recurrent_regularizer_l2=0, user_recurrent_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, recurrent_constraint='None', user_recurrent_constraint=None, bias_constraint='None', user_bias_constraint=None, return_sequences=False, return_state=False, stateful=False, implementation='2', name=None, inputs=None)","doc":"\n    基于CuDNN的快速GRU实现，只能在GPU上运行，只能使用tensoflow为后端\n    ","desc":"\n    基于CuDNN的快速GRU实现，只能在GPU上运行，只能使用tensoflow为后端\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"输出空间维度，units，正整数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"units"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"tanh"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"循环核初始化方法，recurrent_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"recurrent_initializer","default":"orthogonal"},{"type_name":"Script","desc":"自定义循环核初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"循环核正则项，recurrent_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_regularizer","default":"None"},{"type_name":"Float","desc":"循环核正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l1","default":0},{"type_name":"Float","desc":"循环核正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义循环核正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"循环核约束项，recurrent_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_constraint","default":"None"},{"type_name":"Script","desc":"自定义循环核约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"Boolean","desc":"return_sequences，默认False，控制返回类型。若为True则返回整个序列，否则仅返回输出序列的最后一个输出","specific_type_name":null,"type_code":"bool","name":"return_sequences","default":false},{"type_name":"Boolean","desc":"return_state，是否在输出中返回最后状态","specific_type_name":null,"type_code":"bool","name":"return_state","default":false},{"type_name":"Boolean","desc":"stateful，默认为False，若为True，则一个batch中下标为i的样本的最终状态将会用作下一个batch同样下标的样本的初始状态","specific_type_name":null,"type_code":"bool","name":"stateful","default":false},{"type_name":"Enumerated","desc":"implementation, 1或2，如果设为1，则RNN将以更多但更小的矩阵乘法实现，因此在CPU上运行更慢，在GPU上运行更快，并且消耗更少的内存。如果设为2，则RNN将以更少但是更大的矩阵乘法实现，因此在CPU上运行更快，但消耗更多的内存。","specific_type_name":null,"values":["1","2"],"multi":false,"type_code":"choice","name":"implementation","default":"2"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.816000"},{"_id":"dl_layer_cudnnlstm.1","name":"dl_layer_cudnnlstm","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"CuDNNLSTM层","category":"深度学习\\循环层","arguments":"(units=, activation='tanh', user_activation=None, kernel_initializer='glorot_uniform', user_kernel_initializer=None, recurrent_initializer='orthogonal', user_recurrent_initializer=None, bias_initializer='zeros', user_bias_initializer=None, unit_forget_bias=True, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, recurrent_regularizer='None', recurrent_regularizer_l1=0, recurrent_regularizer_l2=0, user_recurrent_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, recurrent_constraint='None', user_recurrent_constraint=None, bias_constraint='None', user_bias_constraint=None, return_sequences=False, return_state=False, stateful=False, implementation='2', name=None, inputs=None)","doc":"\n    Fast LSTM implementation backed by CuDNN.\n    ","desc":"\n    Fast LSTM implementation backed by CuDNN.\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"输出空间维度，units，正整数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"units"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"tanh"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"循环核初始化方法，recurrent_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"recurrent_initializer","default":"orthogonal"},{"type_name":"Script","desc":"自定义循环核初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Boolean","desc":"unit_forget_bias，如果为, 初始化时在遗忘门的偏置项加1。设置为True，会强制使bias_initializer=\"Zeros\"","specific_type_name":null,"type_code":"bool","name":"unit_forget_bias","default":true},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"循环核正则项，recurrent_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_regularizer","default":"None"},{"type_name":"Float","desc":"循环核正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l1","default":0},{"type_name":"Float","desc":"循环核正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义循环核正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"循环核约束项，recurrent_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_constraint","default":"None"},{"type_name":"Script","desc":"自定义循环核约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"Boolean","desc":"return_sequences，默认False，控制返回类型。若为True则返回整个序列，否则仅返回输出序列的最后一个输出","specific_type_name":null,"type_code":"bool","name":"return_sequences","default":false},{"type_name":"Boolean","desc":"return_state，是否在输出中返回最后状态","specific_type_name":null,"type_code":"bool","name":"return_state","default":false},{"type_name":"Boolean","desc":"stateful，默认为False，若为True，则一个batch中下标为i的样本的最终状态将会用作下一个batch同样下标的样本的初始状态","specific_type_name":null,"type_code":"bool","name":"stateful","default":false},{"type_name":"Enumerated","desc":"implementation, 1或2，如果设为1，则RNN将以更多但更小的矩阵乘法实现，因此在CPU上运行更慢，在GPU上运行更快，并且消耗更少的内存。如果设为2，则RNN将以更少但是更大的矩阵乘法实现，因此在CPU上运行更快，但消耗更多的内存。","specific_type_name":null,"values":["1","2"],"multi":false,"type_code":"choice","name":"implementation","default":"2"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.818000"},{"_id":"dl_layer_dense.1","name":"dl_layer_dense","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"全连接层(Dense)","category":"深度学习\\常用层","arguments":"(units=, activation='tanh', user_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, bias_initializer='Zeros', user_bias_initializer=None, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, bias_constraint='None', user_bias_constraint=None, name=None, inputs=None)","doc":"\n    Dense，全连接层，所实现的运算是output = activation(dot(input, kernel)+bias)。其中activation是逐元素计算的激活函数，kernel是本层的权值矩阵，bias为偏置向量，只有当use_bias=True才会添加。\n    ","desc":"\n    Dense，全连接层，所实现的运算是output = activation(dot(input, kernel)+bias)。其中activation是逐元素计算的激活函数，kernel是本层的权值矩阵，bias为偏置向量，只有当use_bias=True才会添加。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"输出空间维度，units，正整数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"units"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"tanh"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"Zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.820000"},{"_id":"dl_layer_dot.1","name":"dl_layer_dot","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Dot层","category":"深度学习\\融合层","arguments":"(input1=, input2=, axes=, normalize=False, name=None)","doc":"\n    点积层，属于融合层。计算两个tensor中样本的张量乘积。例如，如果两个张量a和b的shape都为（batch_size, n），则输出为形如（batch_size,1）的张量，结果张量每个batch的数据都是a[i,:]和b[i,:]的矩阵（向量）点积。\n    ","desc":"\n    点积层，属于融合层。计算两个tensor中样本的张量乘积。例如，如果两个张量a和b的shape都为（batch_size, n），则输出为形如（batch_size,1）的张量，结果张量每个batch的数据都是a[i,:]和b[i,:]的矩阵（向量）点积。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入1","specific_type_name":null,"name":"input1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入2","specific_type_name":null,"name":"input2","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"axes，执行乘法的轴，用英文逗号(,)分隔的整数列表，例如 32,24","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"axes"},{"type_name":"Boolean","desc":"normalize，是否沿执行成绩的轴做L2规范化，如果设为True，那么乘积的输出是两个样本的余弦相似性。","specific_type_name":null,"type_code":"bool","name":"normalize","default":false},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.821000"},{"_id":"dl_layer_dropout.1","name":"dl_layer_dropout","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Dropout层","category":"深度学习\\常用层","arguments":"(rate=, noise_shape=None, seed=None, name=None, inputs=None)","doc":"\n    为输入数据施加Dropout。Dropout将在训练过程中每次更新参数时按一定概率（rate）随机断开输入神经元，用于防止过拟合。\n    ","desc":"\n    为输入数据施加Dropout。Dropout将在训练过程中每次更新参数时按一定概率（rate）随机断开输入神经元，用于防止过拟合。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Float","desc":"rate，0~1的浮点数，控制需要断开的神经元的比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"rate"},{"type_name":"String","desc":"noise_shape，为将要应用在输入上的二值Dropout mask的shape，例如你的输入为(batch_size, timesteps, features)，并且你希望在各个时间步上的Dropout mask都相同，则可传入noise_shape=(batch_size, 1, features)","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"noise_shape","default":null},{"type_name":"Int","desc":"随机数种子","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"seed","default":null},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.822000"},{"_id":"dl_layer_elu.1","name":"dl_layer_elu","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"ELU层","category":"深度学习\\高级激活层","arguments":"(alpha=1.0, name=None, inputs=None)","doc":"\n    ELU层是指数线性单元（Exponential Linera Unit），表达式为： 该层为参数化的ReLU（Parametric ReLU），表达式是：f(x) = alpha * (exp(x) - 1.) for x < 0, f(x) = x for x>=0\n    ","desc":"\n    ELU层是指数线性单元（Exponential Linera Unit），表达式为： 该层为参数化的ReLU（Parametric ReLU），表达式是：f(x) = alpha * (exp(x) - 1.) for x < 0, f(x) = x for x>=0\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Float","desc":"alpha，scale for the negative factor，控制负因子的参数","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"alpha","default":1.0},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.823000"},{"_id":"dl_layer_embedding.1","name":"dl_layer_embedding","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Embedding层","category":"深度学习\\嵌入层","arguments":"(input_dim=, output_dim=, embeddings_initializer='uniform', user_embeddings_initializer=None, embeddings_regularizer='None', embeddings_regularizer_l1=0, embeddings_regularizer_l2=0, user_embeddings_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, embeddings_constraint='None', user_embeddings_constraint=None, mask_zero=False, input_length=None, name=None, inputs=None)","doc":"\n    嵌入层将正整数（下标）转换为具有固定大小的向量，如[[4],[20]]->[[0.25,0.1],[0.6,-0.2]]\nEmbedding层只能作为模型的第一层\n    ","desc":"\n    嵌入层将正整数（下标）转换为具有固定大小的向量，如[[4],[20]]->[[0.25,0.1],[0.6,-0.2]]\nEmbedding层只能作为模型的第一层\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"input_dim，字典长度，即输入数据最大下标+1","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"input_dim"},{"type_name":"Int","desc":"output_dim，全连接嵌入的维度","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"output_dim"},{"type_name":"Enumerated","desc":"嵌入矩阵初始化，embeddings_initializer，本选项里的函数使用的是默认参数，如果需要使用自定义参数或者其他函数，可以选择自定义，然后在下面输入自定义函数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"embeddings_initializer","default":"uniform"},{"type_name":"Script","desc":"自定义嵌入矩阵初始化，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_embeddings_initializer"},{"type_name":"Enumerated","desc":"嵌入矩阵正则项，embeddings_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"embeddings_regularizer","default":"None"},{"type_name":"Float","desc":"嵌入矩阵正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"embeddings_regularizer_l1","default":0},{"type_name":"Float","desc":"嵌入矩阵正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"embeddings_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义嵌入矩阵正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_embeddings_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"嵌入矩阵约束项，embeddings_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"embeddings_constraint","default":"None"},{"type_name":"Script","desc":"自定义嵌入矩阵约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_embeddings_constraint"},{"type_name":"Boolean","desc":"mask_zero，确定是否将输入中的‘0’看作是应该被忽略的‘填充’（padding）值，该参数在使用递归层处理变长输入时有用。设置为True的话，模型中后续的层必须都支持masking，否则会抛出异常。如果该值为True，则下标0在字典中不可用，input_dim应设置为|vocabulary| + 1","specific_type_name":null,"type_code":"bool","name":"mask_zero","default":false},{"type_name":"Int","desc":"input_length，当输入序列的长度固定时，该值为其长度。如果要在该层后接Flatten层，然后接Dense层，则必须指定该参数，否则Dense层的输出维度无法自动推断","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"input_length","default":null},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.824000"},{"_id":"dl_layer_flatten.1","name":"dl_layer_flatten","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Flatten层","category":"深度学习\\常用层","arguments":"(name=None, inputs=None)","doc":"\n    Flatten层用来将输入“压平”，即把多维的输入一维化，常用在从卷积层到全连接层的过渡。Flatten不影响batch的大小。\n    ","desc":"\n    Flatten层用来将输入“压平”，即把多维的输入一维化，常用在从卷积层到全连接层的过渡。Flatten不影响batch的大小。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.825000"},{"_id":"dl_layer_gaussiandropout.1","name":"dl_layer_gaussiandropout","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"GaussianDropout层","category":"深度学习\\噪声层","arguments":"(rate=, name=None, inputs=None)","doc":"\n    为层的输入施加以1为均值，标准差为sqrt(rate/(1-rate)的乘性高斯噪声\n因为这是一个起正则化作用的层，该层只在训练时才有效。\n    ","desc":"\n    为层的输入施加以1为均值，标准差为sqrt(rate/(1-rate)的乘性高斯噪声\n因为这是一个起正则化作用的层，该层只在训练时才有效。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Float","desc":"rate，drop probability (as with Dropout ). The multiplicative noise will have standard deviation sqrt(rate / (1 - rate)). 断连概率，与Dropout层相同","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"rate"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.826000"},{"_id":"dl_layer_gaussiannoise.1","name":"dl_layer_gaussiannoise","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"GaussianNoise层","category":"深度学习\\噪声层","arguments":"(stddev=, name=None, inputs=None)","doc":"\n    为数据施加0均值，标准差为stddev的加性高斯噪声。该层在克服过拟合时比较有用，你可以将它看作是随机的数据提升。高斯噪声是需要对输入数据进行破坏时的自然选择。因为这是一个起正则化作用的层，该层只在训练时才有效。\n    ","desc":"\n    为数据施加0均值，标准差为stddev的加性高斯噪声。该层在克服过拟合时比较有用，你可以将它看作是随机的数据提升。高斯噪声是需要对输入数据进行破坏时的自然选择。因为这是一个起正则化作用的层，该层只在训练时才有效。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Float","desc":"stddev，代表要产生的高斯噪声标准差","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"stddev"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.827000"},{"_id":"dl_layer_globalaveragepooling1d.1","name":"dl_layer_globalaveragepooling1d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"GlobalAveragePooling1D层","category":"深度学习\\池化层","arguments":"(name=None, inputs=None)","doc":"\n    为时域信号施加全局平均值池化\n    ","desc":"\n    为时域信号施加全局平均值池化\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.828000"},{"_id":"dl_layer_globalaveragepooling2d.1","name":"dl_layer_globalaveragepooling2d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"GlobalAveragePooling2D层","category":"深度学习\\池化层","arguments":"(data_format='channels_last', name=None, inputs=None)","doc":"\n    为空域信号施加全局最大值池化\n    ","desc":"\n    为空域信号施加全局最大值池化\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.829000"},{"_id":"dl_layer_globalmaxpooling1d.1","name":"dl_layer_globalmaxpooling1d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"GlobalMaxPooling1D层","category":"深度学习\\池化层","arguments":"(name=None, inputs=None)","doc":"\n    对于时间信号的全局最大池化\n    ","desc":"\n    对于时间信号的全局最大池化\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.830000"},{"_id":"dl_layer_globalmaxpooling2d.1","name":"dl_layer_globalmaxpooling2d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"GlobalMaxPooling2D层","category":"深度学习\\池化层","arguments":"(data_format='channels_last', name=None, inputs=None)","doc":"\n    为空域信号施加全局最大值池化\n    ","desc":"\n    为空域信号施加全局最大值池化\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.831000"},{"_id":"dl_layer_gru.1","name":"dl_layer_gru","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"GRU层","category":"深度学习\\循环层","arguments":"(units=, activation='tanh', user_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, recurrent_initializer='orthogonal', user_recurrent_initializer=None, bias_initializer='zeros', user_bias_initializer=None, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, recurrent_regularizer='None', recurrent_regularizer_l1=0, recurrent_regularizer_l2=0, user_recurrent_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, recurrent_constraint='None', user_recurrent_constraint=None, bias_constraint='None', user_bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, implementation='2', return_sequences=False, go_backwards=False, stateful=False, unroll=False, name=None, inputs=None)","doc":"\n    门限循环单元。GRU（Gate Recurrent Unit）是循环神经网络（RNN）的一种。和LSTM一样，也是为了解决长期记忆和反向传播中的梯度等问题而提出来的，但是计算效率更高。\n[参考文献](https://keras-cn.readthedocs.io/en/latest/layers/recurrent_layer/#gru)\n    - [On the Properties of Neural Machine Translation: Encoder–Decoder Approaches](http://www.aclweb.org/anthology/W14-4012)\n    - [Empirical Evaluation of Gated Recurrent Neural Networks on Sequence Modeling](http://arxiv.org/pdf/1412.3555v1.pdf)\n    - [A Theoretically Grounded Application of Dropout in Recurrent Neural Networks](http://arxiv.org/abs/1512.05287)\n    ","desc":"\n    门限循环单元。GRU（Gate Recurrent Unit）是循环神经网络（RNN）的一种。和LSTM一样，也是为了解决长期记忆和反向传播中的梯度等问题而提出来的，但是计算效率更高。\n[参考文献](https://keras-cn.readthedocs.io/en/latest/layers/recurrent_layer/#gru)\n    - [On the Properties of Neural Machine Translation: Encoder–Decoder Approaches](http://www.aclweb.org/anthology/W14-4012)\n    - [Empirical Evaluation of Gated Recurrent Neural Networks on Sequence Modeling](http://arxiv.org/pdf/1412.3555v1.pdf)\n    - [A Theoretically Grounded Application of Dropout in Recurrent Neural Networks](http://arxiv.org/abs/1512.05287)\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"输出空间维度，units，正整数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"units"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"tanh"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"循环核初始化方法，recurrent_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"recurrent_initializer","default":"orthogonal"},{"type_name":"Script","desc":"自定义循环核初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"循环核正则项，recurrent_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_regularizer","default":"None"},{"type_name":"Float","desc":"循环核正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l1","default":0},{"type_name":"Float","desc":"循环核正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义循环核正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"循环核约束项，recurrent_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_constraint","default":"None"},{"type_name":"Script","desc":"自定义循环核约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"Float","desc":"dropout，0~1之间的浮点数，控制输入线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"dropout","default":0.0},{"type_name":"Float","desc":"recurrent_dropout，0~1之间的浮点数，控制循环状态的线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"recurrent_dropout","default":0.0},{"type_name":"Enumerated","desc":"implementation, 1或2，如果设为1，则RNN将以更多但更小的矩阵乘法实现，因此在CPU上运行更慢，在GPU上运行更快，并且消耗更少的内存。如果设为2，则RNN将以更少但是更大的矩阵乘法实现，因此在CPU上运行更快，但消耗更多的内存。","specific_type_name":null,"values":["1","2"],"multi":false,"type_code":"choice","name":"implementation","default":"2"},{"type_name":"Boolean","desc":"return_sequences，默认False，控制返回类型。若为True则返回整个序列，否则仅返回输出序列的最后一个输出","specific_type_name":null,"type_code":"bool","name":"return_sequences","default":false},{"type_name":"Boolean","desc":"go_backwards，默认为False，若为True，则逆向处理输入序列并返回逆序后的序列","specific_type_name":null,"type_code":"bool","name":"go_backwards","default":false},{"type_name":"Boolean","desc":"stateful，默认为False，若为True，则一个batch中下标为i的样本的最终状态将会用作下一个batch同样下标的样本的初始状态","specific_type_name":null,"type_code":"bool","name":"stateful","default":false},{"type_name":"Boolean","desc":"unroll，若为True，则循环层将被展开，否则就使用符号化的循环。当使用TensorFlow为后端时，循环网络本来就是展开的，因此该层不做任何事情。层展开会占用更多的内存，但会加速RNN的运算。层展开只适用于短序列。","specific_type_name":null,"type_code":"bool","name":"unroll","default":false},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.832000"},{"_id":"dl_layer_grucell.1","name":"dl_layer_grucell","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"GRUCell层","category":"深度学习\\循环层","arguments":"(units=, activation='tanh', user_activation=None, recurrent_activation='hard_sigmoid', user_recurrent_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, recurrent_initializer='orthogonal', user_recurrent_initializer=None, bias_initializer='zeros', user_bias_initializer=None, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, recurrent_regularizer='None', recurrent_regularizer_l1=0, recurrent_regularizer_l2=0, user_recurrent_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, recurrent_constraint='None', user_recurrent_constraint=None, bias_constraint='None', user_bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, implementation='2', name=None, inputs=None)","doc":"\n    GRU的Cell类\n    ","desc":"\n    GRU的Cell类\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"输出空间维度，units，正整数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"units"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"tanh"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Enumerated","desc":"recurrent激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用recurrent自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_activation","default":"hard_sigmoid"},{"type_name":"Script","desc":"recurrent自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"循环核初始化方法，recurrent_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"recurrent_initializer","default":"orthogonal"},{"type_name":"Script","desc":"自定义循环核初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"循环核正则项，recurrent_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_regularizer","default":"None"},{"type_name":"Float","desc":"循环核正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l1","default":0},{"type_name":"Float","desc":"循环核正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义循环核正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"循环核约束项，recurrent_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_constraint","default":"None"},{"type_name":"Script","desc":"自定义循环核约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"Float","desc":"dropout，0~1之间的浮点数，控制输入线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"dropout","default":0.0},{"type_name":"Float","desc":"recurrent_dropout，0~1之间的浮点数，控制循环状态的线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"recurrent_dropout","default":0.0},{"type_name":"Enumerated","desc":"implementation, 1或2，如果设为1，则RNN将以更多但更小的矩阵乘法实现，因此在CPU上运行更慢，在GPU上运行更快，并且消耗更少的内存。如果设为2，则RNN将以更少但是更大的矩阵乘法实现，因此在CPU上运行更快，但消耗更多的内存。","specific_type_name":null,"values":["1","2"],"multi":false,"type_code":"choice","name":"implementation","default":"2"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.834000"},{"_id":"dl_layer_input.1","name":"dl_layer_input","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"输入层(Input)","category":"深度学习\\常用层","arguments":"(shape=None, batch_shape=None, dtype='float32', sparse=False, name=None, inputs=None)","doc":"\n    张量输入层\n    ","desc":"\n    张量输入层\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"shape, 输入张量形状，用英文逗号(,)分隔的整数列表，例如 32,24，表示输入数据是一系列的 32x24的矩阵","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"shape","default":null},{"type_name":"String","desc":"batch_shape, A shape tuple (integer), including the batch size. For instance, `batch_shape=10,32` indicates that the expected input will be batches of 10 32-dimensional vectors. `batch_shape=None,32` indicates batches of an arbitrary number of 32-dimensional vectors.","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"batch_shape","default":null},{"type_name":"String","desc":"数据类型, The data type expected by the input, as a string (`float32`, `float64`, `int32`...)","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"dtype","default":"float32"},{"type_name":"Boolean","desc":"sparse, A boolean specifying whether the placeholder to be created is sparse.","specific_type_name":null,"type_code":"bool","name":"sparse","default":false},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":true,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.836000"},{"_id":"dl_layer_lambda.1","name":"dl_layer_lambda","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Lambda层","category":"深度学习\\常用层","arguments":"(function=, name=None, inputs=None)","doc":"\n    Lambda层，实现将任意函数/表达式封装为Layer/层。\n    ","desc":"\n    Lambda层，实现将任意函数/表达式封装为Layer/层。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Script","desc":"函数，求值函数，以输入张量作为参数","specific_type_name":null,"language":"script.py","default":"def bigquant_run(x):\n    # x为输入，即上一层的输出\n    # 在这里添加您的代码\n    return x + 1\n","auto_complete_type":null,"type_code":"code","name":"function"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.837000"},{"_id":"dl_layer_layernormalization.1","name":"dl_layer_layernormalization","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"LayerNormalization层","category":"深度学习\\规范层","arguments":"(name=None, inputs=None)","doc":"\n    LayerNormalization是对输出归一化的，消除各层的covariate shift，加快收敛速度。\n\n    ","desc":"\n    LayerNormalization是对输出归一化的，消除各层的covariate shift，加快收敛速度。\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.838000"},{"_id":"dl_layer_leakyrelu.1","name":"dl_layer_leakyrelu","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"LeakyReLU层","category":"深度学习\\高级激活层","arguments":"(alpha=0.3, name=None, inputs=None)","doc":"\n    LeakyRelU是修正线性单元（Rectified Linear Unit，ReLU）的特殊版本，当不激活时，LeakyReLU仍然会有非零输出值，从而获得一个小梯度，避免ReLU可能出现的神经元“死亡”现象。即，f(x)=alpha * x for x < 0, f(x) = x for x>=0\n    ","desc":"\n    LeakyRelU是修正线性单元（Rectified Linear Unit，ReLU）的特殊版本，当不激活时，LeakyReLU仍然会有非零输出值，从而获得一个小梯度，避免ReLU可能出现的神经元“死亡”现象。即，f(x)=alpha * x for x < 0, f(x) = x for x>=0\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Float","desc":"alpha，Negative slope coefficient，代表激活函数图像中第三象限线段的斜率","specific_type_name":null,"min":0,"max":1.7976931348623157e+308,"type_code":"float","name":"alpha","default":0.3},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.839000"},{"_id":"dl_layer_locallyconnected1d.1","name":"dl_layer_locallyconnected1d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"LocallyConnected1D层","category":"深度学习\\局部连接层","arguments":"(filters=, kernel_size=, strides='1', padding='valid', data_format='channels_last', activation='None', user_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, bias_initializer='zeros', user_bias_initializer=None, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, bias_constraint='None', user_bias_constraint=None, name=None, inputs=None)","doc":"\n    LocallyConnected1D层与Conv1D工作方式类似，唯一的区别是不进行权值共享。即施加在不同输入位置的滤波器是不一样的。\n    ","desc":"\n    LocallyConnected1D层与Conv1D工作方式类似，唯一的区别是不进行权值共享。即施加在不同输入位置的滤波器是不一样的。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"卷积核数目，filters，即输出的维度","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"filters"},{"type_name":"String","desc":"kernel_size，卷积核的空域或时域窗长度。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"kernel_size"},{"type_name":"String","desc":"步长，strides，卷积的步长。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strides","default":"1"},{"type_name":"Enumerated","desc":"padding，补0策略","specific_type_name":null,"values":["valid","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"None"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.840000"},{"_id":"dl_layer_locallyconnected2d.1","name":"dl_layer_locallyconnected2d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"LocallyConnected2D层","category":"深度学习\\局部连接层","arguments":"(filters=, kernel_size=, strides='1,1', padding='valid', data_format='channels_last', activation='None', user_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, bias_initializer='zeros', user_bias_initializer=None, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, bias_constraint='None', user_bias_constraint=None, name=None, inputs=None)","doc":"\n    LocallyConnected2D层与Convolution2D工作方式类似，唯一的区别是不进行权值共享。即施加在不同输入patch的滤波器是不一样的，当使用该层作为模型首层时，需要提供参数input_dim或input_shape参数。参数含义参考Convolution2D。\n    ","desc":"\n    LocallyConnected2D层与Convolution2D工作方式类似，唯一的区别是不进行权值共享。即施加在不同输入patch的滤波器是不一样的，当使用该层作为模型首层时，需要提供参数input_dim或input_shape参数。参数含义参考Convolution2D。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"卷积核数目，filters，即输出的维度","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"filters"},{"type_name":"String","desc":"kernel_size，卷积核的空域或时域窗长度。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"kernel_size"},{"type_name":"String","desc":"步长，strides，卷积的步长。长为 2 的整数列表，列表用英文逗号(,)分隔，例如 2,2","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strides","default":"1,1"},{"type_name":"Enumerated","desc":"padding，补0策略，为“valid”, “same” 。“valid”代表只进行有效的卷积，即对边界数据不处理。“same”代表保留边界处的卷积结果，通常会导致输出shape与输入shape相同。","specific_type_name":null,"values":["valid","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"None"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.841000"},{"_id":"dl_layer_lstm.1","name":"dl_layer_lstm","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"LSTM层","category":"深度学习\\循环层","arguments":"(units=, activation='tanh', user_activation=None, recurrent_activation='hard_sigmoid', user_recurrent_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, recurrent_initializer='Orthogonal', user_recurrent_initializer=None, bias_initializer='Zeros', user_bias_initializer=None, unit_forget_bias=True, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, recurrent_regularizer='None', recurrent_regularizer_l1=0, recurrent_regularizer_l2=0, user_recurrent_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, recurrent_constraint='None', user_recurrent_constraint=None, bias_constraint='None', user_bias_constraint=None, dropout=0, recurrent_dropout=0, return_sequences=False, implementation='2', name=None, inputs=None)","doc":"\n    LSTM层，长短期记忆模型，RNN的一种，可以解决梯度爆炸的问题。关于此算法的详情，请参考 [教程](http://deeplearning.net/tutorial/lstm.html)\n    - [Long short-term memory](http://deeplearning.cs.cmu.edu/pdfs/Hochreiter97_lstm.pdf) (original 1997 paper)\n    - [Learning to forget: Continual prediction with LSTM](http://www.mitpressjournals.org/doi/pdf/10.1162/089976600300015015)\n    - [Supervised sequence labeling with recurrent neural networks](http://www.cs.toronto.edu/~graves/preprint.pdf)\n    - [A Theoretically Grounded Application of Dropout in Recurrent Neural Networks](http://arxiv.org/abs/1512.05287)\n    ","desc":"\n    LSTM层，长短期记忆模型，RNN的一种，可以解决梯度爆炸的问题。关于此算法的详情，请参考 [教程](http://deeplearning.net/tutorial/lstm.html)\n    - [Long short-term memory](http://deeplearning.cs.cmu.edu/pdfs/Hochreiter97_lstm.pdf) (original 1997 paper)\n    - [Learning to forget: Continual prediction with LSTM](http://www.mitpressjournals.org/doi/pdf/10.1162/089976600300015015)\n    - [Supervised sequence labeling with recurrent neural networks](http://www.cs.toronto.edu/~graves/preprint.pdf)\n    - [A Theoretically Grounded Application of Dropout in Recurrent Neural Networks](http://arxiv.org/abs/1512.05287)\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"输出空间维度，units，正整数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"units"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"tanh"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Enumerated","desc":"recurrent激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用recurrent自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_activation","default":"hard_sigmoid"},{"type_name":"Script","desc":"recurrent自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_activation"},{"type_name":"Boolean","desc":"是否使用偏置项，use_bias","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"循环核初始化方法，recurrent_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"recurrent_initializer","default":"Orthogonal"},{"type_name":"Script","desc":"自定义循环核初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"Zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Boolean","desc":"unit_forget_bias，Boolean. If True, add 1 to the bias of the forget gate at initialization. Setting it to true will also force  bias_initializer=\"Zeros\". This is recommended in Jozefowicz et al.","specific_type_name":null,"type_code":"bool","name":"unit_forget_bias","default":true},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"循环核正则项，recurrent_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_regularizer","default":"None"},{"type_name":"Float","desc":"循环核正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l1","default":0},{"type_name":"Float","desc":"循环核正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义循环核正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"循环核约束项，recurrent_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_constraint","default":"None"},{"type_name":"Script","desc":"自定义循环核约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"Float","desc":"dropout，0~1之间的浮点数，控制输入线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"dropout","default":0},{"type_name":"Float","desc":"recurrent_dropout，0~1之间的浮点数，控制循环状态的线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"recurrent_dropout","default":0},{"type_name":"Boolean","desc":"返回整个输出序列，若为True则返回整个序列，否则仅返回输出序列的最后一个输出","specific_type_name":null,"type_code":"bool","name":"return_sequences","default":false},{"type_name":"Enumerated","desc":"implementation, 1或2，如果设为1，则RNN将以更多但更小的矩阵乘法实现，因此在CPU上运行更慢，在GPU上运行更快，并且消耗更少的内存。如果设为2，则RNN将以更少但是更大的矩阵乘法实现，因此在CPU上运行更快，但消耗更多的内存。","specific_type_name":null,"values":["1","2"],"multi":false,"type_code":"choice","name":"implementation","default":"2"},{"type_name":"String","desc":"层名，名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.843000"},{"_id":"dl_layer_lstmcell.1","name":"dl_layer_lstmcell","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"LSTMCell层","category":"深度学习\\循环层","arguments":"(units=, activation='tanh', user_activation=None, recurrent_activation='hard_sigmoid', user_recurrent_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, recurrent_initializer='orthogonal', user_recurrent_initializer=None, bias_initializer='zeros', user_bias_initializer=None, unit_forget_bias=True, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, recurrent_regularizer='None', recurrent_regularizer_l1=0, recurrent_regularizer_l2=0, user_recurrent_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, recurrent_constraint='None', user_recurrent_constraint=None, bias_constraint='None', user_bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, implementation='2', name=None, inputs=None)","doc":"\n    LSTM的Cell类\n    ","desc":"\n    LSTM的Cell类\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"输出空间维度，units，正整数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"units"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"tanh"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Enumerated","desc":"recurrent激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用recurrent自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_activation","default":"hard_sigmoid"},{"type_name":"Script","desc":"recurrent自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"循环核初始化方法，recurrent_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"recurrent_initializer","default":"orthogonal"},{"type_name":"Script","desc":"自定义循环核初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Boolean","desc":"unit_forget_bias，如果为, 初始化时在遗忘门的偏置项加1。设置为True，会强制使bias_initializer=\"Zeros\"","specific_type_name":null,"type_code":"bool","name":"unit_forget_bias","default":true},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"循环核正则项，recurrent_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_regularizer","default":"None"},{"type_name":"Float","desc":"循环核正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l1","default":0},{"type_name":"Float","desc":"循环核正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义循环核正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"循环核约束项，recurrent_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_constraint","default":"None"},{"type_name":"Script","desc":"自定义循环核约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"Float","desc":"dropout，0~1之间的浮点数，控制输入线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"dropout","default":0.0},{"type_name":"Float","desc":"recurrent_dropout，0~1之间的浮点数，控制循环状态的线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"recurrent_dropout","default":0.0},{"type_name":"Enumerated","desc":"implementation, 1或2，如果设为1，则RNN将以更多但更小的矩阵乘法实现，因此在CPU上运行更慢，在GPU上运行更快，并且消耗更少的内存。如果设为2，则RNN将以更少但是更大的矩阵乘法实现，因此在CPU上运行更快，但消耗更多的内存。","specific_type_name":null,"values":["1","2"],"multi":false,"type_code":"choice","name":"implementation","default":"2"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.844000"},{"_id":"dl_layer_masking.1","name":"dl_layer_masking","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Masking层","category":"深度学习\\常用层","arguments":"(mask_value=0.0, name=None, inputs=None)","doc":"\n    屏蔽层。使用给定的值对输入的序列信号进行“屏蔽”，用以定位需要跳过的时间步。对于输入张量的时间步，即输入张量的第1维度（维度从0开始算，见例子），如果输入张量在该时间步上都等于mask_value，则该时间步将在模型接下来的所有层（只要支持masking）被跳过（屏蔽）。如果模型接下来的一些层不支持masking，却接受到masking过的数据，则抛出异常。\n    ","desc":"\n    屏蔽层。使用给定的值对输入的序列信号进行“屏蔽”，用以定位需要跳过的时间步。对于输入张量的时间步，即输入张量的第1维度（维度从0开始算，见例子），如果输入张量在该时间步上都等于mask_value，则该时间步将在模型接下来的所有层（只要支持masking）被跳过（屏蔽）。如果模型接下来的一些层不支持masking，却接受到masking过的数据，则抛出异常。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Float","desc":"mask_value","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"mask_value","default":0.0},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.846000"},{"_id":"dl_layer_maximum.1","name":"dl_layer_maximum","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Maximum层","category":"深度学习\\融合层","arguments":"(input1=, input2=, input3=None, name=None)","doc":"\n    该层接收一个列表的同shape张量，并返回它们的逐元素最大值，shape不变。\n    ","desc":"\n    该层接收一个列表的同shape张量，并返回它们的逐元素最大值，shape不变。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入1","specific_type_name":null,"name":"input1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入2","specific_type_name":null,"name":"input2","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入3","specific_type_name":null,"name":"input3","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.847000"},{"_id":"dl_layer_maxpooling1d.1","name":"dl_layer_maxpooling1d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"MaxPooling1D层","category":"深度学习\\池化层","arguments":"(pool_size=2, strides=None, padding='valid', name=None, inputs=None)","doc":"\n    对时域1D信号进行最大值池化。\n    ","desc":"\n    对时域1D信号进行最大值池化。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"窗口大小，pool_size，整数，池化","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"pool_size","default":2},{"type_name":"Int","desc":"下采样因子，strides，整数或None，例如设2将会使得输出shape为输入的一半，若为None则默认值为pool_size","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"strides","default":null},{"type_name":"Enumerated","desc":"padding","specific_type_name":null,"values":["valid","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.848000"},{"_id":"dl_layer_maxpooling2d.1","name":"dl_layer_maxpooling2d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"MaxPooling2D层","category":"深度学习\\池化层","arguments":"(pool_size='2,2', strides=None, padding='valid', data_format='channels_last', name=None, inputs=None)","doc":"\n    为空域信号施加最大值池化。\n    ","desc":"\n    为空域信号施加最大值池化。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"pool_size，代表在两个方向（竖直，水平）上的下采样因子，如取（2，2）将使图片在两个维度上均变为原长的一半。为整数意为各个维度值相同且为该数字。。长为 2 的整数列表，列表用英文逗号(,)分隔，例如 2,2","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"pool_size","default":"2,2"},{"type_name":"String","desc":"步长，strides，步长值，如果不设置，默认是pool_size。长为 2 的整数列表，列表用英文逗号(,)分隔，例如 2,2","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strides","default":null},{"type_name":"Enumerated","desc":"padding","specific_type_name":null,"values":["valid","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.849000"},{"_id":"dl_layer_maxpooling3d.1","name":"dl_layer_maxpooling3d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"MaxPooling3D层","category":"深度学习\\池化层","arguments":"(pool_size='2,2,2', strides=None, padding='valid', data_format='channels_last', name=None, inputs=None)","doc":"\n    为3D信号（空域或时空域）施加最大值池化。\n    ","desc":"\n    为3D信号（空域或时空域）施加最大值池化。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"pool_size，代表在三个维度上的下采样因子，如取（2，2，2）将使信号在每个维度都变为原来的一半长。。长为 3 的整数列表，列表用英文逗号(,)分隔，例如 2,2,2","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"pool_size","default":"2,2,2"},{"type_name":"String","desc":"步长，strides，步长值，如果不设置，默认是pool_size。长为 3 的整数列表，列表用英文逗号(,)分隔，例如 2,2,2","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strides","default":null},{"type_name":"Enumerated","desc":"padding","specific_type_name":null,"values":["valid","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.850000"},{"_id":"dl_layer_multiply.1","name":"dl_layer_multiply","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Multiply层","category":"深度学习\\融合层","arguments":"(input1=, input2=, input3=None, name=None)","doc":"\n    该层接收一个列表的同shape张量，并返回它们的逐元素积的张量，shape不变。\n    ","desc":"\n    该层接收一个列表的同shape张量，并返回它们的逐元素积的张量，shape不变。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入1","specific_type_name":null,"name":"input1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入2","specific_type_name":null,"name":"input2","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入3","specific_type_name":null,"name":"input3","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.851000"},{"_id":"dl_layer_permute.1","name":"dl_layer_permute","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Permute层","category":"深度学习\\常用层","arguments":"(dims=, name=None, inputs=None)","doc":"\n    Permute层将输入的维度按照给定模式进行重排，例如，当需要将RNN和CNN网络连接时，可能会用到该层。\n    ","desc":"\n    Permute层将输入的维度按照给定模式进行重排，例如，当需要将RNN和CNN网络连接时，可能会用到该层。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"dims, 指定重排的模式，不包含样本数的维度。重拍模式的下标从1开始。例如 2,1 代表将输入的第二个维度重拍到输出的第一个维度，而将输入的第一个维度重排到第二个维度，用英文逗号(,)分隔的整数列表，例如 32,24","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"dims"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.852000"},{"_id":"dl_layer_prelu.1","name":"dl_layer_prelu","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"PReLU层","category":"深度学习\\高级激活层","arguments":"(alpha_initializer='zeros', user_alpha_initializer=None, alpha_regularizer='None', alpha_regularizer_l1=0, alpha_regularizer_l2=0, user_alpha_regularizer=None, alpha_constraint='None', user_alpha_constraint=None, shared_axes=None, name=None, inputs=None)","doc":"\n    该层为参数化的ReLU（Parametric ReLU），表达式是：f(x) = alpha * x for x < 0, f(x) = x for x>=0，此处的alpha为一个与xshape相同的可学习的参数向量。\n    ","desc":"\n    该层为参数化的ReLU（Parametric ReLU），表达式是：f(x) = alpha * x for x < 0, f(x) = x for x>=0，此处的alpha为一个与xshape相同的可学习的参数向量。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Enumerated","desc":"alpha初始化，alpha_initializer，本选项里的函数使用的是默认参数，如果需要使用自定义参数或者其他函数，可以选择自定义，然后在下面输入自定义函数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"alpha_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义alpha初始化，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_alpha_initializer"},{"type_name":"Enumerated","desc":"alpha正则项，alpha_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"alpha_regularizer","default":"None"},{"type_name":"Float","desc":"alpha正则项 L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"alpha_regularizer_l1","default":0},{"type_name":"Float","desc":"alpha正则项 L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"alpha_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义alpha正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_alpha_regularizer"},{"type_name":"Enumerated","desc":"alpha约束项，alpha_constraint，在优化过程中为网络的参数施加约束。本选项里的函数使用的是默认参数，如果需要使用自定义参数或者其他函数，可以选择自定义，然后在下面输入自定义函数","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"alpha_constraint","default":"None"},{"type_name":"Script","desc":"自定义alpha约束项，示例：\ndef bigquant_run(w):\n    from tensorflow.keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_alpha_constraint"},{"type_name":"String","desc":"共享轴，shared_axes，该参数指定的轴将共享同一组科学系参数，例如假如输入特征图是从2D卷积过来的，具有形如(batch, height, width, channels)这样的shape，则或许你会希望在空域共享参数，这样每个filter就只有一组参数，设定shared_axes=[1,2]可完成该目标。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"shared_axes","default":null},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.854000"},{"_id":"dl_layer_repeatvector.1","name":"dl_layer_repeatvector","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"RepeatVector层","category":"深度学习\\常用层","arguments":"(n=, name=None, inputs=None)","doc":"\n    RepeatVector层将输入重复n次。\n    ","desc":"\n    RepeatVector层将输入重复n次。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"重复次数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"n"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.855000"},{"_id":"dl_layer_reshape.1","name":"dl_layer_reshape","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Reshape层","category":"深度学习\\常用层","arguments":"(target_shape=, name=None, inputs=None)","doc":"\n    任意，但输入的shape必须固定。当使用该层为模型首层时，需要指定input_shape参数\n    ","desc":"\n    任意，但输入的shape必须固定。当使用该层为模型首层时，需要指定input_shape参数\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"target_shape, 目标shape，不包含样本数目的维度（batch大小），用英文逗号(,)分隔的整数列表，例如 32,24，表示输入数据是一系列的 32x24的矩阵","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"target_shape"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.892000"},{"_id":"dl_layer_separableconv2d.1","name":"dl_layer_separableconv2d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"SeparableConv2D层","category":"深度学习\\卷积层","arguments":"(filters=, kernel_size=, strides='1,1', padding='valid', data_format='channels_last', depth_multiplier='1', activation='None', user_activation=None, use_bias=True, depthwise_initializer='glorot_uniform', user_depthwise_initializer=None, pointwise_initializer='glorot_uniform', user_pointwise_initializer=None, bias_initializer='zeros', user_bias_initializer=None, depthwise_regularizer='None', depthwise_regularizer_l1=0, depthwise_regularizer_l2=0, user_depthwise_regularizer=None, pointwise_regularizer='None', pointwise_regularizer_l1=0, pointwise_regularizer_l2=0, user_pointwise_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, depthwise_constraint='None', user_depthwise_constraint=None, pointwise_constraint='None', user_pointwise_constraint=None, bias_constraint='None', user_bias_constraint=None, name=None, inputs=None)","doc":"\n    该层是在深度方向上的可分离卷积。可分离卷积首先按深度方向进行卷积（对每个输入通道分别卷积），然后逐点进行卷积，将上一步的卷积结果混合到输出通道中。参数depth_multiplier控制了在depthwise卷积（第一步）的过程中，每个输入通道信号产生多少个输出通道。直观来说，可分离卷积可以看做讲一个卷积核分解为两个小的卷积核，或看作Inception模块的一种极端情况。当使用该层作为第一层时，应提供input_shape参数。例如input_shape = (3,128,128)代表128*128的彩色RGB图像。\n    ","desc":"\n    该层是在深度方向上的可分离卷积。可分离卷积首先按深度方向进行卷积（对每个输入通道分别卷积），然后逐点进行卷积，将上一步的卷积结果混合到输出通道中。参数depth_multiplier控制了在depthwise卷积（第一步）的过程中，每个输入通道信号产生多少个输出通道。直观来说，可分离卷积可以看做讲一个卷积核分解为两个小的卷积核，或看作Inception模块的一种极端情况。当使用该层作为第一层时，应提供input_shape参数。例如input_shape = (3,128,128)代表128*128的彩色RGB图像。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"卷积核数目，filters，即输出的维度","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"filters"},{"type_name":"String","desc":"kernel_size，卷积核的空域或时域窗长度。整数列表，列表用英文逗号(,)分隔，例如 12,34","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"kernel_size"},{"type_name":"String","desc":"卷积的步长，strides，如为单个整数，则表示在各个空间维度的相同步长。任何不为1的strides均与任何不为1的dilation_rate均不兼容。用英文逗号(,)分隔的整数列表","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strides","default":"1,1"},{"type_name":"Enumerated","desc":"padding，补0策略，为“valid”, “same” 。“valid”代表只进行有效的卷积，即对边界数据不处理。“same”代表保留边界处的卷积结果，通常会导致输出shape与输入shape相同。","specific_type_name":null,"values":["valid","same"],"multi":false,"type_code":"choice","name":"padding","default":"valid"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"depth_multiplier，The number of depthwise convolution output channels for each input channel. The total number of depthwise convolution output channels will be equal to filterss_in * depth_multiplier .","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"depth_multiplier","default":"1"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"None"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"depthwise_initializer，Initializer for the depthwise kernel matrix，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"depthwise_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义depthwise_initializer，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_depthwise_initializer"},{"type_name":"Enumerated","desc":"pointwise_initializer，Initializer for the pointwise kernel matrix，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"pointwise_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义pointwise_initializer，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_pointwise_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Enumerated","desc":"depthwise_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"depthwise_regularizer","default":"None"},{"type_name":"Float","desc":"depthwise_regularizer L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"depthwise_regularizer_l1","default":0},{"type_name":"Float","desc":"depthwise_regularizer L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"depthwise_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义depthwise_regularizer，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_depthwise_regularizer"},{"type_name":"Enumerated","desc":"pointwise_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"pointwise_regularizer","default":"None"},{"type_name":"Float","desc":"pointwise_regularizer L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"pointwise_regularizer_l1","default":0},{"type_name":"Float","desc":"pointwise_regularizer L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"pointwise_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义pointwise_regularizer，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_pointwise_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"depthwise_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"depthwise_constraint","default":"None"},{"type_name":"Script","desc":"自定义depthwise_constraint，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_depthwise_constraint"},{"type_name":"Enumerated","desc":"pointwise_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"pointwise_constraint","default":"None"},{"type_name":"Script","desc":"自定义pointwise_constraint，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_pointwise_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.894000"},{"_id":"dl_layer_simplernn.1","name":"dl_layer_simplernn","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"SimpleRNN层","category":"深度学习\\循环层","arguments":"(units=, activation='tanh', user_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, recurrent_initializer='orthogonal', user_recurrent_initializer=None, bias_initializer='zeros', user_bias_initializer=None, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, recurrent_regularizer='None', recurrent_regularizer_l1=0, recurrent_regularizer_l2=0, user_recurrent_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, recurrent_constraint='None', user_recurrent_constraint=None, bias_constraint='None', user_bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, return_sequences=False, return_state=False, go_backwards=False, stateful=False, unroll=False, implementation='2', name=None, inputs=None)","doc":"\n    全连接RNN网络，RNN的输出会被回馈到输入。\n    ","desc":"\n    全连接RNN网络，RNN的输出会被回馈到输入。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"输出空间维度，units，正整数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"units"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"tanh"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"循环核初始化方法，recurrent_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"recurrent_initializer","default":"orthogonal"},{"type_name":"Script","desc":"自定义循环核初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"循环核正则项，recurrent_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_regularizer","default":"None"},{"type_name":"Float","desc":"循环核正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l1","default":0},{"type_name":"Float","desc":"循环核正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义循环核正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"循环核约束项，recurrent_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_constraint","default":"None"},{"type_name":"Script","desc":"自定义循环核约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"Float","desc":"dropout，0~1之间的浮点数，控制输入线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"dropout","default":0.0},{"type_name":"Float","desc":"recurrent_dropout，0~1之间的浮点数，控制循环状态的线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"recurrent_dropout","default":0.0},{"type_name":"Boolean","desc":"return_sequences，默认False，控制返回类型。若为True则返回整个序列，否则仅返回输出序列的最后一个输出","specific_type_name":null,"type_code":"bool","name":"return_sequences","default":false},{"type_name":"Boolean","desc":"return_state，是否在输出中返回最后状态","specific_type_name":null,"type_code":"bool","name":"return_state","default":false},{"type_name":"Boolean","desc":"go_backwards，默认为False，若为True，则逆向处理输入序列并返回逆序后的序列","specific_type_name":null,"type_code":"bool","name":"go_backwards","default":false},{"type_name":"Boolean","desc":"stateful，默认为False，若为True，则一个batch中下标为i的样本的最终状态将会用作下一个batch同样下标的样本的初始状态","specific_type_name":null,"type_code":"bool","name":"stateful","default":false},{"type_name":"Boolean","desc":"unroll，若为True，则循环层将被展开，否则就使用符号化的循环。当使用TensorFlow为后端时，循环网络本来就是展开的，因此该层不做任何事情。层展开会占用更多的内存，但会加速RNN的运算。层展开只适用于短序列。","specific_type_name":null,"type_code":"bool","name":"unroll","default":false},{"type_name":"Enumerated","desc":"implementation, 1或2，如果设为1，则RNN将以更多但更小的矩阵乘法实现，因此在CPU上运行更慢，在GPU上运行更快，并且消耗更少的内存。如果设为2，则RNN将以更少但是更大的矩阵乘法实现，因此在CPU上运行更快，但消耗更多的内存。","specific_type_name":null,"values":["1","2"],"multi":false,"type_code":"choice","name":"implementation","default":"2"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.895000"},{"_id":"dl_layer_simplernncell.1","name":"dl_layer_simplernncell","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"SimpleRNNCell层","category":"深度学习\\循环层","arguments":"(units=, activation='tanh', user_activation=None, use_bias=True, kernel_initializer='glorot_uniform', user_kernel_initializer=None, recurrent_initializer='orthogonal', user_recurrent_initializer=None, bias_initializer='zeros', user_bias_initializer=None, kernel_regularizer='None', kernel_regularizer_l1=0, kernel_regularizer_l2=0, user_kernel_regularizer=None, recurrent_regularizer='None', recurrent_regularizer_l1=0, recurrent_regularizer_l2=0, user_recurrent_regularizer=None, bias_regularizer='None', bias_regularizer_l1=0, bias_regularizer_l2=0, user_bias_regularizer=None, activity_regularizer='None', activity_regularizer_l1=0, activity_regularizer_l2=0, user_activity_regularizer=None, kernel_constraint='None', user_kernel_constraint=None, recurrent_constraint='None', user_recurrent_constraint=None, bias_constraint='None', user_bias_constraint=None, dropout=0.0, recurrent_dropout=0.0, implementation='2', name=None, inputs=None)","doc":"\n    SinpleRNN的Cell类。\n    ","desc":"\n    SinpleRNN的Cell类。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"输出空间维度，units，正整数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"units"},{"type_name":"Enumerated","desc":"激活函数，激活函数使用的是使用默认参数，如果需要修改参数，可以使用自定义激活函数","specific_type_name":null,"values":["softmax","elu","selu","softplus","softsign","relu","tanh","sigmoid","hard_sigmoid","linear","None","自定义"],"multi":false,"type_code":"choice","name":"activation","default":"tanh"},{"type_name":"Script","desc":"自定义激活函数，示例：\ndef bigquant_run(x):\n    import tensorflow as tf\n    return tf.atan(x)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activation"},{"type_name":"Boolean","desc":"use_bias，是否使用偏置项","specific_type_name":null,"type_code":"bool","name":"use_bias","default":true},{"type_name":"Enumerated","desc":"权值初始化方法，kernel_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"kernel_initializer","default":"glorot_uniform"},{"type_name":"Script","desc":"自定义权值初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_initializer"},{"type_name":"Enumerated","desc":"循环核初始化方法，recurrent_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"recurrent_initializer","default":"orthogonal"},{"type_name":"Script","desc":"自定义循环核初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_initializer"},{"type_name":"Enumerated","desc":"偏置向量初始化方法，bias_initializer，使用的是使用默认参数","specific_type_name":null,"values":["Zeros","Ones","Constant","RandomNormal","RandomUniform","TruncatedNormal","VarianceScaling","Orthogonal","Identiy","lecun_uniform","lecun_normal","glorot_normal","glorot_uniform","he_normal","he_uniform","自定义"],"multi":false,"type_code":"choice","name":"bias_initializer","default":"zeros"},{"type_name":"Script","desc":"自定义偏置向量初始化方法，示例：\ndef bigquant_run(shape, dtype=None):\n    import tensorflow.keras.backend as K\n    return K.random_normal(shape, dtype=dtype)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_initializer"},{"type_name":"Enumerated","desc":"权值正则项，kernel_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_regularizer","default":"None"},{"type_name":"Float","desc":"权值正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l1","default":0},{"type_name":"Float","desc":"权值正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"kernel_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义权值正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_regularizer"},{"type_name":"Enumerated","desc":"循环核正则项，recurrent_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_regularizer","default":"None"},{"type_name":"Float","desc":"循环核正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l1","default":0},{"type_name":"Float","desc":"循环核正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"recurrent_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义循环核正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_regularizer"},{"type_name":"Enumerated","desc":"偏置向量正则项，bias_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"bias_regularizer","default":"None"},{"type_name":"Float","desc":"偏置向量正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l1","default":0},{"type_name":"Float","desc":"偏置向量正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"bias_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义偏置向量正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_regularizer"},{"type_name":"Enumerated","desc":"输出正则项，activity_regularizer，如果使用L1L2，可配置如下L1，L2参数","specific_type_name":null,"values":["L1L2","None","自定义"],"multi":false,"type_code":"choice","name":"activity_regularizer","default":"None"},{"type_name":"Float","desc":"输出正则项L1，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l1","default":0},{"type_name":"Float","desc":"输出正则项L2，如果使用L1L2正则化，此参数有效","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"activity_regularizer_l2","default":0},{"type_name":"Script","desc":"自定义输出正则项，示例：\ndef bigquant_run(weight_matrix):\n    import tensorflow.keras.backend as K\n    return 0.01 * K.sum(K.abs(weight_matrix))","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_activity_regularizer"},{"type_name":"Enumerated","desc":"权值约束项，kernel_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"kernel_constraint","default":"None"},{"type_name":"Script","desc":"自定义权值约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_kernel_constraint"},{"type_name":"Enumerated","desc":"循环核约束项，recurrent_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"recurrent_constraint","default":"None"},{"type_name":"Script","desc":"自定义循环核约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_recurrent_constraint"},{"type_name":"Enumerated","desc":"偏置向量约束项，bias_constraint，在优化过程中为网络的参数施加约束","specific_type_name":null,"values":["max_norm","non_neg","unit_norm","min_max_norm","None","自定义"],"multi":false,"type_code":"choice","name":"bias_constraint","default":"None"},{"type_name":"Script","desc":"自定义偏置向量约束项，示例：\ndef bigquant_run(w):\n    from keras.constraints import max_norm\n    return max_norm(2.)(w)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_bias_constraint"},{"type_name":"Float","desc":"dropout，0~1之间的浮点数，控制输入线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"dropout","default":0.0},{"type_name":"Float","desc":"recurrent_dropout，0~1之间的浮点数，控制循环状态的线性变换的神经元断开比例","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"recurrent_dropout","default":0.0},{"type_name":"Enumerated","desc":"implementation, 1或2，如果设为1，则RNN将以更多但更小的矩阵乘法实现，因此在CPU上运行更慢，在GPU上运行更快，并且消耗更少的内存。如果设为2，则RNN将以更少但是更大的矩阵乘法实现，因此在CPU上运行更快，但消耗更多的内存。","specific_type_name":null,"values":["1","2"],"multi":false,"type_code":"choice","name":"implementation","default":"2"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.898000"},{"_id":"dl_layer_stackedrnncells.1","name":"dl_layer_stackedrnncells","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"StackedRNNCells层","category":"深度学习\\循环层","arguments":"(cell1=, cell2=None, cell3=None, cell4=None, name=None, inputs=None)","doc":"\n    这是一个wrapper，用于将多个recurrent cell包装起来，使其行为类型单个cell。该层用于实现高效的stacked RNN。\n    ","desc":"\n    这是一个wrapper，用于将多个recurrent cell包装起来，使其行为类型单个cell。该层用于实现高效的stacked RNN。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"RNN Cell","specific_type_name":null,"name":"cell1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"RNN Cell","specific_type_name":null,"name":"cell2","optional":false,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"RNN Cell","specific_type_name":null,"name":"cell3","optional":false,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"RNN Cell","specific_type_name":null,"name":"cell4","optional":false,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.900000"},{"_id":"dl_layer_subtract.1","name":"dl_layer_subtract","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"Subtract层","category":"深度学习\\融合层","arguments":"(input1=, input2=, name=None)","doc":"\n    该层接收两个同shape张量，并返回它们的逐元素差的张量，shape不变。\n    ","desc":"\n    该层接收两个同shape张量，并返回它们的逐元素差的张量，shape不变。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入1","specific_type_name":null,"name":"input1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入2","specific_type_name":null,"name":"input2","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.901000"},{"_id":"dl_layer_thresholdedrelu.1","name":"dl_layer_thresholdedrelu","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"ThresholdedReLU层","category":"深度学习\\高级激活层","arguments":"(theta=1.0, name=None, inputs=None)","doc":"\n    该层是带有门限的ReLU，表达式是：f(x) = x for x > theta,f(x) = 0 otherwise。\n    ","desc":"\n    该层是带有门限的ReLU，表达式是：f(x) = x for x > theta,f(x) = 0 otherwise。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Float","desc":"theta，Threshold location of activation，激活门限位置","specific_type_name":null,"min":0,"max":1.7976931348623157e+308,"type_code":"float","name":"theta","default":1.0},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.902000"},{"_id":"dl_layer_timedistributed.1","name":"dl_layer_timedistributed","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"TimeDistributed层","category":"深度学习\\包装器","arguments":"(layer=, name=None, inputs=None)","doc":"\n    该包装器可以把一个层应用到输入的每一个时间步上。\n    ","desc":"\n    该包装器可以把一个层应用到输入的每一个时间步上。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入层","specific_type_name":null,"name":"layer","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.903000"},{"_id":"dl_layer_upsampling1d.1","name":"dl_layer_upsampling1d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"UpSampling1D层","category":"深度学习\\卷积层","arguments":"(size=2, name=None, inputs=None)","doc":"\n    Upsampling layer for 1D inputs。在时间轴上，将每个时间步重复length次。输入形如（samples，steps，features）的3D张量，输出形如（samples，upsampled_steps，features）的3D张量。\n    ","desc":"\n    Upsampling layer for 1D inputs。在时间轴上，将每个时间步重复length次。输入形如（samples，steps，features）的3D张量，输出形如（samples，upsampled_steps，features）的3D张量。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"上采样因子，size","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"size","default":2},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.904000"},{"_id":"dl_layer_upsampling2d.1","name":"dl_layer_upsampling2d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"UpSampling2D层","category":"深度学习\\卷积层","arguments":"(size='2,2', data_format='channels_last', name=None, inputs=None)","doc":"\n    Upsampling layer for 2D inputs. 将数据的行和列分别重复size[0]和size[1]次。输入和输出均为4D张量。\n    ","desc":"\n    Upsampling layer for 2D inputs. 将数据的行和列分别重复size[0]和size[1]次。输入和输出均为4D张量。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"size，长为2的列表，分别为行和列上采样因子。列表用英文逗号(,)分隔的整数列表，例如 10 或者 32,24","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"size","default":"2,2"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.905000"},{"_id":"dl_layer_upsampling3d.1","name":"dl_layer_upsampling3d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"UpSampling3D层","category":"深度学习\\卷积层","arguments":"(size='2,2,2', data_format='channels_last', name=None, inputs=None)","doc":"\n    Upsampling layer for 3D inputs. 将数据的三个维度上分别重复size[0]、size[1]和ize[2]次。输入和输出均为5D张量。\n    ","desc":"\n    Upsampling layer for 3D inputs. 将数据的三个维度上分别重复size[0]、size[1]和ize[2]次。输入和输出均为5D张量。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"size，长为3的列表，分别为行和列上采样因子。列表用英文逗号(,)分隔的整数列表，例如 10 或者 32,24","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"size","default":"2,2,2"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.906000"},{"_id":"dl_layer_userlayer.1","name":"dl_layer_userlayer","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"自定义层","category":"深度学习\\自定义层","arguments":"(layer_class=, input1=None, input2=None, input3=None, params={}, name=None)","doc":"\n    对于简单的定制操作，我们或许可以通过使用layers.core.Lambda层来完成。但对于任何具有可训练权重的定制层，你应该自己来实现。\n这里是一个层应该具有的框架结构，要定制自己的层，你需要实现下面三个方法：\n - build(input_shape)：这是定义权重的方法，可训练的权应该在这里被加入列表`self.trainable_weights中。其他的属性还包括self.non_trainabe_weights（列表）和self.updates（需要更新的形如（tensor, new_tensor）的tuple的列表）。你可以参考BatchNormalization层的实现来学习如何使用上面两个属性。这个方法必须设置self.built = True，可通过调用super([layer],self).build()实现\n - call(x)：这是定义层功能的方法，除非你希望你写的层支持masking，否则你只需要关心call的第一个参数：输入张量\n - compute_output_shape(input_shape)：如果你的层修改了输入数据的shape，你应该在这里指定shape变化的方法，这个函数使得Keras可以做自动shape推断\n\n    ","desc":"\n    对于简单的定制操作，我们或许可以通过使用layers.core.Lambda层来完成。但对于任何具有可训练权重的定制层，你应该自己来实现。\n这里是一个层应该具有的框架结构，要定制自己的层，你需要实现下面三个方法：\n - build(input_shape)：这是定义权重的方法，可训练的权应该在这里被加入列表`self.trainable_weights中。其他的属性还包括self.non_trainabe_weights（列表）和self.updates（需要更新的形如（tensor, new_tensor）的tuple的列表）。你可以参考BatchNormalization层的实现来学习如何使用上面两个属性。这个方法必须设置self.built = True，可通过调用super([layer],self).build()实现\n - call(x)：这是定义层功能的方法，除非你希望你写的层支持masking，否则你只需要关心call的第一个参数：输入张量\n - compute_output_shape(input_shape)：如果你的层修改了输入数据的shape，你应该在这里指定shape变化的方法，这个函数使得Keras可以做自动shape推断\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Script","desc":"用户层定义","specific_type_name":null,"language":"script.py","default":"from tensorflow.keras.layers import Layer\n\nclass UserLayer(Layer):\n\n    def __init__(self):\n        self.output_dim = 123\n        super(UserLayer, self).__init__()\n\n    def build(self, input_shape):\n        # Create a trainable weight variable for this layer.\n        self.kernel = self.add_weight(name='kernel',\n                                      shape=(input_shape[1], self.output_dim),\n                                      initializer='uniform',\n                                      trainable=True)\n        super(UserLayer, self).build(input_shape)  # Be sure to call this somewhere!\n\n    def call(self, x):\n        import tensorflow.keras.backend as K\n        return K.dot(x, self.kernel)\n\n    def compute_output_shape(self, input_shape):\n        return (input_shape[0], self.output_dim)\n\n# 必须也将 UserLayer 赋值给 bigquant_run\nbigquant_run = UserLayer\n","auto_complete_type":null,"type_code":"code","name":"layer_class"},{"type_name":null,"desc":"输入1","specific_type_name":null,"name":"input1","optional":false,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入2","specific_type_name":null,"name":"input2","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入3","specific_type_name":null,"name":"input3","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Script","desc":"用户层输入参数，字典形式，给出参数的值。比如{'param1':1,'param2':2}","specific_type_name":"字典","language":"","default":"{}","auto_complete_type":null,"type_code":"code","name":"params"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.907000"},{"_id":"dl_layer_zeropadding1d.1","name":"dl_layer_zeropadding1d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"ZeroPadding1D层","category":"深度学习\\卷积层","arguments":"(padding=1, name=None, inputs=None)","doc":"\n    对1D输入的首尾端（如时域序列）填充0，以控制卷积以后向量的长度。\n    ","desc":"\n    对1D输入的首尾端（如时域序列）填充0，以控制卷积以后向量的长度。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Int","desc":"padding，表示在要填充的轴的起始和结束处填充0的数目，这里要填充的轴是轴1（第1维，第0维是样本数）","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"padding","default":1},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.909000"},{"_id":"dl_layer_zeropadding2d.1","name":"dl_layer_zeropadding2d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"ZeroPadding2D层","category":"深度学习\\卷积层","arguments":"(padding='2,2', data_format='channels_last', name=None, inputs=None)","doc":"\n    对2D输入（如图片）的边界填充0，以控制卷积以后特征图的大小。\n    ","desc":"\n    对2D输入（如图片）的边界填充0，以控制卷积以后特征图的大小。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"padding，表示在要填充的轴的起始和结束处填充0的数目，这里要填充的轴是轴3和轴4（即在'th'模式下图像的行和列，在‘channels_last’模式下要填充的则是轴2，3）。长为 2 的整数列表，列表用英文逗号(,)分隔，例如 2,2","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"padding","default":"2,2"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.910000"},{"_id":"dl_layer_zeropadding3d.1","name":"dl_layer_zeropadding3d","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"ZeroPadding3D层","category":"深度学习\\卷积层","arguments":"(padding='1,1,1', data_format='channels_last', name=None, inputs=None)","doc":"\n    将数据的三个维度上填充0。\n    ","desc":"\n    将数据的三个维度上填充0。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"padding，长为3的整数列表，列表用英文逗号(,)分隔的整数列表，例如 32,24。表示在要填充的轴的起始和结束处填充0的数目，这里要填充的轴是轴3，轴4和轴5，‘channels_last’模式下则是轴2，3和4","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"padding","default":"1,1,1"},{"type_name":"Enumerated","desc":"通道维位置，data_format，代表图像的通道维的位置，该参数是Keras 1.x中的image_dim_ordering，“channels_last”对应原本的“tf”，“channels_first”对应原本的“th”。以128x128的RGB图像为例，“channels_first”应将数据组织为（3,128,128），而“channels_last”应将数据组织为（128,128,3）。该参数的默认值是~/.keras/keras.json中设置的值，若从未设置过，则为“channels_last”。","specific_type_name":null,"values":["channels_last","channels_first"],"multi":false,"type_code":"choice","name":"data_format","default":"channels_last"},{"type_name":"String","desc":"名字, name, 可选，层的名字，在模型里不能有两个层同名。如果不指定，将自动分配名字","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"name","default":null},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.911000"},{"_id":"dl_model_evaluate.1","name":"dl_model_evaluate","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"效果评估(深度学习)","category":"深度学习\\模型","arguments":"(trained_model=, input_data=, batch_size=32, n_gpus=0, verbose='2:每个epoch输出一行记录')","doc":"\n\n 在评估数据集上，计算loss value和metrics values\n\n    ","desc":"\n\n 在评估数据集上，计算loss value和metrics values\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"评估结果","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"模型","specific_type_name":null,"name":"trained_model","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"数据，pickle格式dict，包含x和y","specific_type_name":null,"name":"input_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Int","desc":"batch_size，进行梯度下降时每个batch包含的样本数。训练时一个batch的样本会被计算一次梯度下降，使目标函数优化一步。","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"batch_size","default":32},{"type_name":"Int","desc":"gpu个数，本模块使用的gpu个数","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"n_gpus","default":0},{"type_name":"Enumerated","desc":"日志输出","specific_type_name":null,"values":["0:不显示","1:输出进度条记录","2:每个epoch输出一行记录"],"multi":false,"type_code":"choice","name":"verbose","default":"2:每个epoch输出一行记录"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.912000"},{"_id":"dl_model_init.1","name":"dl_model_init","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"构建(深度学习)","category":"深度学习\\模型","arguments":"(inputs=None, outputs=None)","doc":"\n\n 构造一个拥有输入和输出的模型。我们使用Model来初始化构造一个函数式模型。\n\n    ","desc":"\n\n 构造一个拥有输入和输出的模型。我们使用Model来初始化构造一个函数式模型。\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"模型","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入","specific_type_name":null,"name":"inputs","optional":false,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输出","specific_type_name":null,"name":"outputs","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.913000"},{"_id":"dl_model_predict.1","name":"dl_model_predict","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"预测(深度学习)","category":"深度学习\\模型","arguments":"(trained_model=, input_data=, batch_size=32, n_gpus=0, verbose='2:每个epoch输出一行记录')","doc":"\n    深度学习模型预测。\n    ","desc":"\n    深度学习模型预测。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"预测结果","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"模型","specific_type_name":null,"name":"trained_model","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"数据，pickle格式dict，包含x","specific_type_name":null,"name":"input_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Int","desc":"batch_size，进行梯度下降时每个batch包含的样本数。训练时一个batch的样本会被计算一次梯度下降，使目标函数优化一步。","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"batch_size","default":32},{"type_name":"Int","desc":"gpu个数，本模块使用的gpu个数","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"n_gpus","default":0},{"type_name":"Enumerated","desc":"日志输出","specific_type_name":null,"values":["0:不显示","1:输出进度条记录","2:每个epoch输出一行记录"],"multi":false,"type_code":"choice","name":"verbose","default":"2:每个epoch输出一行记录"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.914000"},{"_id":"dl_model_train.1","name":"dl_model_train","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"训练(深度学习)","category":"深度学习\\模型","arguments":"(input_model=, training_data=, validation_data=None, optimizer='SGD', user_optimizer=None, loss='mean_squared_error', user_loss=None, metrics=None, batch_size=32, epochs=1, earlystop=None, custom_objects={}, n_gpus=0, verbose='2:每个epoch输出一行记录')","doc":"\n    深度学习模型模型编译和训练。\n    ","desc":"\n    深度学习模型模型编译和训练。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"训练后的模型","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"模型结构","specific_type_name":null,"name":"input_model","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"训练数据，pickle格式dict，包含x和y","specific_type_name":null,"name":"training_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"验证数据，pickle格式dict，包含x和y","specific_type_name":null,"name":"validation_data","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Enumerated","desc":"优化器，optimizer，优化器使用的是使用默认参数，如果需要修改参数，可以使用自定义优化器","specific_type_name":null,"values":["SGD","RMSprop","Adagrad","Adadelta","Adam","Adamax","Nadam","TFOptimizer","自定义"],"multi":false,"type_code":"choice","name":"optimizer","default":"SGD"},{"type_name":"Script","desc":"自定义优化器，示例：\nfrom tensorflow.keras import optimizers\nbigquant_run=optimizers.SGD(lr=0.01, clipvalue=0.5)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_optimizer"},{"type_name":"Enumerated","desc":"目标函数，loss，目标函数/损失函数","specific_type_name":null,"values":["mean_squared_error","mean_absolute_error","mean_absolute_percentage_error","mean_squared_logarithmic_error","squared_hinge","hinge","categorical_hinge","binary_crossentropy","logcosh","categorical_crossentropy","sparse_categorical_crossentrop","kullback_leibler_divergence","poisson","cosine_proximity","自定义"],"multi":false,"type_code":"choice","name":"loss","default":"mean_squared_error"},{"type_name":"Script","desc":"自定义目标函数，示例：\nfrom tensorflow.keras import losses\nbigquant_run=losses.mean_squared_error","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"user_loss"},{"type_name":"String","desc":"评估指标，包含评估模型在训练和测试时的性能的指标，多个指标用英文逗号(,)分隔。示例：mse,accuracy","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"metrics","default":null},{"type_name":"Int","desc":"batch_size，进行梯度下降时每个batch包含的样本数。训练时一个batch的样本会被计算一次梯度下降，使目标函数优化一步。","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"batch_size","default":32},{"type_name":"Int","desc":"epochs，训练终止时的epoch值，训练将在达到该epoch值时停止，当没有设置initial_epoch时，它就是训练的总轮数，否则训练的总轮数为epochs - inital_epoch","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"epochs","default":1},{"type_name":"Script","desc":"提前终止训练，示例：\nbigquant_run=EarlyStopping(monitor='val_mse', min_delta=0.0001, patience=1)​)","specific_type_name":null,"language":"script.py","default":null,"auto_complete_type":null,"type_code":"code","name":"earlystop"},{"type_name":"Script","desc":"用户自定义层，字典形式，给出用户自定义层的键值对","specific_type_name":"字典","language":"script.py","default":"# 用户的自定义层需要写到字典中，比如\n# {\n#   \"MyLayer\": MyLayer\n# }\nbigquant_run = {\n    \n}\n","auto_complete_type":null,"type_code":"code","name":"custom_objects"},{"type_name":"Int","desc":"gpu个数，本模块使用的gpu个数","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"n_gpus","default":0},{"type_name":"Enumerated","desc":"日志输出","specific_type_name":null,"values":["0:不显示","1:输出进度条记录","2:每个epoch输出一行记录"],"multi":false,"type_code":"choice","name":"verbose","default":"2:每个epoch输出一行记录"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.915000"},{"_id":"dl_models_tabnet_predict.1","name":"dl_models_tabnet_predict","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"TabNet预测","category":"深度学习\\模型库","arguments":"(trained_model=, input_data=)","doc":"\n    TabNet模型预测。\n\n    ","desc":"\n    TabNet模型预测。\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"预测结果","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练好的模型权重和参数","specific_type_name":null,"name":"trained_model","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"预测数据，包含'x'","specific_type_name":null,"name":"input_data","optional":false,"type":"通用","type_code":"input_port"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.916000"},{"_id":"dl_models_tabnet_train.1","name":"dl_models_tabnet_train","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"TabNet训练","category":"深度学习\\模型库","arguments":"(training_data=, validation_data=None, input_dim=98, n_steps=3, n_d=8, n_a=8, gamma=1.3, momentum=0.02, batch_size=1024, virtual_batch_size=128, epochs=20, num_workers=0, device_name='auto:自动调用GPU', verbose='1:输出进度条记录')","doc":"\n    TabNet模型训练。\n    TabNet（TabNet: Attentive Interpretable Tabular Learning）是适用于表格类型数据的模型，结合了树模型和DNN模型的优点。\n\n    ","desc":"\n    TabNet模型训练。\n    TabNet（TabNet: Attentive Interpretable Tabular Learning）是适用于表格类型数据的模型，结合了树模型和DNN模型的优点。\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"训练后的模型","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，pickle格式dict，包含x和y","specific_type_name":null,"name":"training_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"验证数据，pickle格式dict，包含x和y","specific_type_name":null,"name":"validation_data","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"输入特征维度","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"input_dim","default":98},{"type_name":"Int","desc":"决策的步数，通常为{3，10}","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"n_steps","default":3},{"type_name":"Int","desc":"预测阶段的特征数，通常为{4 ~ 8}，且n_d=n_a","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"n_d","default":8},{"type_name":"Int","desc":"Attentive的特征数，通常为{4 ~ 8}","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"n_a","default":8},{"type_name":"Float","desc":"注意力更新的比例，通常为{1.0 ~ 2.0}","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"gamma","default":1.3},{"type_name":"Float","desc":"归一化层的动量，通常为{0 ~ 1}","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"momentum","default":0.02},{"type_name":"Int","desc":"一个批次训练的样本数，通常为{256 ~ 2048}","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"batch_size","default":1024},{"type_name":"Int","desc":"GBN模块的虚拟批次大小，通常为{128 ~ 2048}","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"virtual_batch_size","default":128},{"type_name":"Int","desc":"迭代次数","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"epochs","default":20},{"type_name":"Int","desc":"数据读取的进程数，默认全部调用","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"num_workers","default":0},{"type_name":"Enumerated","desc":"是否调用GPU","specific_type_name":null,"values":["auto:自动调用GPU","cpu:使用cpu训练","cuda:使用GPU训练"],"multi":false,"type_code":"choice","name":"device_name","default":"auto:自动调用GPU"},{"type_name":"Enumerated","desc":"日志输出","specific_type_name":null,"values":["0:不显示","1:输出进度条记录"],"multi":false,"type_code":"choice","name":"verbose","default":"1:输出进度条记录"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.917000"},{"_id":"dropnan.1","name":"dropnan","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"缺失数据处理","category":"数据处理","arguments":"(input_data=)","doc":"\n\n\n 缺失数据处理：删除有缺失数据的行\n\n\n        ","desc":null,"doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入数据源","specific_type_name":null,"name":"input_data","optional":false,"type":"通用","type_code":"input_port"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.918000"},{"_id":"dropnan.2","name":"dropnan","version":2,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":2,"friendly_name":"缺失数据处理","category":"数据处理","arguments":"(input_data=, features=None)","doc":"\n        缺失数据处理：删除指定特征列有缺失数据的行\n        ","desc":null,"doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入数据源","specific_type_name":null,"name":"input_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"训练-特征，去掉指定特征列空值。默认为空，去掉有空值的行","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.919000"},{"_id":"extra_trees_classifier.1","name":"extra_trees_classifier","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"极端随机森林-分类","category":"机器学习\\分类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, criterion='gini', iterations=10, feature_fraction=1, max_depth=30, min_samples_per_leaf=200, key_cols='date,instrument', workers=1, random_state=0, other_train_parameters={})","doc":"\n    对于随机森林的优化。\n\n    ","desc":"\n    对于随机森林的优化。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Enumerated","desc":"决定分割的标准，支持基尼不纯度gini和熵不纯度entropy，默认是gini","specific_type_name":null,"values":["gini","entropy"],"multi":false,"type_code":"choice","name":"criterion","default":"gini"},{"type_name":"Int","desc":"树的数量，数量越大，则模型越复杂，学习能力越强，更有可能过拟合，需要更多的计算资源","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"iterations","default":10},{"type_name":"Float","desc":"特征使用率：寻找最佳分割时要考虑的特征比率","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"float","name":"feature_fraction","default":1},{"type_name":"Int","desc":"树的最大深度，限制每棵树的最大深度，数值大拟合能力强，数值小泛化能力强。设置为0则不限制","specific_type_name":null,"min":0,"max":2147483647,"type_code":"int","name":"max_depth","default":30},{"type_name":"Int","desc":"每叶节点最小样本数：每个叶节点最少需要的样本数量，一般值越大，泛化性性越好","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"min_samples_per_leaf","default":200},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Int","desc":"并行作业数，同时使用多少个进程进行计算，默认是1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Int","desc":"随机数种子，默认是0","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"random_state","default":0},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.920000"},{"_id":"extra_trees_regressor.1","name":"extra_trees_regressor","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"极端随机森林-回归","category":"机器学习\\回归","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, criterion='mse', iterations=10, feature_fraction=1, max_depth=30, min_samples_per_leaf=200, key_cols='date,instrument', workers=1, random_state=0, other_train_parameters={})","doc":"\n    对于随机森林的优化。\n\n    ","desc":"\n    对于随机森林的优化。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Enumerated","desc":"决定分割的标准，支持均方误差mse和平均绝对误差mae。默认是mse","specific_type_name":null,"values":["mse","mae"],"multi":false,"type_code":"choice","name":"criterion","default":"mse"},{"type_name":"Int","desc":"树的数量，数量越大，则模型越复杂，学习能力越强，更有可能过拟合，需要更多的计算资源","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"iterations","default":10},{"type_name":"Float","desc":"特征使用率：寻找最佳分割时要考虑的特征比率","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"float","name":"feature_fraction","default":1},{"type_name":"Int","desc":"树的最大深度，限制每棵树的最大深度，数值大拟合能力强，数值小泛化能力强。设置为0则不限制","specific_type_name":null,"min":0,"max":2147483647,"type_code":"int","name":"max_depth","default":30},{"type_name":"Int","desc":"每叶节点最小样本数：每个叶节点最少需要的样本数量，一般值越大，泛化性性越好","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"min_samples_per_leaf","default":200},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Int","desc":"并行作业数，同时使用多少个进程进行计算，默认是1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Int","desc":"随机数种子，默认是0","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"random_state","default":0},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.921000"},{"_id":"factorlens.1","name":"factorlens","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"因子分析","category":"因子研究","arguments":"(features=, user_factor_data=None, title='因子分析: {factor_name}', start_date='2019-01-01', end_date='2019-12-31', rebalance_period=22, delay_rebalance_days=0, rebalance_price='close_0', stock_pool='全市场', quantile_count=5, commission_rate=0.0016, returns_calculation_method='累乘', benchmark='无', drop_new_stocks=60, drop_price_limit_stocks=True, drop_st_stocks=True, drop_suspended_stocks=True, normalization=True, neutralization=['行业', '市值'], metrics=['因子表现概览', '因子分布', '因子行业分布', '因子市值分布', 'IC分析', '买入信号重合分析', '因子估值分析', '因子拥挤度分析', '因子值最大/最小股票', '表达式因子值', '多因子相关性分析'], factor_coverage=0.5, user_data_merge='left')","doc":"\n    因子分析。对输入的因子公式或者因子数据，做因子分析。\n    ","desc":"\n    因子分析。对输入的因子公式或者因子数据，做因子分析。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入因子-来自输入特征列表等模块","specific_type_name":"列表|DataSource","name":"features","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"用户自定义特征数据","specific_type_name":"DataSource","name":"user_factor_data","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"分析报告标题, {factor_name}表示因子名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"title","default":"因子分析: {factor_name}"},{"type_name":"String","desc":"开始日期，分析数据开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":"2019-01-01"},{"type_name":"String","desc":"结束日期，分析数据结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":"2019-12-31"},{"type_name":"Int","desc":"调仓周期(交易日)，单位为交易日","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"rebalance_period","default":22},{"type_name":"Int","desc":"延迟建仓天数","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"delay_rebalance_days","default":0},{"type_name":"Enumerated","desc":"收益价格","specific_type_name":null,"values":["close_0","open_0","vwap"],"multi":false,"type_code":"choice","name":"rebalance_price","default":"close_0"},{"type_name":"Enumerated","desc":"股票池","specific_type_name":null,"values":["全市场","沪深300","中证500","中证800"],"multi":false,"type_code":"choice","name":"stock_pool","default":"全市场"},{"type_name":"Int","desc":"分组数量","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"quantile_count","default":5},{"type_name":"Float","desc":"手续费及滑点","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"commission_rate","default":0.0016},{"type_name":"Enumerated","desc":"收益计算方式","specific_type_name":null,"values":["累乘","累加"],"multi":false,"type_code":"choice","name":"returns_calculation_method","default":"累乘"},{"type_name":"Enumerated","desc":"收益率基准，选中无则计算绝对收益，选中其他基准则计算对应基准的相对收益(分组收益计算)","specific_type_name":null,"values":["无","沪深300","中证500","中证800"],"multi":false,"type_code":"choice","name":"benchmark","default":"无"},{"type_name":"Int","desc":"移除新股","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"drop_new_stocks","default":60},{"type_name":"Boolean","desc":"移除涨跌停股票","specific_type_name":null,"type_code":"bool","name":"drop_price_limit_stocks","default":true},{"type_name":"Boolean","desc":"移除ST股票","specific_type_name":null,"type_code":"bool","name":"drop_st_stocks","default":true},{"type_name":"Boolean","desc":"移除停牌股票","specific_type_name":null,"type_code":"bool","name":"drop_suspended_stocks","default":true},{"type_name":"Boolean","desc":"因子去极值和标准化","specific_type_name":null,"type_code":"bool","name":"normalization","default":true},{"type_name":"Enumerated","desc":"中性化风险因子。利用回归得到一个与风险因子线性无关的因子，用残差作为中性化后的新因子","specific_type_name":null,"values":["行业","市值"],"multi":true,"type_code":"choice","name":"neutralization","default":["行业","市值"]},{"type_name":"Enumerated","desc":"指标。勾选需要输出的指标，不勾选为不输出","specific_type_name":null,"values":["因子表现概览","因子分布","因子行业分布","因子市值分布","IC分析","买入信号重合分析","因子估值分析","因子拥挤度分析","因子值最大/最小股票","表达式因子值","多因子相关性分析"],"multi":true,"type_code":"choice","name":"metrics","default":["因子表现概览","因子分布","因子行业分布","因子市值分布","IC分析","买入信号重合分析","因子估值分析","因子拥挤度分析","因子值最大/最小股票","表达式因子值","多因子相关性分析"]},{"type_name":"Float","desc":"原始因子值覆盖率","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"float","name":"factor_coverage","default":0.5},{"type_name":"Enumerated","desc":"用户数据合并方式","specific_type_name":null,"values":["left","inner"],"multi":false,"type_code":"choice","name":"user_data_merge","default":"left"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.922000"},{"_id":"factorlens.2","name":"factorlens","version":2,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":2,"friendly_name":"因子分析","category":"因子研究","arguments":"(features=, user_factor_data=None, title='因子分析: {factor_name}', start_date='2019-01-01', end_date='2019-12-31', rebalance_period=22, delay_rebalance_days=0, rebalance_price='close_0', stock_pool='全市场', quantile_count=5, commission_rate=0.0016, returns_calculation_method='累乘', benchmark='无', drop_new_stocks=60, drop_price_limit_stocks=False, drop_st_stocks=False, drop_suspended_stocks=False, cutoutliers=True, normalization=True, neutralization=[], metrics=['因子表现概览', '因子分布', '因子行业分布', '因子市值分布', 'IC分析', '买入信号重合分析', '因子估值分析', '因子拥挤度分析', '因子值最大/最小股票', '表达式因子值', '多因子相关性分析'], factor_coverage=0.5, user_data_merge='left')","doc":"\n    因子分析。对输入的因子公式或者因子数据，做因子分析。\n    ","desc":"\n    因子分析。对输入的因子公式或者因子数据，做因子分析。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"保存数据,连接保存因子模块","specific_type_name":null,"name":"save_data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入因子-来自输入特征列表等模块","specific_type_name":"列表|DataSource","name":"features","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"用户自定义特征数据","specific_type_name":"DataSource","name":"user_factor_data","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"分析报告标题, {factor_name}表示因子名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"title","default":"因子分析: {factor_name}"},{"type_name":"String","desc":"开始日期，分析数据开始日期","specific_type_name":null,"can_set_liverun_param":true,"type_code":"str","name":"start_date","default":"2019-01-01"},{"type_name":"String","desc":"结束日期，分析数据结束日期","specific_type_name":null,"can_set_liverun_param":true,"type_code":"str","name":"end_date","default":"2019-12-31"},{"type_name":"Int","desc":"调仓周期(交易日)，单位为交易日","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"rebalance_period","default":22},{"type_name":"Int","desc":"延迟建仓天数","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"delay_rebalance_days","default":0},{"type_name":"Enumerated","desc":"收益价格","specific_type_name":null,"values":["close_0","open_0","vwap"],"multi":false,"type_code":"choice","name":"rebalance_price","default":"close_0"},{"type_name":"Enumerated","desc":"股票池","specific_type_name":null,"values":["全市场","沪深300","中证500","中证800"],"multi":false,"type_code":"choice","name":"stock_pool","default":"全市场"},{"type_name":"Int","desc":"分组数量","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"quantile_count","default":5},{"type_name":"Float","desc":"手续费及滑点","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"commission_rate","default":0.0016},{"type_name":"Enumerated","desc":"收益计算方式","specific_type_name":null,"values":["累乘","累加"],"multi":false,"type_code":"choice","name":"returns_calculation_method","default":"累乘"},{"type_name":"Enumerated","desc":"收益率基准，选中无则计算绝对收益，选中其他基准则计算对应基准的相对收益(分组收益计算)","specific_type_name":null,"values":["无","沪深300","中证500","中证800"],"multi":false,"type_code":"choice","name":"benchmark","default":"无"},{"type_name":"Int","desc":"移除新股","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"drop_new_stocks","default":60},{"type_name":"Boolean","desc":"移除涨跌停股票","specific_type_name":null,"type_code":"bool","name":"drop_price_limit_stocks","default":false},{"type_name":"Boolean","desc":"移除ST股票","specific_type_name":null,"type_code":"bool","name":"drop_st_stocks","default":false},{"type_name":"Boolean","desc":"移除停牌股票","specific_type_name":null,"type_code":"bool","name":"drop_suspended_stocks","default":false},{"type_name":"Boolean","desc":"因子去极值","specific_type_name":null,"type_code":"bool","name":"cutoutliers","default":true},{"type_name":"Boolean","desc":"因子标准化","specific_type_name":null,"type_code":"bool","name":"normalization","default":true},{"type_name":"Enumerated","desc":"中性化风险因子。利用回归得到一个与风险因子线性无关的因子，用残差作为中性化后的新因子","specific_type_name":null,"values":["行业","市值"],"multi":true,"type_code":"choice","name":"neutralization","default":[]},{"type_name":"Enumerated","desc":"指标。勾选需要输出的指标，不勾选为不输出","specific_type_name":null,"values":["因子表现概览","因子分布","因子行业分布","因子市值分布","IC分析","买入信号重合分析","因子估值分析","因子拥挤度分析","因子值最大/最小股票","表达式因子值","多因子相关性分析"],"multi":true,"type_code":"choice","name":"metrics","default":["因子表现概览","因子分布","因子行业分布","因子市值分布","IC分析","买入信号重合分析","因子估值分析","因子拥挤度分析","因子值最大/最小股票","表达式因子值","多因子相关性分析"]},{"type_name":"Float","desc":"原始因子值覆盖率","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"float","name":"factor_coverage","default":0.5},{"type_name":"Enumerated","desc":"用户数据合并方式","specific_type_name":null,"values":["left","inner"],"multi":false,"type_code":"choice","name":"user_data_merge","default":"left"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.924000"},{"_id":"factorlens_preservation.1","name":"factorlens_preservation","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"保存因子","category":"因子研究","arguments":"(factors_info=)","doc":" 保存因子数据 ","desc":" 保存因子数据 ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"因子信息","specific_type_name":"DataSource","name":"factors_info","optional":false,"type":"通用","type_code":"input_port"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.926000"},{"_id":"factorlens_preservation.2","name":"factorlens_preservation","version":2,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":2,"friendly_name":"保存因子","category":"因子研究","arguments":"(factors_info=, factor_fields=None, table='')","doc":"\n    保存因子数据\n\n    传入因子绩效数据:\n        DataSource -> Dict\n        factors_info = {\n            \"factor_1\": {\n                \"options\": {\"start_date\": \"2021-01-01\", \"end_date\": \"2021-07-05\"},\n                \"metrics\": {\"IC均值\": 0.1, \"IC_IR\": 0.2, \"近一日收益率\": 0.01, \"近一周收益率\": -0.03, \"近一月收益率\": 0.12},\n                \"datasource\": DataFrame,\n                \"column_name\": \"factor_1\",\n                \"expr\": \"\"\n            }\n        }\n    传入因子数据:\n        DataSource -> DataFrame\n\n    ","desc":"\n    保存因子数据\n\n    传入因子绩效数据:\n        DataSource -> Dict\n        factors_info = {\n            \"factor_1\": {\n                \"options\": {\"start_date\": \"2021-01-01\", \"end_date\": \"2021-07-05\"},\n                \"metrics\": {\"IC均值\": 0.1, \"IC_IR\": 0.2, \"近一日收益率\": 0.01, \"近一周收益率\": -0.03, \"近一月收益率\": 0.12},\n                \"datasource\": DataFrame,\n                \"column_name\": \"factor_1\",\n                \"expr\": \"\"\n            }\n        }\n    传入因子数据:\n        DataSource -> DataFrame\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"因子数据","specific_type_name":"DataSource","name":"factors_info","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Script","desc":"因子描述, 每个因子及其对应的名称,因子描述信息","specific_type_name":"函数","language":"script.py","default":"# 定义因子名称\n# {\n#     \"列名\": {'name': \"因子名\", 'desc': \"因子描述\"},\n#     \"列名\": {'name': \"因子名\", 'desc': \"因子描述\"},\n#     ... \n# }\n{}\n","auto_complete_type":"python","type_code":"code","name":"factor_fields"},{"type_name":"String","desc":"表名, 因子表名, 小写字母, 不能包含大写字母","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"table","default":""}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.927000"},{"_id":"filter.3","name":"filter","version":3,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":3,"friendly_name":"数据过滤","category":"数据处理","arguments":"(input_data=, expr=, output_left_data=False)","doc":"\n        根据过滤表达式根据过滤表达式过滤DataSource (数据类型为 DataFrame)\n        ","desc":null,"doc_url":"https://bigquant.com/docs/develop/modules/filter.html","interface":[{"type_name":null,"desc":"输出数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"剩余数据","specific_type_name":null,"name":"left_data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入数据","specific_type_name":"DataSource","name":"input_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"过滤表达式， 参考示例代码和[DataFrame.query](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.query.html)，包含特使字符的列名需要使用反单引号(\\`)引起来，例如 \\`close_10/close0\\` > 0.91","specific_type_name":"字符串","can_set_liverun_param":null,"type_code":"str","name":"expr"},{"type_name":"Boolean","desc":"输出剩余数据","specific_type_name":null,"type_code":"bool","name":"output_left_data","default":false}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.935000"},{"_id":"general_feature_extractor.0","owner":"bigquant","shared":true,"data":{"visible":true,"friendly_name":"基础特征抽取","category":"特征抽取","opensource":false,"doc":"\n        基础特征(因子)抽取：读取基础数据字段，这里抽取的是基础特征，例如，对于特征 close_1/close_0，这里会读取出 close_0，close_1\n        ","doc_url":"https://bigquant.com/docs/module_general_feature_extractor.html","arguments":"(instruments=, features=, start_date='', end_date='', before_start_days=90)","source_deps":"","interface":[{"type":"通用","specific_type_name":null,"name":"data","optional":false,"type_code":"output_port","type_name":null,"desc":"基础特征数据"},{"type":"通用","specific_type_name":"列表|DataSource","name":"instruments","optional":false,"type_code":"input_port","type_name":null,"desc":"证券代码列表"},{"type":"通用","specific_type_name":"列表|DataSource","name":"features","optional":false,"type_code":"input_port","type_name":null,"desc":"特征列表"},{"specific_type_name":null,"type_code":"str","name":"start_date","type_name":"String","desc":"开始日期，示例 2017-02-12，一般不需要指定，使用 证券代码列表 里的开始日期","can_set_liverun_param":null,"default":""},{"specific_type_name":null,"type_code":"str","name":"end_date","type_name":"String","desc":"结束日期，示例 2017-02-12，一般不需要指定，使用 证券代码列表 里的结束日期","can_set_liverun_param":null,"default":""},{"specific_type_name":null,"name":"before_start_days","type_code":"float","max":1.7976931348623157e+308,"default":90,"type_name":"Float","min":-1.7976931348623157e+308,"desc":"向前取数据天数，比如，用户通过表达式计算的衍生特征，可能需要用到开始日期之前的数据，可以通过设置此值实现，则数据将从 开始日期-向前取数据天数 开始取。考虑到节假日等，建议将此值得大一些"}],"source_code":"","cacheable":true,"serviceversion":0,"desc":null},"rank":0,"updated_at":"2018-12-12T18:38:38.158000","version":0,"name":"general_feature_extractor"},{"_id":"general_feature_extractor.6","name":"general_feature_extractor","version":6,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":6,"friendly_name":"基础特征抽取","category":"特征抽取","arguments":"(instruments=, features=, start_date='', end_date='', before_start_days=0)","doc":"\n        基础特征(因子)抽取：读取基础数据字段，这里抽取的是基础特征，例如，对于特征 close_1/close_0，这里会读取出 close_0，close_1\n        ","desc":null,"doc_url":"https://bigquant.com/docs/develop/modules/general_feature_extractor.html","interface":[{"type_name":null,"desc":"基础特征数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"代码列表","specific_type_name":"列表|DataSource","name":"instruments","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"特征列表","specific_type_name":"列表|DataSource","name":"features","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"开始日期，示例 2017-02-12，一般不需要指定，使用 代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，示例 2017-02-12，一般不需要指定，使用 代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":"Float","desc":"向前取数据天数，比如，用户通过表达式计算的衍生特征，可能需要用到开始日期之前的数据，可以通过设置此值实现，则数据将从 开始日期-向前取数据天数 开始取。考虑到节假日等，建议将此值得大一些","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"before_start_days","default":0}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.936000"},{"_id":"general_feature_extractor.7","name":"general_feature_extractor","version":7,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":7,"friendly_name":"基础特征抽取","category":"特征抽取","arguments":"(instruments=, features=, start_date='', end_date='', before_start_days=90)","doc":"基础特征(因子)抽取：读取基础数据字段，这里抽取的是基础特征，例如，对于衍生特征 close_1/close_0，这里只会读取出 close_0，close_1。要进行衍生特征抽取，需要结合衍生特征抽取模块。","desc":null,"doc_url":"https://bigquant.com/docs/develop/modules/general_feature_extractor.html","interface":[{"type_name":null,"desc":"基础特征数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"代码列表","specific_type_name":"列表|DataSource","name":"instruments","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"特征列表","specific_type_name":"列表|DataSource","name":"features","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"开始日期，示例 2017-02-12，一般不需要指定，使用 代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，示例 2017-02-12，一般不需要指定，使用 代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":"Float","desc":"向前取数据天数，比如，用户通过表达式计算的衍生特征，可能需要用到开始日期之前的数据，可以通过设置此值实现，则数据将从 开始日期-向前取数据天数 开始取。考虑到节假日等，建议将此值得大一些","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"before_start_days","default":90}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.937000"},{"_id":"general_feature_zx_special.1","name":"general_feature_zx_special","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":true,"serviceversion":1,"friendly_name":"中信因子","category":"数据输出","arguments":"(instruments=, start_date='', end_date='', fields=None)","doc":"","desc":null,"doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"基础数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"证券代码列表","specific_type_name":"列表|DataSource","name":"instruments","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"开始日期，示例 2017-02-12，一般不需要指定，使用 证券代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，示例 2017-02-12，一般不需要指定，使用 证券代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":"Script","desc":"输入字段,表名+__+字段名,一行一个字段","specific_type_name":null,"language":"","default":null,"auto_complete_type":null,"type_code":"code","name":"fields"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.938000"},{"_id":"gpu_acceleration.1","name":"gpu_acceleration","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"GPU加速","category":"高级优化","arguments":"(run=, n_gpus=1, post_run=None, input_1=None, input_2=None, input_3=None, kwargs=None)","doc":"\n        利用GPU资源执行任意Python代码，支持缓存加速。此模块支持1-3个输入端和1-3个输出端。使用此模块，我们可以快速的自定义模块，并支持缓存加速和增量运算。对于需要较多计算资源 (比如运行时间超过10s) 或者存储资源 (比如生成较多或者较大的文件) 的程序，都用此模块封装。\n        ","desc":null,"doc_url":"https://bigquant.com/docs","interface":[{"type_name":null,"desc":"输出1，对应函数输出的 data_1","specific_type_name":null,"name":"data_1","optional":true,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输出2，对应函数输出的 data_2","specific_type_name":null,"name":"data_2","optional":true,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输出3，对应函数输出的 data_3","specific_type_name":null,"name":"data_3","optional":true,"type":"通用","type_code":"output_port"},{"type_name":"Script","desc":"主函数，返回Outputs对象","specific_type_name":"函数","language":"script.py","default":"# Python 代码入口函数，input_1/2/3 对应三个输入端，data_1/2/3 对应三个输出端\ndef bigquant_run(input_1, input_2, input_3):\n    import numpy as np\n    from timeit import default_timer as timer\n    from numba import vectorize\n\n\n    @vectorize(['float32(float32, float32)'], target='cuda')\n    def gpu_pow(a, b):\n        return a ** b\n\n\n    def cpu_pow(a, b, c):\n        for i in range(a.size):\n            c[i] = a[i] ** b[i]\n\n\n    vec_size = 100000000\n\n    a = b = np.array(np.random.sample(vec_size), dtype=np.float32)\n    gpu_result = np.zeros(vec_size, dtype=np.float32)\n    cpu_result = np.zeros(vec_size, dtype=np.float32)\n\n    start = timer()\n    cpu_pow(a, b, cpu_result)\n    duration = timer() - start\n    print('cpu_result:')\n    print(cpu_result)\n    print('cpu take time:', duration, 's')\n\n    start = timer()\n    gpu_result = gpu_pow(a, b)\n    duration = timer() - start\n    print('gpu_result:')\n    print(gpu_result)\n    print('gpu take time:', duration, 's')\n\n    cpu_result = DataSource.write_pickle(cpu_result)\n    gpu_result = DataSource.write_pickle(gpu_result)\n\n    return Outputs(data_1=cpu_result, data_2=gpu_result, data_3=None)\n","auto_complete_type":"python,history_data_fields,feature_fields,bigexpr_functions","type_code":"code","name":"run"},{"type_name":"Int","desc":"gpu个数，本模块使用的gpu个数，需要根据集群中单机最大可用gpu数来进行设置","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"n_gpus","default":1},{"type_name":"Script","desc":"后处理函数，输入是主函数的输出，此函数输出不会被缓存","specific_type_name":"函数","language":"script.py","default":"# 后处理函数，可选。输入是主函数的输出，可以在这里对数据做处理，或者返回更友好的outputs数据格式。此函数输出不会被缓存。\ndef bigquant_run(outputs):\n    return outputs\n","auto_complete_type":"python,history_data_fields,feature_fields,bigexpr_functions","type_code":"code","name":"post_run"},{"type_name":null,"desc":"输入1，传入到函数的参数 input_1","specific_type_name":null,"name":"input_1","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入2，传入到函数的参数 input_2","specific_type_name":null,"name":"input_2","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入3，传入到函数的参数 input_3","specific_type_name":null,"name":"input_3","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"doc","desc":"主函数参数，run的参数，如果函数接受参数 input_1/2/3，如上的 input_1/2/3也将被加入到此参数里。在可视化模式下，只有参数 input_1/2/3 可用。","specific_type_name":"字典","name":"kwargs","type_code":"doc","default":null}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.940000"},{"_id":"gpu_hyper_run.1","name":"gpu_hyper_run","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"策略图GPU加速","category":"高级优化","arguments":"(bq_graph_port=None, n_gpus=1, run_now=True, bq_graph=True)","doc":"\n    利用GPU资源运行，设置需要使用的GPU个数。\n\n    ","desc":"\n    利用GPU资源运行，设置需要使用的GPU个数。\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"结果","specific_type_name":null,"name":"result","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"graph，可以重写全局传入的graph","specific_type_name":null,"name":"bq_graph_port","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"gpu个数，本模块使用的gpu个数，需要根据集群中单机最大可用gpu数来进行设置","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"n_gpus","default":1},{"type_name":"Boolean","desc":"即时执行，如果不勾选，此模块不会即时执行，并将当前行为打包为graph传入到后续模块执行","specific_type_name":null,"type_code":"bool","name":"run_now","default":true},{"type_name":"Boolean","desc":"bq_graph，用于接收全局传入的graph，用户设置值无效","specific_type_name":null,"type_code":"bool","name":"bq_graph","default":true}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.951000"},{"_id":"gradient_boosting_classifier.1","name":"gradient_boosting_classifier","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"梯度提升树-分类","category":"机器学习\\分类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, loss='deviance', learning_rate=0.1, iterations=10, subsample=1.0, min_samples_per_leaf=1, max_depth=3, feature_fraction=1.0, key_cols='date,instrument', other_train_parameters={})","doc":"\n    梯度提升树-分类。\n    ","desc":"\n    梯度提升树-分类。\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定特征输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Enumerated","desc":"损失函数，对于分类模型，有对数似然损失函数deviance和指数损失函数exponential","specific_type_name":null,"values":["deviance","exponential"],"multi":false,"type_code":"choice","name":"loss","default":"deviance"},{"type_name":"Float","desc":"学习率，这个参数决定着每一个决策树对于最终结果的影响。GBM设定了初始的权重值之后，每一次树分类都会更新这个值，较小的值使得模型对不同的树更加稳健","specific_type_name":null,"min":0,"max":1.7976931348623157e+308,"type_code":"float","name":"learning_rate","default":0.1},{"type_name":"Int","desc":"树的数量，数量越大，则模型越复杂，学习能力越强，更有可能过拟合，需要更多的计算资源","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"iterations","default":10},{"type_name":"Float","desc":"训练每个决策树所用到的子样本占总样本的比例，稍小于1的值能够使模型更稳健，因为这样减少了方差","specific_type_name":null,"min":0,"max":1.0,"type_code":"float","name":"subsample","default":1.0},{"type_name":"Int","desc":"树中终点节点所需要的最少的样本数，也可以用来防止过度拟合","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"min_samples_per_leaf","default":1},{"type_name":"Int","desc":"树的最大深度，限制每棵树的最大深度，数值大拟合能力强，数值小泛化能力强","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"max_depth","default":3},{"type_name":"Float","desc":"特征使用率，寻找最佳分割时要考虑的特征比率，float类型，默认考虑所有特征数，即取值1.0","specific_type_name":null,"min":0,"max":1.0,"type_code":"float","name":"feature_fraction","default":1.0},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.953000"},{"_id":"gradient_boosting_regressor.1","name":"gradient_boosting_regressor","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"梯度提升树-回归","category":"机器学习\\回归","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, loss='ls', learning_rate=0.1, iterations=10, subsample=1.0, min_samples_per_leaf=1, max_depth=3, feature_fraction=1.0, key_cols='date,instrument', other_train_parameters={})","doc":"\n    梯度提升树-回归。\n\n    ","desc":"\n    梯度提升树-回归。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Enumerated","desc":"损失函数，对于分类模型，有对数似然损失函数deviance和指数损失函数exponential","specific_type_name":null,"values":["ls","lad","huber","quantile"],"multi":false,"type_code":"choice","name":"loss","default":"ls"},{"type_name":"Float","desc":"学习率，这个参数决定着每一个决策树对于最终结果的影响。GBM设定了初始的权重值之后，每一次树分类都会更新这个值，较小的值使得模型对不同的树更加稳健","specific_type_name":null,"min":0,"max":1.7976931348623157e+308,"type_code":"float","name":"learning_rate","default":0.1},{"type_name":"Int","desc":"树的数量，数量越大，则模型越复杂，学习能力越强，更有可能过拟合，需要更多的计算资源","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"iterations","default":10},{"type_name":"Float","desc":"训练每个决策树所用到的子样本占总样本的比例，稍小于1的值能够使模型更稳健，因为这样减少了方差","specific_type_name":null,"min":0,"max":1.0,"type_code":"float","name":"subsample","default":1.0},{"type_name":"Int","desc":"叶子节点最小样本数，int类型","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"min_samples_per_leaf","default":1},{"type_name":"Int","desc":"树的最大深度，限制每棵树的最大深度，数值大拟合能力强，数值小泛化能力强","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"max_depth","default":3},{"type_name":"Float","desc":"特征使用率，寻找最佳分割时要考虑的特征比率，float类型，默认考虑所有特征数，即取值1.0","specific_type_name":null,"min":0,"max":1.0,"type_code":"float","name":"feature_fraction","default":1.0},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.954000"},{"_id":"hftrade.1","name":"hftrade","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"HFTrade (高频 回测/模拟/实盘)","category":"回测与交易","arguments":"(start_date='', end_date='', instruments=None, initialize=None, before_trading_start=None, handle_tick=None, handle_data=None, handle_trade=None, handle_order=None, after_trading=None, history_ds=None, benchmark_ds=None, capital_base=1000000.0, frequency='minute', price_type='真实价格', product_type='股票', before_start_days='0', benchmark='000300.HIX', plot_charts=True, disable_cache=False, show_debug_info=False, backtest_only=False, options_data=None, options=None)","doc":"\n    高频交易模块\n    :param start_date: 开始日期，在实盘的时候，这个日期会被重写为交易日的日期\n    :param end_date: 结束日期，在实盘的时候，这个日期会被重写为交易日的日期\n    :param instruments: 代码列表，可选，也可以在通过在 initialize 里通过 context.instruments 设置\n    :param initialize: 初始化函数，initialize(context)\n    :param before_trading_start: 在每个交易日开始前的处理函数，before_trading_start(context, data: BarDatas)\n    :param handle_tick:  每个Tick快照行情处理函数， handle_tick(context, tick: TickData)\n    :param handle_data:  每个Bar行情的处理函数， handle_data(context, data: BarDatas)\n    :param handle_order: 每笔委托回报的处理函数， handle_order(context, data: OrderData)\n    :param handle_trade: 每笔成交回报的处理函数， handle_trade(context, data: TradeData)\n    :param after_trading:  每天交易盘后处理函数， after_trading(context, data: BarDatas)\n    :param capital_base: 回测初始资金，默认为 1000000\n    :param frequency: 数据频率，默认为 minute，也可以是 daily, tick 等\n    :param price_type: 复权类型 adjust_type，如 真实价格[real/none]，前复权[pre]，后复权[post]\n    :param product_type: 产品类型，如 stock/future/option等，一般不用指定或为Product.NONE，系统自动根据合约代码判断产品类型\n    :param benchmark: 基准指数，可以用股票代码\n    :param before_start_days: 历史数据向前取的天数，默认为0\n    :param plot_charts: 是否输出绩效图表\n    :param disable_cache: 是否禁用回测缓存历史数据\n    :param options: 其他参数从这里传入，可以在 handle_data 等函数里使用\n    ","desc":"\n    高频交易模块\n    :param start_date: 开始日期，在实盘的时候，这个日期会被重写为交易日的日期\n    :param end_date: 结束日期，在实盘的时候，这个日期会被重写为交易日的日期\n    :param instruments: 代码列表，可选，也可以在通过在 initialize 里通过 context.instruments 设置\n    :param initialize: 初始化函数，initialize(context)\n    :param before_trading_start: 在每个交易日开始前的处理函数，before_trading_start(context, data: BarDatas)\n    :param handle_tick:  每个Tick快照行情处理函数， handle_tick(context, tick: TickData)\n    :param handle_data:  每个Bar行情的处理函数， handle_data(context, data: BarDatas)\n    :param handle_order: 每笔委托回报的处理函数， handle_order(context, data: OrderData)\n    :param handle_trade: 每笔成交回报的处理函数， handle_trade(context, data: TradeData)\n    :param after_trading:  每天交易盘后处理函数， after_trading(context, data: BarDatas)\n    :param capital_base: 回测初始资金，默认为 1000000\n    :param frequency: 数据频率，默认为 minute，也可以是 daily, tick 等\n    :param price_type: 复权类型 adjust_type，如 真实价格[real/none]，前复权[pre]，后复权[post]\n    :param product_type: 产品类型，如 stock/future/option等，一般不用指定或为Product.NONE，系统自动根据合约代码判断产品类型\n    :param benchmark: 基准指数，可以用股票代码\n    :param before_start_days: 历史数据向前取的天数，默认为0\n    :param plot_charts: 是否输出绩效图表\n    :param disable_cache: 是否禁用回测缓存历史数据\n    :param options: 其他参数从这里传入，可以在 handle_data 等函数里使用\n    ","doc_url":"https://bigquant.com/wiki","interface":[{"type_name":null,"desc":"回测详细数据","specific_type_name":null,"name":"raw_perf","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"开始日期，设定值只在回测模式有效，在实盘模式下为当前日期，示例：2021-06-01。一般不需要指定，使用 代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，设定值只在回测模式有效，在实盘模式下为当前日期，示例：2021-06-01。一般不需要指定，使用 代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":null,"desc":"代码列表","specific_type_name":"列表|DataSource","name":"instruments","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Script","desc":"初始化函数，[回调函数] 初始化函数，整个回测中只在最开始时调用一次，用于初始化一些账户状态信息和策略基本参数，context也可以理解为一个全局变量，在回测中存放当前账户信息和策略基本参数便于会话。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：初始化函数，只执行一次\ndef bigquant_run(context):\n    # 加载预测数据\n    pass\n","auto_complete_type":"python","type_code":"code","name":"initialize"},{"type_name":"Script","desc":"盘前处理函数，[回调函数]  选择实现的函数，每个单位时间开始前调用一次，即每日开盘前调用一次。你的算法可以在该函数中进行一些数据处理计算，比如确定当天有交易信号的股票池。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：每个单位时间开盘前调用一次。\ndef bigquant_run(context, data):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"before_trading_start"},{"type_name":"Script","desc":"Tick处理函数，[回调函数] 选择实现的函数，该函数每个Tick会调用一次,。一般策略的交易逻辑和订单生成体现在该函数中。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：tick数据处理函数，每个tick执行一次\ndef bigquant_run(context, data):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"handle_tick"},{"type_name":"Script","desc":"K线处理函数，[回调函数] 选择实现的函数，该函数每个单位时间会调用一次, 如果按分钟,则每分钟调用一次。在交易中，可以通过对象data获取单只股票或多只股票的时间窗口价格数据。一般策略的交易逻辑和订单生成体现在该函数中。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：bar数据处理函数，每个时间单位执行一次\ndef bigquant_run(context, data):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"handle_data"},{"type_name":"Script","desc":"成交回报处理函数，[回调函数] 选择实现的函数，该函数在每个订单成交发生时会调用一次。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：成交回报处理函数，每个成交发生时执行一次\ndef bigquant_run(context, data):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"handle_trade"},{"type_name":"Script","desc":"委托回报处理函数，[回调函数] 选择实现的函数，该函数在每个订单状态变化时会调用一次。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：委托回报处理函数，每个委托变化时执行一次\ndef bigquant_run(context, data):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"handle_order"},{"type_name":"Script","desc":"盘后处理函数，[回调函数] 选择实现的函数，在当日交易结束后调用一次。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：盘后处理函数，每日盘后执行一次\ndef bigquant_run(context, data):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"after_trading"},{"type_name":null,"desc":"回测历史数据","specific_type_name":"DataSource","name":"history_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"基准数据，不影响回测结果","specific_type_name":"DataSource","name":"benchmark_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Float","desc":"初始资金","specific_type_name":null,"min":0,"max":1.7976931348623157e+308,"type_code":"float","name":"capital_base","default":1000000.0},{"type_name":"Enumerated","desc":"数据频率：日线 (daily)，分钟线 (minute)，快照（tick），逐笔（tick2）","specific_type_name":null,"values":["daily","minute","tick","tick2"],"multi":false,"type_code":"choice","name":"frequency","default":"minute"},{"type_name":"Enumerated","desc":"价格类型：前复权(forward_adjusted)，真实价格(original)，后复权(backward_adjusted)","specific_type_name":null,"values":["真实价格","前复权","后复权"],"multi":false,"type_code":"choice","name":"price_type","default":"真实价格"},{"type_name":"Enumerated","desc":"产品类型：股票(stock), 期货(future), 期权(option)","specific_type_name":null,"values":["股票","期货","期权"],"multi":false,"type_code":"choice","name":"product_type","default":"股票"},{"type_name":"String","desc":"历史数据向前取的天数，默认为0","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"before_start_days","default":"0"},{"type_name":"String","desc":"基准代码，不影响回测结果","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"benchmark","default":"000300.HIX"},{"type_name":"Boolean","desc":"显示回测结果图表","specific_type_name":null,"type_code":"bool","name":"plot_charts","default":true},{"type_name":"Boolean","desc":"是否禁用回测缓存数据","specific_type_name":null,"type_code":"bool","name":"disable_cache","default":false},{"type_name":"Boolean","desc":"是否输出调试信息","specific_type_name":null,"type_code":"bool","name":"show_debug_info","default":false},{"type_name":"Boolean","desc":"只在回测模式下运行：默认情况下，Trade会在回测和实盘模拟模式下都运行。不需要模拟或实盘时为 backtest_only=True 即可","specific_type_name":null,"type_code":"bool","name":"backtest_only","default":false},{"type_name":null,"desc":"其他输入数据：回测中用到的其他数据，比如预测数据、训练模型等。如果设定，在回测中通过 context.options['data'] 使用","specific_type_name":"DataSource","name":"options_data","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"doc","desc":"用户自定义数据，在回调函数中要用到的变量，需要从这里传入，并通过 context.options 使用","specific_type_name":"字典","name":"options","type_code":"doc","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.956000"},{"_id":"hftrade.2","name":"hftrade","version":2,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":2,"friendly_name":"HFTrade (高频 回测/模拟/实盘)","category":"回测与交易","arguments":"(start_date='', end_date='', instruments=None, initialize=None, before_trading_start=None, handle_tick=None, handle_data=None, handle_trade=None, handle_order=None, after_trading=None, options_data=None, history_ds=None, benchmark_ds=None, capital_base=1000000.0, frequency='minute', price_type='真实价格', product_type='股票', before_start_days='0', benchmark='000300.HIX', plot_charts=True, disable_cache=False, show_debug_info=False, backtest_only=False, options=None)","doc":"\n    高频交易模块\n    :param start_date: 开始日期，在实盘的时候，这个日期会被重写为交易日的日期\n    :param end_date: 结束日期，在实盘的时候，这个日期会被重写为交易日的日期\n    :param instruments: 代码列表，可选，也可以在通过在 initialize 里通过 context.instruments 设置\n    :param initialize: 初始化函数，initialize(context)\n    :param before_trading_start: 在每个交易日开始前的处理函数，before_trading_start(context, data: BarDatas)\n    :param handle_tick:  每个Tick快照行情处理函数， handle_tick(context, tick: TickData)\n    :param handle_data:  每个Bar行情的处理函数， handle_data(context, data: BarDatas)\n    :param handle_order: 每笔委托回报的处理函数， handle_order(context, data: OrderData)\n    :param handle_trade: 每笔成交回报的处理函数， handle_trade(context, data: TradeData)\n    :param after_trading:  每天交易盘后处理函数， after_trading(context, data: BarDatas)\n    :param capital_base: 回测初始资金，默认为 1000000\n    :param frequency: 数据频率，默认为 minute，也可以是 daily, tick 等\n    :param price_type: 复权类型 adjust_type，如 真实价格[real/none]，前复权[pre]，后复权[post]\n    :param product_type: 产品类型，如 stock/future/option等，一般不用指定或为Product.NONE，系统自动根据合约代码判断产品类型\n    :param benchmark: 基准指数，可以用股票代码\n    :param before_start_days: 历史数据向前取的天数，默认为0\n    :param plot_charts: 是否输出绩效图表\n    :param disable_cache: 是否禁用回测缓存历史数据\n    :param options: 其他参数从这里传入，可以在 handle_data 等函数里使用\n    ","desc":"\n    高频交易模块\n    :param start_date: 开始日期，在实盘的时候，这个日期会被重写为交易日的日期\n    :param end_date: 结束日期，在实盘的时候，这个日期会被重写为交易日的日期\n    :param instruments: 代码列表，可选，也可以在通过在 initialize 里通过 context.instruments 设置\n    :param initialize: 初始化函数，initialize(context)\n    :param before_trading_start: 在每个交易日开始前的处理函数，before_trading_start(context, data: BarDatas)\n    :param handle_tick:  每个Tick快照行情处理函数， handle_tick(context, tick: TickData)\n    :param handle_data:  每个Bar行情的处理函数， handle_data(context, data: BarDatas)\n    :param handle_order: 每笔委托回报的处理函数， handle_order(context, data: OrderData)\n    :param handle_trade: 每笔成交回报的处理函数， handle_trade(context, data: TradeData)\n    :param after_trading:  每天交易盘后处理函数， after_trading(context, data: BarDatas)\n    :param capital_base: 回测初始资金，默认为 1000000\n    :param frequency: 数据频率，默认为 minute，也可以是 daily, tick 等\n    :param price_type: 复权类型 adjust_type，如 真实价格[real/none]，前复权[pre]，后复权[post]\n    :param product_type: 产品类型，如 stock/future/option等，一般不用指定或为Product.NONE，系统自动根据合约代码判断产品类型\n    :param benchmark: 基准指数，可以用股票代码\n    :param before_start_days: 历史数据向前取的天数，默认为0\n    :param plot_charts: 是否输出绩效图表\n    :param disable_cache: 是否禁用回测缓存历史数据\n    :param options: 其他参数从这里传入，可以在 handle_data 等函数里使用\n    ","doc_url":"https://bigquant.com/wiki","interface":[{"type_name":null,"desc":"回测详细数据","specific_type_name":null,"name":"raw_perf","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"开始日期，设定值只在回测模式有效，在实盘模式下为当前日期，示例：2021-06-01。一般不需要指定，使用 代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，设定值只在回测模式有效，在实盘模式下为当前日期，示例：2021-06-01。一般不需要指定，使用 代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":null,"desc":"代码列表","specific_type_name":"列表|DataSource","name":"instruments","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Script","desc":"初始化函数，[回调函数] 初始化函数，整个回测中只在最开始时调用一次，用于初始化一些账户状态信息和策略基本参数，context也可以理解为一个全局变量，在回测中存放当前账户信息和策略基本参数便于会话。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：初始化函数，只执行一次\ndef bigquant_run(context):\n    # 加载预测数据\n    pass\n","auto_complete_type":"python","type_code":"code","name":"initialize"},{"type_name":"Script","desc":"盘前处理函数，[回调函数]  选择实现的函数，每个单位时间开始前调用一次，即每日开盘前调用一次。你的算法可以在该函数中进行一些数据处理计算，比如确定当天有交易信号的股票池。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：每个单位时间开盘前调用一次。\ndef bigquant_run(context, data):\n    # 盘前处理，订阅行情等\n    pass\n","auto_complete_type":"python","type_code":"code","name":"before_trading_start"},{"type_name":"Script","desc":"Tick处理函数，[回调函数] 选择实现的函数，该函数每个Tick会调用一次,。一般策略的交易逻辑和订单生成体现在该函数中。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：tick数据处理函数，每个tick执行一次\ndef bigquant_run(context, tick):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"handle_tick"},{"type_name":"Script","desc":"K线处理函数，[回调函数] 选择实现的函数，该函数每个单位时间会调用一次, 如果按分钟,则每分钟调用一次。在交易中，可以通过对象data获取单只股票或多只股票的时间窗口价格数据。一般策略的交易逻辑和订单生成体现在该函数中。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：bar数据处理函数，每个时间单位执行一次\ndef bigquant_run(context, data):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"handle_data"},{"type_name":"Script","desc":"成交回报处理函数，[回调函数] 选择实现的函数，该函数在每个订单成交发生时会调用一次。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：成交回报处理函数，每个成交发生时执行一次\ndef bigquant_run(context, trade):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"handle_trade"},{"type_name":"Script","desc":"委托回报处理函数，[回调函数] 选择实现的函数，该函数在每个订单状态变化时会调用一次。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：委托回报处理函数，每个委托变化时执行一次\ndef bigquant_run(context, order):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"handle_order"},{"type_name":"Script","desc":"盘后处理函数，[回调函数] 选择实现的函数，在当日交易结束后调用一次。","specific_type_name":"函数","language":"script.py","default":"# 交易引擎：盘后处理函数，每日盘后执行一次\ndef bigquant_run(context, data):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"after_trading"},{"type_name":null,"desc":"其他输入数据：回测中用到的其他数据，比如预测数据、训练模型等。如果设定，在回测中通过 context.options['data'] 使用","specific_type_name":"DataSource","name":"options_data","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"回测历史数据","specific_type_name":"DataSource","name":"history_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"基准数据，不影响回测结果","specific_type_name":"DataSource","name":"benchmark_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Float","desc":"初始资金","specific_type_name":null,"min":0,"max":1.7976931348623157e+308,"type_code":"float","name":"capital_base","default":1000000.0},{"type_name":"Enumerated","desc":"数据频率：日线 (daily)，分钟线 (minute)，快照（tick），逐笔（tick2）","specific_type_name":null,"values":["daily","minute","tick","tick2"],"multi":false,"type_code":"choice","name":"frequency","default":"minute"},{"type_name":"Enumerated","desc":"价格类型：前复权(forward_adjusted)，真实价格(original)，后复权(backward_adjusted)","specific_type_name":null,"values":["真实价格","前复权","后复权"],"multi":false,"type_code":"choice","name":"price_type","default":"真实价格"},{"type_name":"Enumerated","desc":"产品类型：股票(stock), 期货(future), 期权(option), 股票(fund), 可转债(conbond), 自动(none)","specific_type_name":null,"values":["股票","期货","期权","基金","可转债","自动"],"multi":false,"type_code":"choice","name":"product_type","default":"股票"},{"type_name":"String","desc":"历史数据向前取的天数，默认为0","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"before_start_days","default":"0"},{"type_name":"String","desc":"基准代码，不影响回测结果","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"benchmark","default":"000300.HIX"},{"type_name":"Boolean","desc":"显示回测结果图表","specific_type_name":null,"type_code":"bool","name":"plot_charts","default":true},{"type_name":"Boolean","desc":"是否禁用回测缓存数据","specific_type_name":null,"type_code":"bool","name":"disable_cache","default":false},{"type_name":"Boolean","desc":"是否输出调试信息","specific_type_name":null,"type_code":"bool","name":"show_debug_info","default":false},{"type_name":"Boolean","desc":"只在回测模式下运行：默认情况下，Trade会在回测和实盘模拟模式下都运行。不需要模拟或实盘时为 backtest_only=True 即可","specific_type_name":null,"type_code":"bool","name":"backtest_only","default":false},{"type_name":"doc","desc":"用户自定义数据，在回调函数中要用到的变量，需要从这里传入，并通过 context.options 使用","specific_type_name":"字典","name":"options","type_code":"doc","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.958000"},{"_id":"hyper_parameter_search.1","name":"hyper_parameter_search","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"超参搜索","category":"高级优化","arguments":"(param_grid_builder=None, scoring=None, search_algorithm='网格搜索', search_iterations=10, random_state=None, workers=1, worker_distributed_run=True, worker_silent=True, bq_graph_port=None, input_1=None, input_2=None, input_3=None, run_now=True, bq_graph=True)","doc":"\n    设置超参数范围和评分函数，自动进行网格搜索。\n    ","desc":"\n    设置超参数范围和评分函数，自动进行网格搜索。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"结果","specific_type_name":null,"name":"result","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Script","desc":"超参数输入，构建需要搜索的超参数列表","specific_type_name":"函数","language":"script.py","default":"def bigquant_run():\n    param_grid = {}\n\n    # 在这里设置需要调优的参数备选\n    # param_grid['m3.features'] = ['close_1/close_0', 'close_2/close_0\\nclose_3/close_0']\n    # param_grid['m6.number_of_trees'] = [5, 10, 20]\n\n    return param_grid\n","auto_complete_type":"python","type_code":"code","name":"param_grid_builder"},{"type_name":"Script","desc":"评分函数","specific_type_name":"函数","language":"script.py","default":"def bigquant_run(result):\n    score = result.get('m19').read_raw_perf()['sharpe'].tail(1)[0]\n\n    return {'score': score}\n","auto_complete_type":"python","type_code":"code","name":"scoring"},{"type_name":"Enumerated","desc":"参数搜索算法","specific_type_name":null,"values":["网格搜索","随机搜索"],"multi":false,"type_code":"choice","name":"search_algorithm","default":"网格搜索"},{"type_name":"Int","desc":"搜索迭代次数，用于随机搜索","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"search_iterations","default":10},{"type_name":"Int","desc":"随机数种子，用于随机搜索，不填则默认使用np.random","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"random_state","default":null},{"type_name":"Int","desc":"并行运行作业数，会员可以使用更多的并行作业，请联系微信客服 bigq100 开通","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Boolean","desc":"作业分布式运行，在集群里分布式运行参数搜索作业","specific_type_name":null,"type_code":"bool","name":"worker_distributed_run","default":true},{"type_name":"Boolean","desc":"不显示作业日志，如果作业日志太多，可以选择不显示","specific_type_name":null,"type_code":"bool","name":"worker_silent","default":true},{"type_name":null,"desc":"graph，可以重写全局传入的graph","specific_type_name":null,"name":"bq_graph_port","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入1，run函数参数inputs的第1个元素","specific_type_name":null,"name":"input_1","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入2，run函数参数inputs的第2个元素","specific_type_name":null,"name":"input_2","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入3，run函数参数inputs的第3个元素","specific_type_name":null,"name":"input_3","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Boolean","desc":"即时执行，如果不勾选，此模块不会即时执行，而是将当前行为打包为graph传入到后续模块执行","specific_type_name":null,"type_code":"bool","name":"run_now","default":true},{"type_name":"Boolean","desc":"bq_graph，用于接收全局传入的graph，用户设置值无效","specific_type_name":null,"type_code":"bool","name":"bq_graph","default":true}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.959000"},{"_id":"hyper_rolling_train.1","name":"hyper_rolling_train","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"滚动训练","category":"高级优化","arguments":"(bq_graph_port=None, input_1=None, input_2=None, input_3=None, run=None, run_now=True, bq_graph=True)","doc":"\n    滚动训练模块可以实现训练集和测试集的定期更新轮换。在金融市场中，市场结构是时常变化的，因此模型需要不断训练，这也是滚动训练的出发点。一般而言，是随着时间的推移按固定的时间定期训练模型，比如训练集为2年时间，预测集为1年，模型更新时间为1年。那么由2010-2011年的数据训练出的模型在2012年数据上预测，由2011-2012年训练的模型在2013年数据上预测，依次类推，最后把每次预测的数据拼接起来，进行回测验证。\n    ","desc":"\n    滚动训练模块可以实现训练集和测试集的定期更新轮换。在金融市场中，市场结构是时常变化的，因此模型需要不断训练，这也是滚动训练的出发点。一般而言，是随着时间的推移按固定的时间定期训练模型，比如训练集为2年时间，预测集为1年，模型更新时间为1年。那么由2010-2011年的数据训练出的模型在2012年数据上预测，由2011-2012年训练的模型在2013年数据上预测，依次类推，最后把每次预测的数据拼接起来，进行回测验证。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"结果","specific_type_name":null,"name":"result","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"graph，可以重写全局传入的graph","specific_type_name":null,"name":"bq_graph_port","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入1，run函数参数inputs的第1个元素","specific_type_name":null,"name":"input_1","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入1，run函数参数inputs的第2个元素","specific_type_name":null,"name":"input_2","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入1，run函数参数inputs的第3个元素","specific_type_name":null,"name":"input_3","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Script","desc":"run函数","specific_type_name":"函数","language":"script.py","default":"def bigquant_run(\n    bq_graph,\n    inputs,\n    trading_days_market='CN', # 使用那个市场的交易日历, TODO\n    train_instruments_mid='m1', # 训练数据 证券代码列表 模块id\n    test_instruments_mid='m9', # 测试数据 证券代码列表 模块id\n    predict_mid='m8', # 预测 模块id\n    trade_mid='m19', # 回测 模块id\n    start_date='2014-01-01', # 数据开始日期\n    end_date=T.live_run_param('trading_date', '2017-01-01'), # 数据结束日期\n    train_update_days=250, # 更新周期，按交易日计算，每多少天更新一次\n    train_update_days_for_live=None, #模拟实盘模式下的更新周期，按交易日计算，每多少天更新一次。如果需要在模拟实盘阶段使用不同的模型更新周期，可以设置这个参数\n    train_data_min_days=250, # 最小数据天数，按交易日计算，所以第一个滚动的结束日期是 从开始日期到开始日期+最小数据天数\n    train_data_max_days=250, # 最大数据天数，按交易日计算，0，表示没有限制，否则每一个滚动的开始日期=max(此滚动的结束日期-最大数据天数, 开始日期\n    rolling_count_for_live=1, #实盘模式下滚动次数，模拟实盘模式下，取最后多少次滚动。一般在模拟实盘模式下，只用到最后一次滚动训练的模型，这里可以设置为1；如果你的滚动训练数据时间段很短，以至于期间可能没有训练数据，这里可以设置大一点。0表示没有限制\n):\n    def merge_datasources(input_1):\n        df_list = [ds[0].read_df().set_index('date').loc[ds[1]:].reset_index() for ds in input_1]\n        df = pd.concat(df_list)\n        instrument_data = {\n            'start_date': df['date'].min().strftime('%Y-%m-%d'),\n            'end_date': df['date'].max().strftime('%Y-%m-%d'),\n            'instruments': list(set(df['instrument'])),\n        }\n        return Outputs(data=DataSource.write_df(df), instrument_data=DataSource.write_pickle(instrument_data))\n\n    def gen_rolling_dates(trading_days_market, start_date, end_date, train_update_days, train_update_days_for_live, train_data_min_days, train_data_max_days, rolling_count_for_live):\n        # 是否实盘模式\n        tdays = list(D.trading_days(market=trading_days_market, start_date=start_date, end_date=end_date)['date'])\n        is_live_run = T.live_run_param('trading_date', None) is not None\n\n        if is_live_run and train_update_days_for_live:\n            train_update_days = train_update_days_for_live\n\n        rollings = []\n        train_end_date = train_data_min_days\n        while train_end_date < len(tdays):\n            if train_data_max_days is not None and train_data_max_days > 0:\n                train_start_date = max(train_end_date - train_data_max_days, 0)\n            else:\n                train_start_date = 0\n            rollings.append({\n                'train_start_date': tdays[train_start_date].strftime('%Y-%m-%d'),\n                'train_end_date': tdays[train_end_date - 1].strftime('%Y-%m-%d'),\n                'test_start_date': tdays[train_end_date].strftime('%Y-%m-%d'),\n                'test_end_date': tdays[min(train_end_date + train_update_days, len(tdays)) - 1].strftime('%Y-%m-%d'),\n            })\n            train_end_date += train_update_days\n\n        if not rollings:\n            raise Exception('没有滚动需要执行，请检查配置')\n\n        if is_live_run and rolling_count_for_live:\n            rollings = rollings[-rolling_count_for_live:]\n\n        return rollings\n\n    g = bq_graph\n\n    rolling_dates = gen_rolling_dates(\n        trading_days_market, start_date, end_date, train_update_days, train_update_days_for_live, train_data_min_days, train_data_max_days, rolling_count_for_live)\n\n    # 训练和预测\n    results = []\n    for rolling in rolling_dates:\n        parameters = {}\n        # 先禁用回测\n        parameters[trade_mid + '.__enabled__'] = False\n        parameters[train_instruments_mid + '.start_date'] = rolling['train_start_date']\n        parameters[train_instruments_mid + '.end_date'] = rolling['train_end_date']\n        parameters[test_instruments_mid + '.start_date'] = rolling['test_start_date']\n        parameters[test_instruments_mid + '.end_date'] = rolling['test_end_date']\n        # print('------ rolling_train:', parameters)\n        results.append(g.run(parameters))\n\n    # 合并预测结果并回测\n    mx = M.cached.v3(run=merge_datasources, input_1=[[result[predict_mid].predictions, result[test_instruments_mid].data.read_pickle()['start_date']] for result in results])\n    parameters = {}\n    parameters['*.__enabled__'] = False\n    parameters[trade_mid + '.__enabled__'] = True\n    parameters[trade_mid + '.instruments'] = mx.instrument_data\n    parameters[trade_mid + '.options_data'] = mx.data\n\n    trade = g.run(parameters)\n\n    return {'rollings': results, 'trade': trade}\n","auto_complete_type":"python","type_code":"code","name":"run"},{"type_name":"Boolean","desc":"即时执行，如果不勾选，此模块不会即时执行，并将当前行为打包为graph传入到后续模块执行","specific_type_name":null,"type_code":"bool","name":"run_now","default":true},{"type_name":"Boolean","desc":"bq_graph，用于接收全局传入的graph，用户设置值无效","specific_type_name":null,"type_code":"bool","name":"bq_graph","default":true}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.961000"},{"_id":"hyper_run.1","name":"hyper_run","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"自定义运行","category":"高级优化","arguments":"(bq_graph_port=None, input_1=None, input_2=None, input_3=None, run=None, run_now=True, bq_graph=True)","doc":"\n    自定义运行，可以在这里批量设置参数，批量运行，比如对某因子池进行单个因子验证，比如对训练模块学习率在某个范围按一定步长单个测试验证。该模块也可结合超参数调优、滚动训练等场景使用。\n\n    ","desc":"\n    自定义运行，可以在这里批量设置参数，批量运行，比如对某因子池进行单个因子验证，比如对训练模块学习率在某个范围按一定步长单个测试验证。该模块也可结合超参数调优、滚动训练等场景使用。\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"结果","specific_type_name":null,"name":"result","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"graph，可以重写全局传入的graph","specific_type_name":null,"name":"bq_graph_port","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入1，run函数参数inputs的第1个元素","specific_type_name":null,"name":"input_1","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入2，run函数参数inputs的第2个元素","specific_type_name":null,"name":"input_2","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入3，run函数参数inputs的第3个元素","specific_type_name":null,"name":"input_3","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Script","desc":"run函数","specific_type_name":"函数","language":"script.py","default":"def bigquant_run(bq_graph, inputs):\n    features =['pe_ttm_0', 'shift(close_0,5)/close_0','mean(close_0,10)/close_0']\n\n    parameters_list = []\n     \n    for feature in features:\n        parameters = {'m3.features':feature}\n        parameters_list.append({'parameters': parameters})\n\n    def run(parameters):\n        try:\n            print(parameters)\n            return g.run(parameters)\n        except Exception as e:\n            print('ERROR --------', e)\n            return None\n        \n    results = T.parallel_map(run, parameters_list, max_workers=2, remote_run=True, silent=True)\n\n    return results\n","auto_complete_type":"python","type_code":"code","name":"run"},{"type_name":"Boolean","desc":"即时执行，如果不勾选，此模块不会即时执行，并将当前行为打包为graph传入到后续模块执行","specific_type_name":null,"type_code":"bool","name":"run_now","default":true},{"type_name":"Boolean","desc":"bq_graph，用于接收全局传入的graph，用户设置值无效","specific_type_name":null,"type_code":"bool","name":"bq_graph","default":true}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.962000"},{"_id":"index_futures.1","name":"index_futures","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"股指数据获取","category":"数据输入输出","arguments":"(index_code='IF', start_date='', end_date='', period='1T')","doc":"\n        股指数据获取\n        ","desc":null,"doc_url":"","interface":[{"type_name":null,"desc":"股指数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Enumerated","desc":"股指代码","specific_type_name":null,"values":["IF","IC","IH"],"multi":false,"type_code":"choice","name":"index_code","default":"IF"},{"type_name":"String","desc":"开始日期，示例 2017-02-12，一般不需要指定","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，示例 2017-02-12，一般不需要指定","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":"Enumerated","desc":"k线周期","specific_type_name":null,"values":["1T","5T","10T","30T"],"multi":false,"type_code":"choice","name":"period","default":"1T"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.963000"},{"_id":"input_features.1","name":"input_features","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":true,"serviceversion":1,"friendly_name":"输入特征列表","category":"数据输入输出","arguments":"(features=, features_ds=None)","doc":"\n\n 输入特征（因子）数据\n\n    ","desc":"\n\n 输入特征（因子）数据\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"Script","desc":"特征数据","specific_type_name":null,"language":"","default":"\n# #号开始的表示注释，注释需单独一行\n# 多个特征，每行一个，可以包含基础特征和衍生特征，特征须为本平台特征\nreturn_5\nreturn_10\nreturn_20\navg_amount_0/avg_amount_5\navg_amount_5/avg_amount_20\nrank_avg_amount_0/rank_avg_amount_5\nrank_avg_amount_5/rank_avg_amount_10\nrank_return_0\nrank_return_5\nrank_return_10\nrank_return_0/rank_return_5\nrank_return_5/rank_return_10\npe_ttm_0\n","auto_complete_type":"feature_fields,bigexpr_functions","type_code":"code","name":"features"},{"type_name":null,"desc":"特征输入，通过输入端和参数方式输入的特征将做合并","specific_type_name":null,"name":"features_ds","optional":true,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.965000"},{"_id":"instruments.2","name":"instruments","version":2,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":true,"serviceversion":2,"friendly_name":"代码列表","category":"数据输入输出","arguments":"(rolling_conf=None, start_date='', end_date='', market='CN_STOCK_A', instrument_list=None, max_count=0)","doc":"\n\n\n 获取指定市场和指定时间区间有效的代码列表\n\n\n    ","desc":"\n\n\n 获取指定市场和指定时间区间有效的代码列表\n\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"滚动训练参数，如果指定，将覆盖参数开始日期和结束日期","specific_type_name":null,"name":"rolling_conf","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"开始日期，示例 2017-01-01","specific_type_name":null,"can_set_liverun_param":true,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，示例 2017-01-01","specific_type_name":null,"can_set_liverun_param":true,"type_code":"str","name":"end_date","default":""},{"type_name":"Enumerated","desc":"交易市场，见文档[交易市场](https://bigquant.com/docs/develop/datasource/deprecated/trading_market.html)","specific_type_name":null,"values":["CN_STOCK_A","CN_FUND","CN_FUTURE","CN_CONBOND"],"multi":false,"type_code":"choice","name":"market","default":"CN_STOCK_A"},{"type_name":"Script","desc":"代码列表，每行一个，如果指定，market参数将被忽略","specific_type_name":null,"language":"","default":null,"auto_complete_type":"stocks","type_code":"code","name":"instrument_list"},{"type_name":"Int","desc":"最大数量，0表示没有限制，一般用于在小数据上测试和调试问题","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"max_count","default":0}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.994000"},{"_id":"instruments_vx1.1","name":"instruments_vx1","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":true,"serviceversion":1,"friendly_name":"证券代码列表","category":"数据输入输出","arguments":"(rolling_conf=None, start_date='', end_date='', market='CN_STOCK_A', instrument_list=None, max_count=0)","doc":"\n\n\n 获取指定市场和指定时间区间有效的证券代码列表\n\n\n    ","desc":"\n\n\n 获取指定市场和指定时间区间有效的证券代码列表\n\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"证券数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"滚动训练参数，如果指定，将覆盖参数开始日期和结束日期","specific_type_name":null,"name":"rolling_conf","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"开始日期，示例 2017-01-01","specific_type_name":null,"can_set_liverun_param":true,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，示例 2017-01-01","specific_type_name":null,"can_set_liverun_param":true,"type_code":"str","name":"end_date","default":""},{"type_name":"Enumerated","desc":"交易市场，见文档　https://bigquant.com/docs/develop/datasource/deprecated/trading_market.html","specific_type_name":null,"values":["CN_STOCK_A","CN_FUND","CN_FUTURE","US_STOCK","HK_STOCK"],"multi":false,"type_code":"choice","name":"market","default":"CN_STOCK_A"},{"type_name":"Script","desc":"股票代码列表，每行一个，如果指定，market参数将被忽略","specific_type_name":null,"language":"","default":null,"auto_complete_type":"stocks","type_code":"code","name":"instrument_list"},{"type_name":"Int","desc":"最大数量，0表示没有限制，一般用于在小数据上测试和调试问题","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"max_count","default":0}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.996000"},{"_id":"join.3","name":"join","version":3,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":3,"friendly_name":"连接数据","category":"数据处理","arguments":"(data1=, data2=, on='date,instrument', how='inner', sort=False)","doc":"\n        连接两个DataSource (数据内容DataFrame)，按列进行横向连接\n        ","desc":null,"doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"连接后的数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"第一个输入数据","specific_type_name":"DataSource","name":"data1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"第二个输入数据","specific_type_name":"DataSource","name":"data2","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"关联列，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"on","default":"date,instrument"},{"type_name":"Enumerated","desc":"连接方式","specific_type_name":null,"values":["left","right","outer","inner"],"multi":false,"type_code":"choice","name":"how","default":"inner"},{"type_name":"Boolean","desc":"对结果排序","specific_type_name":null,"type_code":"bool","name":"sort","default":false}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:11.997000"},{"_id":"kneighbors_classifier.1","name":"kneighbors_classifier","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"k近邻-分类","category":"机器学习\\分类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, n_neighbors=5, weights='uniform', algorithm='auto', leaf_size=30, metric='minkowski', key_cols='date,instrument', workers=1, other_train_parameters={})","doc":"\n    用于分类\n    ","desc":"\n    用于分类\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"近邻数，int类型，可选参数，默认值为5","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"n_neighbors","default":5},{"type_name":"Enumerated","desc":"K近邻权重类型，用于预测。默认值为uniform","specific_type_name":null,"values":["uniform","distance"],"multi":false,"type_code":"choice","name":"weights","default":"uniform"},{"type_name":"Enumerated","desc":"计算分类使用的算法，可选参数，ball_tree为算法BallTree，kd_tree为KDTree，brute使用暴力搜索，auto基于传入内容使用合适算法。默认值为auto","specific_type_name":null,"values":["ball_tree","kd_tree","brute","auto"],"multi":false,"type_code":"choice","name":"algorithm","default":"auto"},{"type_name":"Int","desc":"BallTree或者KDTree算法的叶子数量，int类型，可选参数，此参数会影响构建、查询BallTree或者KDTree的速度，以及存储BallTree或KDTree所需要的内存大小。默认值30","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"leaf_size","default":30},{"type_name":"Enumerated","desc":"距离度量，默认为minkowski，也称欧式距离","specific_type_name":null,"values":["braycurtis","canberra","chebyshev","cityblock","correlation","cosine","dice","euclidean","hamming","haversine","infinity","jaccard","kulsinski","l1","l2","mahalanobis","manhattan","matching","minkowski","p","precomputed","pyfunc","rogerstanimoto","russellrao","seuclidean","sokalmichener","sokalsneath","sqeuclidean","wminkowski","yule"],"multi":false,"type_code":"choice","name":"metric","default":"minkowski"},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Int","desc":"并行作业数，同时使用多少个进程进行计算，默认是1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.002000"},{"_id":"kneighbors_regressor.1","name":"kneighbors_regressor","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"k近邻-回归","category":"机器学习\\回归","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, n_neighbors=5, weights='uniform', algorithm='auto', leaf_size=30, metric='minkowski', key_cols='date,instrument', workers=1, other_train_parameters={})","doc":"\n    用于回归\n    ","desc":"\n    用于回归\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"近邻数，int类型，可选参数，默认值为5","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"n_neighbors","default":5},{"type_name":"Enumerated","desc":"K近邻权重类型，用于预测。默认值为uniform","specific_type_name":null,"values":["uniform","distance"],"multi":false,"type_code":"choice","name":"weights","default":"uniform"},{"type_name":"Enumerated","desc":"计算分类使用的算法，可选参数，ball_tree为算法BallTree，kd_tree为KDTree，brute使用暴力搜索，auto基于传入内容使用合适算法。默认值为auto","specific_type_name":null,"values":["ball_tree","kd_tree","brute","auto"],"multi":false,"type_code":"choice","name":"algorithm","default":"auto"},{"type_name":"Int","desc":"BallTree或者KDTree算法的叶子数量，int类型，可选参数，此参数会影响构建、查询BallTree或者KDTree的速度，以及存储BallTree或KDTree所需要的内存大小。默认值30","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"leaf_size","default":30},{"type_name":"Enumerated","desc":"距离度量，默认为minkowski，也称欧式距离","specific_type_name":null,"values":["braycurtis","canberra","chebyshev","cityblock","correlation","cosine","dice","euclidean","hamming","haversine","infinity","jaccard","kulsinski","l1","l2","mahalanobis","manhattan","matching","minkowski","p","precomputed","pyfunc","rogerstanimoto","russellrao","seuclidean","sokalmichener","sokalsneath","sqeuclidean","wminkowski","yule"],"multi":false,"type_code":"choice","name":"metric","default":"minkowski"},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Int","desc":"并行作业数，同时使用多少个进程进行计算，默认是1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.006000"},{"_id":"linear_regression.1","name":"linear_regression","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"线性-回归","category":"机器学习\\回归","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, fit_intercept=True, normalize=False, key_cols='date,instrument', workers=1, other_train_parameters={})","doc":"\n    线性回归模型。\n    ","desc":"\n    线性回归模型。\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要特征指定输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Boolean","desc":"是否计算该模型的截距","specific_type_name":null,"type_code":"bool","name":"fit_intercept","default":true},{"type_name":"Boolean","desc":"回归X是否被规范化，如果为True，回归X被规范化","specific_type_name":null,"type_code":"bool","name":"normalize","default":false},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Int","desc":"并行作业数，同时使用多少个进程进行计算，默认是1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.009000"},{"_id":"linear_sgd_classifier.1","name":"linear_sgd_classifier","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"线性随机梯度下降-分类","category":"机器学习\\分类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, loss='log', penalty='l2', alpha=0.0001, max_iter=5, shuffle=True, eta0=0.1, key_cols='date,instrument', other_train_parameters={})","doc":"\n    线性随机梯度下降算法，用于分类。\n    ","desc":"\n    线性随机梯度下降算法，用于分类。\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要特征指定输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Enumerated","desc":"损失函数","specific_type_name":null,"values":["log","modified_huber"],"multi":false,"type_code":"choice","name":"loss","default":"log"},{"type_name":"Enumerated","desc":"正则类型","specific_type_name":null,"values":["l1","I2","elasticnet"],"multi":false,"type_code":"choice","name":"penalty","default":"l2"},{"type_name":"Float","desc":"L2 惩罚项(正则项) 参数","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"alpha","default":0.0001},{"type_name":"Int","desc":"最大迭代次数","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"max_iter","default":5},{"type_name":"Boolean","desc":"是否先随机打乱","specific_type_name":null,"type_code":"bool","name":"shuffle","default":true},{"type_name":"Float","desc":"初始学习率","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"eta0","default":0.1},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.010000"},{"_id":"linear_sgd_regressor.1","name":"linear_sgd_regressor","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"线性随机梯度下降-回归","category":"机器学习\\回归","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, loss='huber', penalty='l2', alpha=0.0001, max_iter=5, shuffle=True, eta0=0.1, key_cols='date,instrument', other_train_parameters={})","doc":"\n    线性随机梯度下降算法，用于回归。\n    ","desc":"\n    线性随机梯度下降算法，用于回归。\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要特征指定输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Enumerated","desc":"损失函数","specific_type_name":null,"values":["squared_loss","huber","epsilon_insensitive","squared_epsilon_insensitive"],"multi":false,"type_code":"choice","name":"loss","default":"huber"},{"type_name":"Enumerated","desc":"正则类型","specific_type_name":null,"values":["l1","I2","elasticnet"],"multi":false,"type_code":"choice","name":"penalty","default":"l2"},{"type_name":"Float","desc":"L2 惩罚项(正则项) 参数","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"alpha","default":0.0001},{"type_name":"Int","desc":"最大迭代次数","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"max_iter","default":5},{"type_name":"Boolean","desc":"是否先随机打乱","specific_type_name":null,"type_code":"bool","name":"shuffle","default":true},{"type_name":"Float","desc":"初始学习率","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"eta0","default":0.1},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.012000"},{"_id":"logistic_regression.1","name":"logistic_regression","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"线性-分类","category":"机器学习\\分类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, penalty='l2', dual=False, fit_intercept=True, tol=0.0001, C=1.0, key_cols='date,instrument', workers=1, other_train_parameters={})","doc":"\n\n逻辑斯蒂回归。\n\n    ","desc":"\n\n逻辑斯蒂回归。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Enumerated","desc":"指定惩罚项中使用的规范","specific_type_name":null,"values":["l1","l2"],"multi":false,"type_code":"choice","name":"penalty","default":"l2"},{"type_name":"Boolean","desc":"对偶或原始方法，bool类型，默认为False。对偶方法只用在求解线性多核(liblinear)的L2惩罚项上。当样本数量>样本特征的时候，dual通常设置为False","specific_type_name":null,"type_code":"bool","name":"dual","default":false},{"type_name":"Boolean","desc":"是否存在截距或偏差，默认为True","specific_type_name":null,"type_code":"bool","name":"fit_intercept","default":true},{"type_name":"Float","desc":"停止求解的标准","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"tol","default":0.0001},{"type_name":"Float","desc":"正则化系数λ的倒数","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"C","default":1.0},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Int","desc":"并行作业数，同时使用多少个进程进行计算，默认是1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.014000"},{"_id":"metrics_classification.1","name":"metrics_classification","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"分类-评估","category":"模型评估","arguments":"(predictions=, kwargs=)","doc":"\n    分类评估。输入模型结果，输出评估结果：精准率-召回率曲线、ROC-AUC、常用指标、准确率与错误率、混淆矩阵。\n    ","desc":"\n    分类评估。输入模型结果，输出评估结果：精准率-召回率曲线、ROC-AUC、常用指标、准确率与错误率、混淆矩阵。\n    ","doc_url":"","interface":[{"type_name":null,"desc":"评估报告","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，提供模型预测出的分类及分类对应概率","specific_type_name":"DataSource","name":"predictions","optional":false,"type":"通用","type_code":"input_port"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.015000"},{"_id":"metrics_regression.1","name":"metrics_regression","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"回归-评估","category":"模型评估","arguments":"(predictions=None, explained_variance_score=True, mean_absolute_error=True, mean_squared_error=True, mean_squared_log_error=True, median_absolute_error=True, r2_score=True)","doc":"\n    回归评估。输入模型结果，输出对于回归的评估结果。具体评估标准包括R2，MSE，MAE等。\n\n    ","desc":"\n    回归评估。输入模型结果，输出对于回归的评估结果。具体评估标准包括R2，MSE，MAE等。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"评估报告","specific_type_name":null,"name":"report","optional":true,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，提供模型预测出的分类及分类对应概率","specific_type_name":"DataSource","name":"predictions","optional":false,"type":"通用","type_code":"input_port","default":null},{"type_name":"Boolean","desc":"可解释方差权重，","specific_type_name":null,"type_code":"bool","name":"explained_variance_score","default":true},{"type_name":"Boolean","desc":"平均绝对误差","specific_type_name":null,"type_code":"bool","name":"mean_absolute_error","default":true},{"type_name":"Boolean","desc":"均方误差权重","specific_type_name":null,"type_code":"bool","name":"mean_squared_error","default":true},{"type_name":"Boolean","desc":"均方对数误差权重","specific_type_name":null,"type_code":"bool","name":"mean_squared_log_error","default":true},{"type_name":"Boolean","desc":"均方绝对误差","specific_type_name":null,"type_code":"bool","name":"median_absolute_error","default":true},{"type_name":"Boolean","desc":"确定系数(r^2)权重，列表类型","specific_type_name":null,"type_code":"bool","name":"r2_score","default":true}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.016000"},{"_id":"mlp_classifier.1","name":"mlp_classifier","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"多层感知器-分类","category":"机器学习\\分类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, hidden_layer_sizes='100', activation='relu', solver='adam', alpha=0.0001, batch_size=200, learning_rate_init=0.001, max_iter=200, key_cols='date,instrument', other_train_parameters={})","doc":"\n    用于分类的机器学习算法。多层感知器（Multilayer Perceptron,缩写MLP）是一种前向结构的人工神经网络，映射一组输入向量到一组输出向量。可用于线性不可分数据。\n    ","desc":"\n    用于分类的机器学习算法。多层感知器（Multilayer Perceptron,缩写MLP）是一种前向结构的人工神经网络，映射一组输入向量到一组输出向量。可用于线性不可分数据。\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要特征指定输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"输入该隐藏层的神经元个数，用英文逗号(,)分隔的整数元组，例如 100,100，表示有两层隐藏层，第一层隐藏层有100个神经元，第二层也有100个神经元","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"hidden_layer_sizes","default":"100"},{"type_name":"Enumerated","desc":"隐藏层的激活函数类型","specific_type_name":null,"values":["identity","logistic","tanh","relu"],"multi":false,"type_code":"choice","name":"activation","default":"relu"},{"type_name":"Enumerated","desc":"优化器，用于优化权重，默认为adam","specific_type_name":null,"values":["lbfgs","sgd","adam"],"multi":false,"type_code":"choice","name":"solver","default":"adam"},{"type_name":"Float","desc":"L2 惩罚项(正则项) 参数","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"alpha","default":0.0001},{"type_name":"Int","desc":"随机优化算法的批量大小，如果优化器是 ‘lbfgs’, 将不会生效","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"batch_size","default":200},{"type_name":"Float","desc":"学习率的初始默认值，当且仅当优化策略是SGD或者ADAM时，才有意义。本参数控制着更新权重时的步长","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"learning_rate_init","default":0.001},{"type_name":"Int","desc":"最大可迭代次数，优化器直至收敛（视最小容忍度而定）或者到达最大迭代次数时，算法停止","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"max_iter","default":200},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.018000"},{"_id":"mlp_regressor.1","name":"mlp_regressor","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"多层感知器-回归","category":"机器学习\\回归","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, hidden_layer_sizes='100', activation='relu', solver='adam', alpha=0.0001, batch_size=200, learning_rate_init=0.001, max_iter=200, key_cols='date,instrument', other_train_parameters={})","doc":"\n    用于回归的机器学习算法。多层感知器（Multilayer Perceptron,缩写MLP）是一种前向结构的人工神经网络，映射一组输入向量到一组输出向量。可用于线性不可分数据。\n    ","desc":"\n    用于回归的机器学习算法。多层感知器（Multilayer Perceptron,缩写MLP）是一种前向结构的人工神经网络，映射一组输入向量到一组输出向量。可用于线性不可分数据。\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果， 如果predict_ds为None， predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要特征指定输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"输入该隐藏层的神经元个数，用英文逗号(,)分隔的整数元组，例如 100,100，表示有两层隐藏层，第一层隐藏层有100个神经元，第二层也有100个神经元","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"hidden_layer_sizes","default":"100"},{"type_name":"Enumerated","desc":"隐藏层的激活函数类型","specific_type_name":null,"values":["identity","logistic","tanh","relu"],"multi":false,"type_code":"choice","name":"activation","default":"relu"},{"type_name":"Enumerated","desc":"优化器，用于优化权重，默认为adam","specific_type_name":null,"values":["lbfgs","sgd","adam"],"multi":false,"type_code":"choice","name":"solver","default":"adam"},{"type_name":"Float","desc":"L2 惩罚项(正则项) 参数","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"alpha","default":0.0001},{"type_name":"Int","desc":"随机优化算法的批量大小，如果优化器是 ‘lbfgs’, 将不会生效","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"batch_size","default":200},{"type_name":"Float","desc":"学习率的初始默认值，当且仅当优化策略是SGD或者ADAM时，才有意义。本参数控制着更新权重时的步长","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"learning_rate_init","default":0.001},{"type_name":"Int","desc":"最大可迭代次数，优化器直至收敛（视最小容忍度而定）或者到达最大迭代次数时，算法停止","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"max_iter","default":200},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.020000"},{"_id":"neutralize.13","name":"neutralize","version":13,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":13,"friendly_name":"中性化处理","category":"数据处理","arguments":"(input_1=, input_2=None, market_value_key=True, industry_output_key=True, market_col_name='market_cap_float_0', industry_sw_col_name='industry_sw_level1_0', columns_input='')","doc":"\n\n 中性化处理.一般分为行业中性化和市值中性化，其目的是不能直接使用因子原始值进行建模，而是需要按行业或市值进行调整后才能用于建模。\n\n    ","desc":"\n\n 中性化处理.一般分为行业中性化和市值中性化，其目的是不能直接使用因子原始值进行建模，而是需要按行业或市值进行调整后才能用于建模。\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"标准化数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入数据","specific_type_name":"DataSource","name":"input_1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入特征列表","specific_type_name":"列表|DataSource","name":"input_2","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Boolean","desc":"是否同时市值中性化","specific_type_name":null,"type_code":"bool","name":"market_value_key","default":true},{"type_name":"Boolean","desc":"是否同时输出行业哑变量","specific_type_name":null,"type_code":"bool","name":"industry_output_key","default":true},{"type_name":"String","desc":"市值因子列名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"market_col_name","default":"market_cap_float_0"},{"type_name":"String","desc":"行业因子列名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"industry_sw_col_name","default":"industry_sw_level1_0"},{"type_name":"Script","desc":"指定行业中性化的列","specific_type_name":null,"language":"","default":"","auto_complete_type":"feature_fields,bigexpr_functions","type_code":"code","name":"columns_input"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.023000"},{"_id":"old_general_feature_extractor.7","name":"old_general_feature_extractor","version":7,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":7,"friendly_name":"基础特征抽取(旧版数据)","category":"特征抽取","arguments":"(instruments=, features=, start_date='', end_date='', before_start_days=90)","doc":"\n\n 基础特征(因子)抽取：读取基础数据字段，这里抽取的是基础特征，例如，对于衍生特征 close_1/close_0，这里只会读取出 close_0，close_1。要进行衍生特征抽取，需要结合衍生特征抽取模块。\n\n        ","desc":null,"doc_url":"https://bigquant.com/docs/develop/modules/general_feature_extractor.html","interface":[{"type_name":null,"desc":"基础特征数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"代码列表","specific_type_name":"列表|DataSource","name":"instruments","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"特征列表","specific_type_name":"列表|DataSource","name":"features","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"开始日期，示例 2017-02-12，一般不需要指定，使用 代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，示例 2017-02-12，一般不需要指定，使用 代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":"Float","desc":"向前取数据天数，比如，用户通过表达式计算的衍生特征，可能需要用到开始日期之前的数据，可以通过设置此值实现，则数据将从 开始日期-向前取数据天数 开始取。考虑到节假日等，建议将此值得大一些","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"before_start_days","default":90}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.024000"},{"_id":"old_instruments.2","name":"old_instruments","version":2,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":true,"serviceversion":2,"friendly_name":"代码列表(旧版数据)","category":"数据输入输出","arguments":"(rolling_conf=None, start_date='', end_date='', market='CN_STOCK_A', instrument_list=None, max_count=0)","doc":"\n\n\n    获取指定市场和指定时间区间有效的代码列表\n\n\n    ","desc":"\n\n\n    获取指定市场和指定时间区间有效的代码列表\n\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"滚动训练参数，如果指定，将覆盖参数开始日期和结束日期","specific_type_name":null,"name":"rolling_conf","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"开始日期，示例 2017-01-01","specific_type_name":null,"can_set_liverun_param":true,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，示例 2017-01-01","specific_type_name":null,"can_set_liverun_param":true,"type_code":"str","name":"end_date","default":""},{"type_name":"Enumerated","desc":"交易市场，见文档[交易市场](https://bigquant.com/docs/develop/datasource/deprecated/trading_market.html)","specific_type_name":null,"values":["CN_STOCK_A","CN_FUND","CN_FUTURE","US_STOCK","HK_STOCK"],"multi":false,"type_code":"choice","name":"market","default":"CN_STOCK_A"},{"type_name":"Script","desc":"代码列表，每行一个，如果指定，market参数将被忽略","specific_type_name":null,"language":"","default":null,"auto_complete_type":"stocks","type_code":"code","name":"instrument_list"},{"type_name":"Int","desc":"最大数量，0表示没有限制，一般用于在小数据上测试和调试问题","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"max_count","default":0}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.025000"},{"_id":"output_insight.1","version":1,"name":"output_insight","data":{"interface":[],"opensource":false,"desc":"","cacheable":true,"source_code":[["__init__.py","# Python 代码入口函数，input_1/2/3 对应三个输入端，data_1/2/3 对应三个输出端\ndef bigquant_run(input_1, input_2, input_3):\n    source_file = input_1._DataSource__bq_protected_file_path\n    print(source_file)\n    if source_file.endswith('pkl'):\n        json_in = input_1.read_pickle()\n        print('pickle')\n        print(json_in)\n    else:\n        df_in = input_1.read_df()\n        print(df_in.describe())\n        print(df_in.head())\n    return Outputs(data_1=input_1, data_2=input_2, data_3=input_3)\n"]],"friendly_name":"output_insight","source_deps":[],"category":"自定义模块","serviceversion":1,"doc_url":"","visible":true},"rank":0,"shared":false,"updated_at":"2018-07-27T14:00:11.753000","owner":"soloaustin"},{"_id":"plot_dataframe.1","name":"plot_dataframe","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"绘制DataFrame","category":"数据可视化","arguments":"(input_data=, title='', chart_type='line', x='', y='', options={}, candlestick=False, pane_1='', pane_2='', pane_3='', pane_4='')","doc":"\n    绘制DataFrame。该绘图函数拥有更友好的交互体验和更强大的绘图功能，更多[详情](https://bigquant.com/community/t/topic/46)\n    ","desc":"\n    绘制DataFrame。该绘图函数拥有更友好的交互体验和更强大的绘图功能，更多[详情](https://bigquant.com/community/t/topic/46)\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"input_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"标题","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"title","default":""},{"type_name":"Enumerated","desc":"图表类型","specific_type_name":null,"values":["area","areaspline","areasplinerange","bar","boxplot","bubble","column","columnrange","errorbar","funnel","gauge","heatmap","line","pie","polygon","pyramid","scatter","solidgauge","spline","treemap","waterfall","candlestick","ohlc","flag"],"multi":false,"type_code":"choice","name":"chart_type","default":"line"},{"type_name":"String","desc":"x轴数据字段，如果不指定，默认用index","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"x","default":""},{"type_name":"String","desc":"y轴数据字段，如果不指定，使用x轴外的所有字段，多个字段用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"y","default":""},{"type_name":"Script","desc":"自定义参数，例如 {'chart': {'height': 500}}，参考Highcharts文档","specific_type_name":"dict","language":"script.py","default":"{\n    'chart': {\n        'height': 400\n    }\n}","auto_complete_type":null,"type_code":"code","name":"options"},{"type_name":"Boolean","desc":"绘制蜡烛图，需要输入数据有 open、high、low、close四列","specific_type_name":null,"type_code":"bool","name":"candlestick","default":false},{"type_name":"String","desc":"分栏1，用于将输入分为多个栏显示，这里输入访问本栏的字段，多个字段用英文逗号分隔，可以在最后添加一个栏的百分比高度，e.g. close,high,70%","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"pane_1","default":""},{"type_name":"String","desc":"分栏2，用于将输入分为多个栏显示，这里输入访问本栏的字段，多个字段用英文逗号分隔，可以在最后添加一个栏的百分比高度，e.g. close,high,70%","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"pane_2","default":""},{"type_name":"String","desc":"分栏3，用于将输入分为多个栏显示，这里输入访问本栏的字段，多个字段用英文逗号分隔，可以在最后添加一个栏的百分比高度，e.g. close,high,70%","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"pane_3","default":""},{"type_name":"String","desc":"分栏4，用于将输入分为多个栏显示，这里输入访问本栏的字段，多个字段用英文逗号分隔，可以在最后添加一个栏的百分比高度，e.g. close,high,70%","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"pane_4","default":""}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.028000"},{"_id":"plot_percentiles.1","name":"plot_percentiles","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"分位数分布","category":"数据可视化","arguments":"(input_data=, include_columns='', percentile_count=100, percentile_start=0.0, percentile_end=1.0)","doc":"\n    技术和绘制数据分位数分布。\n    ","desc":"\n    技术和绘制数据分位数分布。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入数据源","specific_type_name":"DataSource","name":"input_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"选中列，多个列名用英文逗号分隔，默认所有列","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"include_columns","default":""},{"type_name":"Int","desc":"分位数数量","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"percentile_count","default":100},{"type_name":"Float","desc":"起始分位","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"float","name":"percentile_start","default":0.0},{"type_name":"Float","desc":"结束起始分位","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"float","name":"percentile_end","default":1.0}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.029000"},{"_id":"preprocessing_max_abs_scaler.1","name":"preprocessing_max_abs_scaler","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"最大绝对值归一化","category":"机器学习\\特征预处理","arguments":"(training_ds=None, features=None, model=None, predict_ds=None)","doc":"\n    最大绝对值归一化。\n\n    ","desc":"\n    最大绝对值归一化。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"转换后训练集","specific_type_name":null,"name":"transform_trainds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"转换后预测集","specific_type_name":null,"name":"transform_predictds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要特征指定输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.030000"},{"_id":"preprocessing_min_max_scaler.1","name":"preprocessing_min_max_scaler","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"特征缩放","category":"机器学习\\特征预处理","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, feature_range_low=0, feature_range_high=1)","doc":"\n    将特征值缩放到一定范围内。\n\n    ","desc":"\n    将特征值缩放到一定范围内。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"转换后训练集","specific_type_name":null,"name":"transform_trainds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"转换后预测集","specific_type_name":null,"name":"transform_predictds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要特征指定输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"特征缩放下限，将特征缩放到执行范围之间","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"feature_range_low","default":0},{"type_name":"Int","desc":"特征缩放上限，将特征缩放到执行范围之间","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"feature_range_high","default":1}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.031000"},{"_id":"preprocessing_normalizer.1","name":"preprocessing_normalizer","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"标准化","category":"机器学习\\特征预处理","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, norm='l2')","doc":"\n    标准化处理。\n\n    ","desc":"\n    标准化处理。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"标准化训练集","specific_type_name":null,"name":"transform_trainds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"标准化预测集","specific_type_name":null,"name":"transform_predictds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要特征指定输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Enumerated","desc":"标准化方法","specific_type_name":null,"values":["l1","l2","max"],"multi":false,"type_code":"choice","name":"norm","default":"l2"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.032000"},{"_id":"preprocessing_ordinal_encoder.1","name":"preprocessing_ordinal_encoder","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"序数编码","category":"机器学习\\特征预处理","arguments":"(training_ds=None, features=None, model=None, predict_ds=None)","doc":"\n    序数编码。\n    ","desc":"\n    序数编码。\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"转换后训练集","specific_type_name":null,"name":"transform_trainds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"转换后预测集","specific_type_name":null,"name":"transform_predictds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要特征指定输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.033000"},{"_id":"preprocessing_robust_scaler.1","name":"preprocessing_robust_scaler","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"RobustScaler标准化","category":"机器学习\\特征预处理","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, with_centering=True, with_scaling=True, quantile_range_min=25.0, quantile_range_max=75.0)","doc":"\n    RobustScaler 针对离群点做标准化处理。\n\n    ","desc":"\n    RobustScaler 针对离群点做标准化处理。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"转换后训练集","specific_type_name":null,"name":"transform_trainds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"转换后预测集","specific_type_name":null,"name":"transform_predictds","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要特征指定输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Boolean","desc":"中心化","specific_type_name":null,"type_code":"bool","name":"with_centering","default":true},{"type_name":"Boolean","desc":"数据是否按分位数缩放","specific_type_name":null,"type_code":"bool","name":"with_scaling","default":true},{"type_name":"Float","desc":"  缩放分位数下限，介于0.0到100.0之间","specific_type_name":null,"min":0,"max":1.7976931348623157e+308,"type_code":"float","name":"quantile_range_min","default":25.0},{"type_name":"Float","desc":"缩放分位数上限，介于0.0到100.0之间","specific_type_name":null,"min":-1.7976931348623157e+308,"max":100,"type_code":"float","name":"quantile_range_max","default":75.0}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.034000"},{"_id":"random_forest_classifier.1","name":"random_forest_classifier","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"随机森林-分类","category":"机器学习\\分类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, iterations=10, feature_fraction=1.0, max_depth=30, min_samples_per_leaf=200, key_cols='date,instrument', workers=1, random_state=0, other_train_parameters={})","doc":"\n\n 随机森林算法，可以用做分类和回归类的训练。\n    ","desc":"\n\n 随机森林算法，可以用做分类和回归类的训练。\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"树的数量，数量越大，则模型越复杂，学习能力越强，更有可能过拟合，需要更多的计算资源","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"iterations","default":10},{"type_name":"Float","desc":"特征使用率：寻找最佳分割时要考虑的特征比率","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"float","name":"feature_fraction","default":1.0},{"type_name":"Int","desc":"树的最大深度，限制每棵树的最大深度，数值大拟合能力强，数值小泛化能力强。设置为0则不限制","specific_type_name":null,"min":0,"max":2147483647,"type_code":"int","name":"max_depth","default":30},{"type_name":"Int","desc":"每叶节点最小样本数：每个叶节点最少需要的样本数量，一般值越大，泛化性性越好","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"min_samples_per_leaf","default":200},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Int","desc":"并行作业数，同时使用多少个进程进行计算，默认是1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Int","desc":"随机数种子，默认是0","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"random_state","default":0},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.036000"},{"_id":"random_forest_regressor.1","name":"random_forest_regressor","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"随机森林-回归","category":"机器学习\\回归","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, iterations=10, feature_fraction=1, max_depth=30, min_samples_per_leaf=200, key_cols='date,instrument', workers=1, random_state=0, other_train_parameters={})","doc":"\n\n 随机森林算法，可以用做分类和回归类的训练。\n    ","desc":"\n\n 随机森林算法，可以用做分类和回归类的训练。\n    ","doc_url":"https://bigquant.com/docs/develop/modules/random_forest_regressor.html","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Int","desc":"树的数量，数量越大，则模型越复杂，学习能力越强，更有可能过拟合，需要更多的计算资源","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"iterations","default":10},{"type_name":"Float","desc":"特征使用率：寻找最佳分割时要考虑的特征比率","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"float","name":"feature_fraction","default":1},{"type_name":"Int","desc":"树的最大深度，限制每棵树的最大深度，数值大拟合能力强，数值小泛化能力强。设置为0则不限制","specific_type_name":null,"min":0,"max":2147483647,"type_code":"int","name":"max_depth","default":30},{"type_name":"Int","desc":"每叶节点最小样本数：每个叶节点最少需要的样本数量，一般值越大，泛化性性越好","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"min_samples_per_leaf","default":200},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Int","desc":"并行作业数，同时使用多少个进程进行计算，默认是1","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"workers","default":1},{"type_name":"Int","desc":"随机数种子，默认是0","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"random_state","default":0},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.038000"},{"_id":"resample.1","name":"resample","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"数据重采样Resample","category":"数据处理","arguments":"(data1=, group='instrument', sessions='Q')","doc":"\n\n        对输入数据进行resample处理\n\n        ","desc":null,"doc_url":"","interface":[{"type_name":null,"desc":"重采样后的输出数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"数据输入","specific_type_name":"DataSource","name":"data1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"分组列","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"group","default":"instrument"},{"type_name":"String","desc":"频率类别","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"sessions","default":"Q"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.040000"},{"_id":"result_display.1","name":"result_display","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"汇总展示","category":"数据可视化","arguments":"(data=, key_module=, plot_names=['策略回测', '利润分布'], kind='分布式')","doc":"","desc":null,"doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"自定义运行模块结果","specific_type_name":"列表","name":"data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Script","desc":"模块名参数字典。比如：比如{'镜像回测': 'm1', '代码列表': 'm2'}","specific_type_name":null,"language":"","default":null,"auto_complete_type":null,"type_code":"code","name":"key_module"},{"type_name":"Enumerated","desc":"结果展示","specific_type_name":null,"values":["交易明细","策略回测","利润分布","交易稳定性","月度/周度利润统计","交易轨迹","MAE/MFE","滚动绩效评估"],"multi":true,"type_code":"choice","name":"plot_names","default":["策略回测","利润分布"]},{"type_name":"Enumerated","desc":"类别","specific_type_name":null,"values":["分布式","多品种"],"multi":false,"type_code":"choice","name":"kind","default":"分布式"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.041000"},{"_id":"rolling_conf.1","name":"rolling_conf","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":false,"opensource":true,"serviceversion":1,"friendly_name":"滚动运行配置","category":"数据输入输出","arguments":"(start_date='2010-01-01', end_date='2015-12-31', rolling_update_days=365, rolling_update_days_for_live=None, rolling_min_days=730, rolling_max_days=0, rolling_count_for_live=1)","doc":"\n\n 滚动运行配置。返回滚动列表，每个滚动包含开始日期和结束日期。\n\n    ","desc":"\n\n 滚动运行配置。返回滚动列表，每个滚动包含开始日期和结束日期。\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"滚动配置数据(DataSource pickle)","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":"2010-01-01"},{"type_name":"String","desc":"结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":"2015-12-31"},{"type_name":"Int","desc":"更新周期，按自然日计算，每多少天更新一次","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"rolling_update_days","default":365},{"type_name":"Int","desc":"模拟实盘更新周期，按自然日计算，每多少天更新一次。如果需要在模拟实盘阶段使用不同的模型更新周期，可以设置这个参数","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"rolling_update_days_for_live","default":null},{"type_name":"Int","desc":"最小数据天数，按自然日计算，所以第一个滚动的结束日期是 从开始日期到开始日期+最小数据天数","specific_type_name":null,"min":0,"max":2147483647,"type_code":"int","name":"rolling_min_days","default":730},{"type_name":"Int","desc":"最大数据天数，按自然日计算，0，表示没有限制，否则每一个滚动的开始日期=max(此滚动的结束日期-最大数据天数, 开始日期)","specific_type_name":null,"min":0,"max":2147483647,"type_code":"int","name":"rolling_max_days","default":0},{"type_name":"Int","desc":"实盘滚动次数，模拟实盘模式下，取最后多少次滚动。一般在模拟实盘模式下，只用到最后一次滚动训练的模型，这里可以设置为1；如果你的滚动训练数据时间段很短，以至于期间可能没有训练数据，这里可以设置大一点。0表示没有限制","specific_type_name":null,"min":0,"max":2147483647,"type_code":"int","name":"rolling_count_for_live","default":1}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.042000"},{"_id":"rolling_run.1","name":"rolling_run","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"滚动运行","category":"机器学习\\其他","arguments":"(run=, input_list=, param_name='rolling_input')","doc":"\n\n 通用滚动运行。简单的可以理解为 map(run, input_list)\n\n    ","desc":"\n\n 通用滚动运行。简单的可以理解为 map(run, input_list)\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"输出数据(列表)","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练，训练模块的延迟执行输出","specific_type_name":null,"name":"run","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"输入数据(列表)","specific_type_name":null,"name":"input_list","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"参数名，run 中用于接收滚动运行数据的参数。示例1：rolling_input；示例2：run_a=rolling_b|run_c=rolling_d。具体见源代码","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"param_name","default":"rolling_input"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.043000"},{"_id":"rolling_run_predict.1","name":"rolling_run_predict","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"滚动预测","category":"机器学习\\其他","arguments":"(predict=, model_param_name='model', data_param_name='data')","doc":"\n\n 滚动预测，通用滚动预测\n\n    ","desc":"\n\n 滚动预测，通用滚动预测\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"预测结果","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测，预测模块的延迟执行输出","specific_type_name":null,"name":"predict","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"模型参数名，predict里用来接收模型的参数名，将从此参数获取模型输入","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"model_param_name","default":"model"},{"type_name":"String","desc":"数据参数名，predict里用来接收数据的参数名，将从此参数获取数据输入","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"data_param_name","default":"data"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.044000"},{"_id":"single_factor_analysis.4","name":"single_factor_analysis","version":4,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":4,"friendly_name":"单因子分析","category":"量化分析","arguments":"(factor='market_cap_0', start_date='2018-01-01', end_date='2018-10-31')","doc":"\n    单因子分析，单独使用。输出因子暴露月分布图、因子暴露时序分析、因子相关性分析、因子行业分布、因子IC分析、因子分组收益、多空组合收益、因子收益t检验等。\n    ","desc":"\n    单因子分析，单独使用。输出因子暴露月分布图、因子暴露时序分析、因子相关性分析、因子行业分布、因子IC分析、因子分组收益、多空组合收益、因子收益t检验等。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"单因子分析结果","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"因子名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"factor","default":"market_cap_0"},{"type_name":"String","desc":"开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":"2018-01-01"},{"type_name":"String","desc":"结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":"2018-10-31"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.045000"},{"_id":"sort.1","data":{"source_deps":"","visible":true,"cacheable":true,"source_code":"","desc":"\n    排序.\n    ","arguments":"(input_ds=, sort_by_ds=None, sort_by='--', group_by='date', keep_columns='--', ascending=True)","category":"数据处理","doc":"\n    排序.\n    ","friendly_name":"排序","opensource":false,"interface":[{"type_code":"output_port","optional":false,"specific_type_name":null,"type":"通用","type_name":null,"desc":"排序后数据","name":"sorted_data"},{"type_code":"input_port","optional":false,"specific_type_name":"DataSource","type":"通用","type_name":null,"desc":"输入数据","name":"input_ds"},{"type":"通用","name":"sort_by_ds","optional":false,"specific_type_name":"DataSource","default":null,"type_name":null,"desc":"排序特征","type_code":"input_port"},{"can_set_liverun_param":null,"type_code":"str","specific_type_name":null,"default":"--","type_name":"String","desc":"根据哪一列排序","name":"sort_by"},{"can_set_liverun_param":null,"type_code":"str","specific_type_name":null,"default":"date","type_name":"String","desc":"根据哪些列group，用逗号分隔","name":"group_by"},{"can_set_liverun_param":null,"type_code":"str","specific_type_name":null,"default":"--","type_name":"String","desc":"保留哪些列","name":"keep_columns"},{"type_code":"bool","specific_type_name":null,"default":true,"type_name":"Boolean","desc":"升序","name":"ascending"}],"doc_url":"https://bigquant.com/docs/","serviceversion":1},"updated_at":"2019-07-15T18:09:50.670000","name":"sort","shared":true,"rank":0,"owner":"bigquant","version":1},{"_id":"sort.4","name":"sort","version":4,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":4,"friendly_name":"排序","category":"数据处理","arguments":"(input_ds=, sort_by_ds=None, sort_by='--', group_by='date', keep_columns='--', ascending=True)","doc":"\n\n 排序.\n\n    ","desc":"\n\n 排序.\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"排序后数据","specific_type_name":null,"name":"sorted_data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入数据","specific_type_name":"DataSource","name":"input_ds","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"排序特征","specific_type_name":"DataSource","name":"sort_by_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"根据哪一列排序","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"sort_by","default":"--"},{"type_name":"String","desc":"根据哪些列group，用逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"group_by","default":"date"},{"type_name":"String","desc":"保留哪些列","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"keep_columns","default":"--"},{"type_name":"Boolean","desc":"升序","specific_type_name":null,"type_code":"bool","name":"ascending","default":true}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.047000"},{"_id":"sort.5","name":"sort","version":5,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":5,"friendly_name":"排序","category":"数据处理","arguments":"(input_ds=, sort_by_ds=None, sort_by='--', group_by='date', keep_columns='--', ascending=True)","doc":"\n\n 排序.\n\n    ","desc":"\n\n 排序.\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"排序后数据","specific_type_name":null,"name":"sorted_data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入数据","specific_type_name":"DataSource","name":"input_ds","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"排序特征","specific_type_name":"DataSource","name":"sort_by_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"根据哪一列排序","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"sort_by","default":"--"},{"type_name":"String","desc":"根据哪些列group，用逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"group_by","default":"date"},{"type_name":"String","desc":"保留哪些列","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"keep_columns","default":"--"},{"type_name":"Boolean","desc":"升序","specific_type_name":null,"type_code":"bool","name":"ascending","default":true}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.048000"},{"_id":"standardlize.1","data":{"source_deps":"","visible":true,"cacheable":true,"source_code":"","desc":"\n    标准化处理.\n    ","arguments":"(input_data=, features=None, columns_input='')","category":"数据处理","doc":"\n    标准化处理.\n    ","friendly_name":"标准化处理","opensource":false,"interface":[{"type_code":"output_port","optional":false,"specific_type_name":null,"type":"通用","type_name":null,"desc":"标准化数据","name":"data"},{"type_code":"input_port","optional":false,"specific_type_name":"DataSource","type":"通用","type_name":null,"desc":"输入数据","name":"input_data"},{"type":"通用","name":"features","optional":false,"specific_type_name":"列表|DataSource","default":null,"type_name":null,"desc":"因子列表","type_code":"input_port"},{"auto_complete_type":"feature_fields,bigexpr_functions","name":"columns_input","specific_type_name":null,"type_code":"code","default":"","type_name":"Script","desc":"指定列","language":""}],"doc_url":"https://bigquant.com/docs/","serviceversion":1},"updated_at":"2019-07-15T18:09:50.688000","name":"standardlize","shared":true,"rank":0,"owner":"bigquant","version":1},{"_id":"standardlize.8","name":"standardlize","version":8,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":8,"friendly_name":"标准化处理","category":"数据处理","arguments":"(input_1=, input_2=None, columns_input='')","doc":"\n\n    标准化处理，也可称为归一化处理，属于数据处理常见的一种方式.\n\n    ","desc":"\n\n    标准化处理，也可称为归一化处理，属于数据处理常见的一种方式.\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"标准化数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入数据","specific_type_name":"DataSource","name":"input_1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"因子列表","specific_type_name":"列表|DataSource","name":"input_2","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Script","desc":"指定列","specific_type_name":null,"language":"","default":"","auto_complete_type":"feature_fields,bigexpr_functions","type_code":"code","name":"columns_input"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.050000"},{"_id":"standardlize.9","name":"standardlize","version":9,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":9,"friendly_name":"标准化处理","category":"数据处理","arguments":"(input_1=, input_2=None, standard_func='ZScoreNorm', columns_input='')","doc":"\n\n    标准化处理，也可称为归一化处理，属于数据处理常见的一种方式.\n    方法：\n        MinMaxNorm: 最小最大值标准化至[0,1]范围\n        ZScoreNorm: Z分数标准化至标准正态分布，即对原始数据减去均值除以标准差\n        RobustZScoreNorm: 稳健Z分数标准化，即对原始数据减去中位数除以1.48倍MAD统计量\n        CSZScoreNorm: 截面Z分数标准化至标准正态分布\n        CSRankNorm: 截面先转换为rank序数，再Z分数化至标准正态分布\n    ","desc":"\n\n    标准化处理，也可称为归一化处理，属于数据处理常见的一种方式.\n    方法：\n        MinMaxNorm: 最小最大值标准化至[0,1]范围\n        ZScoreNorm: Z分数标准化至标准正态分布，即对原始数据减去均值除以标准差\n        RobustZScoreNorm: 稳健Z分数标准化，即对原始数据减去中位数除以1.48倍MAD统计量\n        CSZScoreNorm: 截面Z分数标准化至标准正态分布\n        CSRankNorm: 截面先转换为rank序数，再Z分数化至标准正态分布\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"标准化数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入数据","specific_type_name":"DataSource","name":"input_1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"因子列表","specific_type_name":"列表|DataSource","name":"input_2","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Enumerated","desc":"标准化方法","specific_type_name":null,"values":["ZScoreNorm","MinMaxNorm","RobustZScoreNorm","CSZScoreNorm","CSRankNorm"],"multi":false,"type_code":"choice","name":"standard_func","default":"ZScoreNorm"},{"type_name":"Script","desc":"指定列","specific_type_name":null,"language":"","default":"","auto_complete_type":"feature_fields,bigexpr_functions","type_code":"code","name":"columns_input"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.051000"},{"_id":"stock_ranker_predict_gbdt.1","name":"stock_ranker_predict_gbdt","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"StockRanker预测(GBDT)","category":"机器学习\\排序","arguments":"(model=, data=)","doc":"\n\n        股票排序机器学习模型(GBDT)预测。支持来自滚动运行输出的多个模型。\n\n        ","desc":null,"doc_url":"https://bigquant.com/docs/develop/modules/stock_ranker_predict.html","interface":[{"type_name":null,"desc":"预测结果","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"延迟运行，将当前模块打包，可以作为其他模块的输入，在其他模块里运行。启用需要勾选模块的 延迟运行 参数。","specific_type_name":null,"name":"m_lazy_run","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"模型","specific_type_name":"字符串","name":"model","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"数据","specific_type_name":"DataSource","name":"data","optional":false,"type":"通用","type_code":"input_port"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.056000"},{"_id":"stock_ranker_train_gbdt.1","name":"stock_ranker_train_gbdt","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"StockRanker训练(GBDT)","category":"机器学习\\排序","arguments":"(training_ds=, features=, learning_algorithm='排序', number_of_leaves=30, minimum_docs_per_leaf=30, number_of_trees=100, learning_rate=0.1, max_bins=256, rolling_input=None)","doc":"\n\n StockRanker排序学习模型(GBDT)训练。StockRanker属于集成学习，模型由多棵决策树组成，所有树的结论累加起来做为最终决策分数。\n\n        ","desc":null,"doc_url":"https://bigquant.com/docs/develop/modules/stock_ranker_train.html","interface":[{"type_name":null,"desc":"模型","specific_type_name":null,"name":"model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"特征贡献","specific_type_name":null,"name":"feature_gains","optional":true,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"延迟运行，将当前模块打包，可以作为其他模块的输入，在其他模块里运行。启用需要勾选模块的 延迟运行 参数。","specific_type_name":null,"name":"m_lazy_run","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，需要包含所有用到的特征数据，包括基础特征和衍生特征","specific_type_name":"DataSource","name":"training_ds","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"特征列表","specific_type_name":"列表|DataSource","name":"features","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Enumerated","desc":"学习算法，机器学习优化算法","specific_type_name":null,"values":["排序"],"multi":false,"type_code":"choice","name":"learning_algorithm","default":"排序"},{"type_name":"Int","desc":"叶节点数量：每棵树最大叶节点数量。一般情况下，叶子节点越多，则模型越复杂，表达能力越强，过拟合的可能性也越高","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"number_of_leaves","default":30},{"type_name":"Int","desc":"每叶节点最小样本数：每个叶节点最少需要的样本数量，一般值越大，泛化性性越好","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"minimum_docs_per_leaf","default":30},{"type_name":"Int","desc":"树的数量：一般情况下，树越多，则模型越复杂，表达能力越强，过拟合的可能性也越高","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"number_of_trees","default":100},{"type_name":"Float","desc":"学习率：学习率如果太大，可能会使结果越过最优值，如果太小学习会很慢","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"float","name":"learning_rate","default":0.1},{"type_name":"Int","desc":"特征值离散化数量：一般情况下，max_bins越大，则学的越细，过拟合的可能性也越高","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"max_bins","default":256},{"type_name":"doc","desc":"滚动运行参数，接收来自滚动运行的输入，用于训练数据过滤","specific_type_name":"dict","name":"rolling_input","type_code":"doc","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.059000"},{"_id":"stock_ranker_train_rolling.3","name":"stock_ranker_train_rolling","version":3,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":3,"friendly_name":"StockRanker滚动训练","category":"机器学习\\排序","arguments":"(data=, evaluation_start_date=, features=, number_of_leaves=30, minimum_docs_per_leaf=1000, number_of_trees=20, learning_rate=0.1, max_bins=1023, feature_fraction=1, model_update_days=365, training_max_days=0)","doc":"\n\n 股票排序，机器学习模型训练。StockRanker属于集成学习，模型由多棵决策树组成，所有树的结论累加起来做为最终决策分数。\n\n        ","desc":null,"doc_url":"https://bigquant.com/docs/develop/modules/stock_ranker_train_rolling.html","interface":[{"type_name":null,"desc":"预测结果，已合并各rolling阶段的评估数据","specific_type_name":null,"name":"evaluation_data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"数据和评估数据","specific_type_name":"DataSource","name":"data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"评估开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"evaluation_start_date"},{"type_name":null,"desc":"特征列表","specific_type_name":"列表|DataSource","name":"features","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"Int","desc":"叶节点数量：每棵树最大叶节点数量。一般情况下，叶子节点越多，则模型越复杂，表达能力越强，过拟合的可能性也越高","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"number_of_leaves","default":30},{"type_name":"Int","desc":"每叶节点最小样本数：每个叶节点最少需要的样本数量，一般值越大，泛化性性越好","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"minimum_docs_per_leaf","default":1000},{"type_name":"Int","desc":"树的数量：一般情况下，树越多，则模型越复杂，表达能力越强，过拟合的可能性也越高","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"number_of_trees","default":20},{"type_name":"Float","desc":"学习率：学习率如果太大，可能会使结果越过最优值，如果太小学习会很慢","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"float","name":"learning_rate","default":0.1},{"type_name":"Int","desc":"特征值离散化数量：一般情况下，max_bins越大，则学的越细，过拟合的可能性也越高","specific_type_name":null,"min":1,"max":2147483647,"type_code":"int","name":"max_bins","default":1023},{"type_name":"Int","desc":"特征使用率：在构建每一颗树时，每个特征被使用的概率，如果为1，则每棵树都会使用所有特征","specific_type_name":null,"min":0.0,"max":1.0,"type_code":"int","name":"feature_fraction","default":1},{"type_name":"Int","desc":"模型更新周期","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"model_update_days","default":365},{"type_name":"Int","desc":"训练最多使用training_max_days天的数据。如果为0，表示没有限制，从起始日期开始用。","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"training_max_days","default":0}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.061000"},{"_id":"strategy_pool_add.1","name":"strategy_pool_add","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"添加策略","category":"策略池","arguments":"(raw_perf_ds=, group='测试', template='默认AI可视化股票模版', params={}, lite_params={}, lite_perf_fields='algorithm_period_return', extra={})","doc":"\n\n 记录策略结果到我的策略池。\n 此模块只在回测模式下运行。\n\n    ","desc":"\n\n 记录策略结果到我的策略池。\n 此模块只在回测模式下运行。\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"策略池策略id","specific_type_name":null,"name":"strategy_id","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"回测结果","specific_type_name":null,"name":"raw_perf_ds","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"策略组，用于区分不同的实验组，一般策略实验分组完成，便于后续策略分析和研究。可以为任意字符串。","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"group","default":"测试"},{"type_name":"String","desc":"策略模版，用于记录本次实验所有策略基础。主要用于记录和后续策略进一步开发中的使用。可以为任意字符串。","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"template","default":"默认AI可视化股票模版"},{"type_name":"Script","desc":"策略参数，用于记录此策略完整的参数，在获取策略详情时返回。一般用于单个策略分析或者配置策略模版，用于重构策略。可以为任意类型数据。","specific_type_name":null,"language":"","default":"{}","auto_complete_type":null,"type_code":"code","name":"params"},{"type_name":"Script","desc":"简版策略参数，部分策略参数，在获取策略列表的时候即可以返回，一般用于策略组批量分析。可以为任意类型数据。","specific_type_name":null,"language":"","default":"{}","auto_complete_type":null,"type_code":"code","name":"lite_params"},{"type_name":"String","desc":"简版策略绩效字段，部分绩效数据字段，在获取策略列表的时候即可以返回，一般用于策略组批量分析。多个字段用英文逗号分割","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"lite_perf_fields","default":"algorithm_period_return"},{"type_name":"Script","desc":"其他数据。可以用来保存模型信息、预测等。可以为任意类型数据。","specific_type_name":null,"language":"","default":"{}","auto_complete_type":null,"type_code":"code","name":"extra"}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.069000"},{"_id":"strategy_pool_convert_to_trade_data.1","name":"strategy_pool_convert_to_trade_data","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"策略池转换为交易数据","category":"策略池","arguments":"(strategies=None)","doc":"\n\n 将策略池数据转换为可以用于回测交易模块的数据，用于后续组合多个策略的分析和测试。\n\n    ","desc":"\n\n 将策略池数据转换为可以用于回测交易模块的数据，用于后续组合多个策略的分析和测试。\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"用于回测交易的OHLCVA数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"用于回测交易的证券代码列表","specific_type_name":null,"name":"instruments","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"策略列表数据","specific_type_name":"列表|DataSource","name":"strategies","optional":false,"type":"通用","type_code":"input_port","default":null}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.070000"},{"_id":"strategy_pool_get.1","name":"strategy_pool_get","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"策略详情","category":"策略池","arguments":"(strategy_id=, plot_charts=True)","doc":"\n    从我的策略池获取策略，用于后续分析。\n    ","desc":"\n    从我的策略池获取策略，用于后续分析。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"策略数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"回测结果","specific_type_name":null,"name":"raw_perf","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"策略id","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strategy_id"},{"type_name":"Boolean","desc":"显示回测结果图表","specific_type_name":null,"type_code":"bool","name":"plot_charts","default":true}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.071000"},{"_id":"strategy_pool_list.1","name":"strategy_pool_list","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"策略列表","category":"策略池","arguments":"(group='', strategy_ids='', rand_seed=123)","doc":"\n    从我的策略池获取策略列表，用于后续分析。\n    ","desc":"\n    从我的策略池获取策略列表，用于后续分析。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"策略列表或者分析结果","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"策略组，获取指定策略组的所有策略","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"group","default":""},{"type_name":"String","desc":"策略id列表，根据策略id列表获取策略。如果设置此参数，策略组参数将被忽略。多个id用英文逗号分割","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"strategy_ids","default":""},{"type_name":"Int","desc":"随机数，如果策略组数据更新了，模块仍然可能获取的是缓存的旧数据，可以更改此随机id来获取最新数据","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"rand_seed","default":123}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.072000"},{"_id":"strategy_store_shared_data.1","name":"strategy_store_shared_data","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"市场策略池","category":"数据输入输出","arguments":"(start_date='2018-01-01', end_date='2018-10-01', strategy_id_list=None, gen_trade_test_data=True)","doc":"\n\n 获取开放共享的模拟实盘策略净值曲线数据\n\n    ","desc":"\n\n 获取开放共享的模拟实盘策略净值曲线数据\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"用于交易测试的instrument数据","specific_type_name":null,"name":"instruments","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"开始日期，示例 2017-01-01","specific_type_name":null,"can_set_liverun_param":true,"type_code":"str","name":"start_date","default":"2018-01-01"},{"type_name":"String","desc":"结束日期，示例 2018-01-01","specific_type_name":null,"can_set_liverun_param":true,"type_code":"str","name":"end_date","default":"2018-10-01"},{"type_name":"Script","desc":"策略id列表，分享到策略商城/天梯的策略id，例如 265，每行一个id","specific_type_name":null,"language":"","default":null,"auto_complete_type":"","type_code":"code","name":"strategy_id_list"},{"type_name":"Boolean","desc":"生成交易测试数据字段，用策略净值生成OHLCVA数据，open=close=(1+cum_returns)，high=close*1.01，low=close*0.99，volume=10^8，amount=10^8","specific_type_name":null,"type_code":"bool","name":"gen_trade_test_data","default":true}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.075000"},{"_id":"svc.1","name":"svc","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"支持向量机-分类","category":"机器学习\\分类","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, C=1.0, kernel='rbf', degree=3, gamma=-1, coef0=0.0, tol=0.001, max_iter=-1, key_cols='date,instrument', other_train_parameters={})","doc":"\n    支持向量分类。\n    ","desc":"\n    支持向量分类。\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定特征输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Float","desc":"C-SVC惩罚系数，即对误差的宽容度,C越高，说明越不能容忍出现误差,容易过拟合。C越小，容易欠拟合。C过大或过小，泛化能力变差","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"C","default":1.0},{"type_name":"Enumerated","desc":"核函数类型","specific_type_name":null,"values":["linear","poly","rbf","sigmoid","precomputed"],"multi":false,"type_code":"choice","name":"kernel","default":"rbf"},{"type_name":"Int","desc":"多项式poly函数的维度，默认是3，选择其他核函数时会被忽略","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"degree","default":3},{"type_name":"Float","desc":"核函数参数gamma，gamma是选择RBF函数作为kernel后，该函数自带的一个参数。隐含地决定了数据映射到新的特征空间后的分布，gamma越大，支持向量越少，gamma值越小，支持向量越多。支持向量的个数影响训练与预测的速度，-1表示默认值为1/n_features","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"gamma","default":-1},{"type_name":"Float","desc":"核函数的常数项，对于poly和 sigmoid有用","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"coef0","default":0.0},{"type_name":"Float","desc":"停止训练的误差值大小，默认为1e-3","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"tol","default":0.001},{"type_name":"Int","desc":"最大迭代次数，-1为无限制","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"max_iter","default":-1},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.078000"},{"_id":"svr.1","name":"svr","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"支持向量机-回归","category":"机器学习\\回归","arguments":"(training_ds=None, features=None, model=None, predict_ds=None, C=1.0, kernel='rbf', degree=3, gamma=-1, coef0=0.0, tol=0.001, key_cols='date,instrument', other_train_parameters={})","doc":"\n\n 支持向量回归。\n\n    ","desc":"\n\n 支持向量回归。\n\n    ","doc_url":"","interface":[{"type_name":null,"desc":"训练出来的模型","specific_type_name":null,"name":"output_model","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"预测结果，如果predict_ds为None，predictions也为None","specific_type_name":null,"name":"predictions","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"训练数据，如果传入，则需要指定模型输入","specific_type_name":"DataSource","name":"training_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征，用于训练","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"模型，用于预测，如果不指定训练数据，则使用此模型预测","specific_type_name":"DataSource","name":"model","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"预测数据，如果不设置，则不做预测","specific_type_name":"DataSource","name":"predict_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Float","desc":"惩罚参数，默认值1.0","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"C","default":1.0},{"type_name":"Enumerated","desc":"核函数","specific_type_name":null,"values":["linear","poly","rbf","sigmoid","precomputed"],"multi":false,"type_code":"choice","name":"kernel","default":"rbf"},{"type_name":"Int","desc":"多项式poly函数的维度，int类型，默认是3，使用其他核函数时会被忽略","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"degree","default":3},{"type_name":"Float","desc":"核函数系数，rbf/poly/sigmoid的系数，float类型，默认为1/n_features","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"gamma","default":-1},{"type_name":"Float","desc":"核函数的常数项，float类型，对于poly和sigmoid有用","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"coef0","default":0.0},{"type_name":"Float","desc":"停止训练的误差值大小，float类型","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"tol","default":0.001},{"type_name":"String","desc":"关键列，关键列的数据会复制到预测结果里，多个列用英文逗号分隔","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"key_cols","default":"date,instrument"},{"type_name":"Script","desc":"其他训练参数，字典格式，例:{'criterion': 'mse'}","specific_type_name":"字典","language":"script.py","default":"{}","auto_complete_type":"","type_code":"code","name":"other_train_parameters"}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.079000"},{"_id":"trade.3","name":"trade","version":3,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":3,"friendly_name":"Trade (回测/模拟)","category":"回测与交易","arguments":"(start_date='', end_date='', handle_data=None, instruments=None, prepare=None, initialize=None, before_trading_start=None, volume_limit=0.025, order_price_field_buy='open', order_price_field_sell='close', capital_base=1000000.0, benchmark='000300.SHA', auto_cancel_non_tradable_orders=True, data_frequency='daily', price_type='后复权', plot_charts=True, backtest_only=False, options_data=None, options=None, amount_integer=None)","doc":"\n    量化交易引擎。支持回测和模拟实盘交易\n    ","desc":"\n    量化交易引擎。支持回测和模拟实盘交易\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"回测详细数据","specific_type_name":null,"name":"raw_perf","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"开始日期，设定值只在回测模式有效，在模拟实盘模式下为当前日期，示例：2017-06-01。一般不需要指定，使用 证券代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，设定值只在回测模式有效，在模拟实盘模式下为当前日期，示例：2017-06-01。一般不需要指定，使用 证券代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":"Script","desc":"主函数，[回调函数] 必须实现的函数，该函数每个单位时间会调用一次, 如果按天回测,则每天调用一次,如果按分钟,则每分钟调用一次,由于我们现在数据只有日K，所以是按天回调。在回测中，可以通过对象data获取单只股票或多只股票的时间窗口价格数据。如果算法中没有schedule_function函数，那么该函数为必选函数。一般策略的交易逻辑和订单生成体现在该函数中。","specific_type_name":"函数","language":"script.py","default":"# 回测引擎：每日数据处理函数，每天执行一次\ndef bigquant_run(context, data):\n    # 按日期过滤得到今日的预测数据\n    ranker_prediction = context.ranker_prediction[\n        context.ranker_prediction.date == data.current_dt.strftime('%Y-%m-%d')]\n\n    # 1. 资金分配\n    # 平均持仓时间是hold_days，每日都将买入股票，每日预期使用 1/hold_days 的资金\n    # 实际操作中，会存在一定的买入误差，所以在前hold_days天，等量使用资金；之后，尽量使用剩余资金（这里设置最多用等量的1.5倍）\n    is_staging = context.trading_day_index < context.hold_days # 是否在建仓期间（前 hold_days 天）\n    cash_avg = context.portfolio.portfolio_value / context.hold_days\n    cash_for_buy = min(context.portfolio.cash, (1 if is_staging else 1.5) * cash_avg)\n    cash_for_sell = cash_avg - (context.portfolio.cash - cash_for_buy)\n    positions = {e.symbol: p.amount * p.last_sale_price\n                 for e, p in context.perf_tracker.position_tracker.positions.items()}\n\n    # 2. 生成卖出订单：hold_days天之后才开始卖出；对持仓的股票，按StockRanker预测的排序末位淘汰\n    if not is_staging and cash_for_sell > 0:\n        equities = {e.symbol: e for e, p in context.perf_tracker.position_tracker.positions.items()}\n        instruments = list(reversed(list(ranker_prediction.instrument[ranker_prediction.instrument.apply(\n                lambda x: x in equities and not context.has_unfinished_sell_order(equities[x]))])))\n        # print('rank order for sell %s' % instruments)\n        for instrument in instruments:\n            context.order_target(context.symbol(instrument), 0)\n            cash_for_sell -= positions[instrument]\n            if cash_for_sell <= 0:\n                break\n\n    # 3. 生成买入订单：按StockRanker预测的排序，买入前面的stock_count只股票\n    buy_cash_weights = context.stock_weights\n    buy_instruments = list(ranker_prediction.instrument[:len(buy_cash_weights)])\n    max_cash_per_instrument = context.portfolio.portfolio_value * context.max_cash_per_instrument\n    for i, instrument in enumerate(buy_instruments):\n        cash = cash_for_buy * buy_cash_weights[i]\n        if cash > max_cash_per_instrument - positions.get(instrument, 0):\n            # 确保股票持仓量不会超过每次股票最大的占用资金量\n            cash = max_cash_per_instrument - positions.get(instrument, 0)\n        if cash > 0:\n            context.order_value(context.symbol(instrument), cash)\n","auto_complete_type":"python","type_code":"code","name":"handle_data"},{"type_name":null,"desc":"证券代码列表，如果提供了 `prepare`_ 函数，可以在 `prepare`_ 中覆盖此参数提供的值","specific_type_name":"列表|DataSource","name":"instruments","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Script","desc":"数据准备函数，[回调函数] 准备数据函数，运行过程中只调用一次，在 initialize 前调用，准备交易中需要用到数据。目前支持设置交易中用到的股票列表，设置到 context.instruments。更多见 https://bigquant.com/docs/develop/modules/trade/usage.html","specific_type_name":"函数","language":"script.py","default":"# 回测引擎：准备数据，只执行一次\ndef bigquant_run(context):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"prepare"},{"type_name":"Script","desc":"初始化函数，[回调函数] 初始化函数，整个回测中只在最开始时调用一次，用于初始化一些账户状态信息和策略基本参数，context也可以理解为一个全局变量，在回测中存放当前账户信息和策略基本参数便于会话。","specific_type_name":"函数","language":"script.py","default":"# 回测引擎：初始化函数，只执行一次\ndef bigquant_run(context):\n    # 加载预测数据\n    context.ranker_prediction = context.options['data'].read_df()\n\n    # 系统已经设置了默认的交易手续费和滑点，要修改手续费可使用如下函数\n    context.set_commission(PerOrder(buy_cost=0.0003, sell_cost=0.0013, min_cost=5))\n    # 预测数据，通过options传入进来，使用 read_df 函数，加载到内存 (DataFrame)\n    # 设置买入的股票数量，这里买入预测股票列表排名靠前的5只\n    stock_count = 5\n    # 每只的股票的权重，如下的权重分配会使得靠前的股票分配多一点的资金，[0.339160, 0.213986, 0.169580, ..]\n    context.stock_weights = T.norm([1 / math.log(i + 2) for i in range(0, stock_count)])\n    # 设置每只股票占用的最大资金比例\n    context.max_cash_per_instrument = 0.2\n    context.hold_days = 5\n","auto_complete_type":"python","type_code":"code","name":"initialize"},{"type_name":"Script","desc":"盘前处理函数，[回调函数] 每个单位时间开始前调用一次，即每日开盘前调用一次，该函数是可选函数。你的算法可以在该函数中进行一些数据处理计算，比如确定当天有交易信号的股票池。","specific_type_name":"函数","language":"script.py","default":"# 回测引擎：每个单位时间开始前调用一次，即每日开盘前调用一次。\ndef bigquant_run(context, data):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"before_trading_start"},{"type_name":"Float","desc":"成交率限制：执行下单时控制成交量参数，默认值2.5%，若设置为０时，不进行成交量检查","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"volume_limit","default":0.025},{"type_name":"Enumerated","desc":"买入点：open=开盘买入，close=收盘买入","specific_type_name":null,"values":["open","close"],"multi":false,"type_code":"choice","name":"order_price_field_buy","default":"open"},{"type_name":"Enumerated","desc":"卖出点：open=开盘卖出，close=收盘卖出","specific_type_name":null,"values":["open","close"],"multi":false,"type_code":"choice","name":"order_price_field_sell","default":"close"},{"type_name":"Float","desc":"初始资金","specific_type_name":null,"min":0,"max":1.7976931348623157e+308,"type_code":"float","name":"capital_base","default":1000000.0},{"type_name":"String","desc":"基准指数，不影响回测结果","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"benchmark","default":"000300.SHA"},{"type_name":"Boolean","desc":"自动取消无法成交订单：是否自动取消因为停牌等原因不能成交的订单","specific_type_name":null,"type_code":"bool","name":"auto_cancel_non_tradable_orders","default":true},{"type_name":"Enumerated","desc":"回测数据频率：日线 (daily)，分钟线 (minute)","specific_type_name":null,"values":["daily","minute"],"multi":false,"type_code":"choice","name":"data_frequency","default":"daily"},{"type_name":"Enumerated","desc":"回测价格类型：真实价格(original)，后复权(backward_adjusted)","specific_type_name":null,"values":["真实价格","后复权"],"multi":false,"type_code":"choice","name":"price_type","default":"后复权"},{"type_name":"Boolean","desc":"显示回测结果图表","specific_type_name":null,"type_code":"bool","name":"plot_charts","default":true},{"type_name":"Boolean","desc":"只在回测模式下运行：默认情况下，Trade会在回测和实盘模拟模式下都运行。如果策略中有多个M.trade，在实盘模拟模式下，只能有一个设置为运行，其他的需要设置为 backtest_only=True，否则将会有未定义的行为错误","specific_type_name":null,"type_code":"bool","name":"backtest_only","default":false},{"type_name":null,"desc":"其他输入数据：回测中用到的其他数据，比如预测数据、训练模型等。如果设定，在回测中通过 context.options['data'] 使用","specific_type_name":"DataSource","name":"options_data","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"doc","desc":"用户自定义数据，在回调函数中要用到的变量，需要从这里传入，并通过 context.options 使用","specific_type_name":"字典","name":"options","type_code":"doc","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.080000"},{"_id":"trade.4","name":"trade","version":4,"owner":"bigquant","shared":true,"data":{"cacheable":false,"opensource":false,"serviceversion":4,"friendly_name":"Trade (回测/模拟)","category":"回测与交易","arguments":"(start_date='', end_date='', initialize=None, handle_data=None, instruments=None, prepare=None, before_trading_start=None, volume_limit=0.025, order_price_field_buy='open', order_price_field_sell='close', capital_base=1000000.0, auto_cancel_non_tradable_orders=True, data_frequency='daily', price_type='真实价格', product_type='股票', plot_charts=True, backtest_only=False, options_data=None, options=None, history_ds=None, benchmark_ds=None, benchmark='000300.HIX', trading_calendar=None, amount_integer=None)","doc":"\n    量化交易引擎。支持回测和模拟实盘交易\n    ","desc":"\n    量化交易引擎。支持回测和模拟实盘交易\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"回测详细数据","specific_type_name":null,"name":"raw_perf","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"开始日期，设定值只在回测模式有效，在模拟实盘模式下为当前日期，示例：2017-06-01。一般不需要指定，使用 代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，设定值只在回测模式有效，在模拟实盘模式下为当前日期，示例：2017-06-01。一般不需要指定，使用 代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":"Script","desc":"初始化函数，[回调函数] 初始化函数，整个回测中只在最开始时调用一次，用于初始化一些账户状态信息和策略基本参数，context也可以理解为一个全局变量，在回测中存放当前账户信息和策略基本参数便于会话。","specific_type_name":"函数","language":"script.py","default":"# 回测引擎：初始化函数，只执行一次\ndef bigquant_run(context):\n    # 加载预测数据\n    context.ranker_prediction = context.options['data'].read_df()\n\n    # 系统已经设置了默认的交易手续费和滑点，要修改手续费可使用如下函数\n    context.set_commission(PerOrder(buy_cost=0.0003, sell_cost=0.0013, min_cost=5))\n    # 预测数据，通过options传入进来，使用 read_df 函数，加载到内存 (DataFrame)\n    # 设置买入的股票数量，这里买入预测股票列表排名靠前的5只\n    stock_count = 5\n    # 每只的股票的权重，如下的权重分配会使得靠前的股票分配多一点的资金，[0.339160, 0.213986, 0.169580, ..]\n    context.stock_weights = T.norm([1 / math.log(i + 2) for i in range(0, stock_count)])\n    # 设置每只股票占用的最大资金比例\n    context.max_cash_per_instrument = 0.2\n    context.hold_days = 5\n","auto_complete_type":"python","type_code":"code","name":"initialize"},{"type_name":"Script","desc":"主函数，[回调函数] 必须实现的函数，该函数每个单位时间会调用一次, 如果按天回测,则每天调用一次,如果按分钟,则每分钟调用一次,由于我们现在数据只有日K，所以是按天回调。在回测中，可以通过对象data获取单只股票或多只股票的时间窗口价格数据。如果算法中没有schedule_function函数，那么该函数为必选函数。一般策略的交易逻辑和订单生成体现在该函数中。","specific_type_name":"函数","language":"script.py","default":"# 回测引擎：每日数据处理函数，每天执行一次\ndef bigquant_run(context, data):\n    # 按日期过滤得到今日的预测数据\n    ranker_prediction = context.ranker_prediction[\n        context.ranker_prediction.date == data.current_dt.strftime('%Y-%m-%d')]\n\n    # 1. 资金分配\n    # 平均持仓时间是hold_days，每日都将买入股票，每日预期使用 1/hold_days 的资金\n    # 实际操作中，会存在一定的买入误差，所以在前hold_days天，等量使用资金；之后，尽量使用剩余资金（这里设置最多用等量的1.5倍）\n    is_staging = context.trading_day_index < context.hold_days # 是否在建仓期间（前 hold_days 天）\n    cash_avg = context.portfolio.portfolio_value / context.hold_days\n    cash_for_buy = min(context.portfolio.cash, (1 if is_staging else 1.5) * cash_avg)\n    cash_for_sell = cash_avg - (context.portfolio.cash - cash_for_buy)\n    positions = {e.symbol: p.amount * p.last_sale_price\n                 for e, p in context.perf_tracker.position_tracker.positions.items()}\n\n    # 2. 生成卖出订单：hold_days天之后才开始卖出；对持仓的股票，按StockRanker预测的排序末位淘汰\n    if not is_staging and cash_for_sell > 0:\n        equities = {e.symbol: e for e, p in context.perf_tracker.position_tracker.positions.items()}\n        instruments = list(reversed(list(ranker_prediction.instrument[ranker_prediction.instrument.apply(\n                lambda x: x in equities and not context.has_unfinished_sell_order(equities[x]))])))\n        # print('rank order for sell %s' % instruments)\n        for instrument in instruments:\n            context.order_target(context.symbol(instrument), 0)\n            cash_for_sell -= positions[instrument]\n            if cash_for_sell <= 0:\n                break\n\n    # 3. 生成买入订单：按StockRanker预测的排序，买入前面的stock_count只股票\n    buy_cash_weights = context.stock_weights\n    buy_instruments = list(ranker_prediction.instrument[:len(buy_cash_weights)])\n    max_cash_per_instrument = context.portfolio.portfolio_value * context.max_cash_per_instrument\n    for i, instrument in enumerate(buy_instruments):\n        cash = cash_for_buy * buy_cash_weights[i]\n        if cash > max_cash_per_instrument - positions.get(instrument, 0):\n            # 确保股票持仓量不会超过每次股票最大的占用资金量\n            cash = max_cash_per_instrument - positions.get(instrument, 0)\n        if cash > 0:\n            context.order_value(context.symbol(instrument), cash)\n","auto_complete_type":"python","type_code":"code","name":"handle_data"},{"type_name":null,"desc":"代码列表，如果提供了 `prepare`_ 函数，可以在 `prepare`_ 中覆盖此参数提供的值","specific_type_name":"列表|DataSource","name":"instruments","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Script","desc":"数据准备函数，[回调函数] 准备数据函数，运行过程中只调用一次，在 initialize 前调用，准备交易中需要用到数据。目前支持设置交易中用到的股票列表，设置到 context.instruments。[更多](https://bigquant.com/docs/develop/modules/trade/usage.html)","specific_type_name":"函数","language":"script.py","default":"# 回测引擎：准备数据，只执行一次\ndef bigquant_run(context):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"prepare"},{"type_name":"Script","desc":"盘前处理函数，[回调函数] 每个单位时间开始前调用一次，即每日开盘前调用一次，该函数是可选函数。你的算法可以在该函数中进行一些数据处理计算，比如确定当天有交易信号的股票池。","specific_type_name":"函数","language":"script.py","default":"# 回测引擎：每个单位时间开始前调用一次，即每日开盘前调用一次。\ndef bigquant_run(context, data):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"before_trading_start"},{"type_name":"Float","desc":"成交率限制：执行下单时控制成交量参数，默认值2.5%，若设置为０时，不进行成交量检查","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"volume_limit","default":0.025},{"type_name":"Enumerated","desc":"买入点：open=开盘买入，close=收盘买入","specific_type_name":null,"values":["open","close","twap_1","twap_2","twap_3","twap_4","twap_5","twap_6","twap_7","twap_8","twap_9","twap_10","twap_11","vwap_1","vwap_2","vwap_3","vwap_4","vwap_5","vwap_6","vwap_7","vwap_8","vwap_9","vwap_10","vwap_11"],"multi":false,"type_code":"choice","name":"order_price_field_buy","default":"open"},{"type_name":"Enumerated","desc":"卖出点：open=开盘卖出，close=收盘卖出","specific_type_name":null,"values":["open","close","twap_1","twap_2","twap_3","twap_4","twap_5","twap_6","twap_7","twap_8","twap_9","twap_10","twap_11","vwap_1","vwap_2","vwap_3","vwap_4","vwap_5","vwap_6","vwap_7","vwap_8","vwap_9","vwap_10","vwap_11"],"multi":false,"type_code":"choice","name":"order_price_field_sell","default":"close"},{"type_name":"Float","desc":"初始资金","specific_type_name":null,"min":0,"max":1.7976931348623157e+308,"type_code":"float","name":"capital_base","default":1000000.0},{"type_name":"Boolean","desc":"自动取消无法成交订单：是否自动取消因为停牌等原因不能成交的订单","specific_type_name":null,"type_code":"bool","name":"auto_cancel_non_tradable_orders","default":true},{"type_name":"Enumerated","desc":"回测数据频率：日线 (daily)，分钟线 (minute)","specific_type_name":null,"values":["daily","minute"],"multi":false,"type_code":"choice","name":"data_frequency","default":"daily"},{"type_name":"Enumerated","desc":"回测价格类型：前复权(forward_adjusted)，真实价格(original)，后复权(backward_adjusted)","specific_type_name":null,"values":["真实价格","后复权"],"multi":false,"type_code":"choice","name":"price_type","default":"真实价格"},{"type_name":"Enumerated","desc":"回测产品类型：股票(stock), 期货(future), 期权(option), 数字货币(dcc)","specific_type_name":null,"values":["股票","期货","期权"],"multi":false,"type_code":"choice","name":"product_type","default":"股票"},{"type_name":"Boolean","desc":"显示回测结果图表","specific_type_name":null,"type_code":"bool","name":"plot_charts","default":true},{"type_name":"Boolean","desc":"只在回测模式下运行：默认情况下，Trade会在回测和实盘模拟模式下都运行。如果策略中有多个M.trade，在实盘模拟模式下，只能有一个设置为运行，其他的需要设置为 backtest_only=True，否则将会有未定义的行为错误","specific_type_name":null,"type_code":"bool","name":"backtest_only","default":false},{"type_name":null,"desc":"其他输入数据：回测中用到的其他数据，比如预测数据、训练模型等。如果设定，在回测中通过 context.options['data'] 使用","specific_type_name":"DataSource","name":"options_data","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"doc","desc":"用户自定义数据，在回调函数中要用到的变量，需要从这里传入，并通过 context.options 使用","specific_type_name":"字典","name":"options","type_code":"doc","default":null},{"type_name":null,"desc":"回测历史数据","specific_type_name":"DataSource","name":"history_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"基准数据，不影响回测结果","specific_type_name":"DataSource","name":"benchmark_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"基准代码，不影响回测结果","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"benchmark","default":"000300.HIX"},{"type_name":null,"desc":"交易日历","specific_type_name":null,"name":"trading_calendar","optional":true,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.081000"},{"_id":"trade_data.1","name":"trade_data","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":true,"opensource":true,"serviceversion":1,"friendly_name":"TradeData","category":"回测与交易数据","arguments":"(id=, instruments=, start_date='', end_date='', before_start_days=365, price_type='后复权', options=None)","doc":"\n\n 回测与交易时，需要读取开始日期到结束日期的历史价格数据和基准数据。\n\n        ","desc":null,"doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"历史数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"DataSource id","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"id"},{"type_name":null,"desc":"证券代码列表","specific_type_name":"列表|DataSource","name":"instruments","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"开始日期，示例 2017-02-12","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，示例 2017-02-12","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":"Int","desc":"向前取数据天数，比如策略开始执行时就需要取前n天的价格，则数据将从 开始日期-向前取数据天数 开始取。考虑到节假日等，建议将此值得大一些","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"before_start_days","default":365},{"type_name":"Enumerated","desc":"回测价格类型：前复权(forward_adjusted)，真实价格(original)，后复权(backward_adjusted)","specific_type_name":null,"values":["前复权","真实价格","后复权"],"multi":false,"type_code":"choice","name":"price_type","default":"后复权"},{"type_name":"doc","desc":"用户自定义数据","specific_type_name":"字典","name":"options","type_code":"doc","default":null}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.083000"},{"_id":"tradex_vx1.1","name":"tradex_vx1","version":1,"owner":"bigquant","shared":false,"data":{"cacheable":false,"opensource":false,"serviceversion":1,"friendly_name":"TradeX(模块化回测交易)","category":"回测与交易","arguments":"(instruments=None, history_ds=None, benchmark=None, trading_calendar=None, initialize_functions=None, handle_bar_functions=None, options_data=None, start_date='', end_date='', handle_data=None, prepare=None, initialize=None, before_trading_start=None, volume_limit=0.025, order_price_field_buy='open', order_price_field_sell='close', capital_base=1000000.0, auto_cancel_non_tradable_orders=True, data_frequency='daily', price_type='真实价格', product_type='股票', plot_charts=True, backtest_only=False, options=None, amount_integer=None)","doc":"\n\n 支持函数模块化的量化交易引擎。无缝支持回测和模拟实盘交易\n\n    ","desc":"\n\n 支持函数模块化的量化交易引擎。无缝支持回测和模拟实盘交易\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"回测详细数据","specific_type_name":null,"name":"raw_perf","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"证券代码列表，如果提供了 `prepare`_ 函数，可以在 `prepare`_ 中覆盖此参数提供的值","specific_type_name":"列表|DataSource","name":"instruments","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"回测历史数据，如果不指定，将根据instruments从系统中读取","specific_type_name":"列表|DataSource","name":"history_ds","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"基准数据，如果不指定，将使用默认的基准数据。","specific_type_name":"列表|DataSource","name":"benchmark","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"交易日历，如果不指定，将使用默认交易日历","specific_type_name":null,"name":"trading_calendar","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"initialize处理函数","specific_type_name":null,"name":"initialize_functions","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"handle_bar处理函数","specific_type_name":null,"name":"handle_bar_functions","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"输入数据：一般用来传入策略中要用到的数据。我们建议策略用到的数据在外面批量计算完成，并通过此参数传入使用，例如模型预测数据等。如果设定，在回测中通过 context.options['data'] 使用","specific_type_name":"DataSource","name":"options_data","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"String","desc":"开始日期，设定值只在回测模式有效，在模拟实盘模式下为当前日期，示例：2017-06-01。一般不需要指定，使用 证券代码列表 里的开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期，设定值只在回测模式有效，在模拟实盘模式下为当前日期，示例：2017-06-01。一般不需要指定，使用 证券代码列表 里的结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":"Script","desc":"主函数，[回调函数] 必须实现的函数，该函数每个单位时间会调用一次, 如果按天回测,则每天调用一次,如果按分钟,则每分钟调用一次,由于我们现在数据只有日K，所以是按天回调。在回测中，可以通过对象data获取单只股票或多只股票的时间窗口价格数据。如果算法中没有schedule_function函数，那么该函数为必选函数。一般策略的交易逻辑和订单生成体现在该函数中。","specific_type_name":"函数","language":"script.py","default":"# 回测引擎：每日数据处理函数，每天执行一次\ndef bigquant_run(context, data):\n    # curr_data：用于当前handle_bar，各处理函数可以用 curr_data 传递数据\n    context.curr_data = {}\n    if 'handle_bar_functions' in context.options:\n        for func in context.options['handle_bar_functions']:\n            if not func(context, data):\n                # 如果有处理函数返回False，则表示跳过后续执行\n                return\n","auto_complete_type":"python","type_code":"code","name":"handle_data"},{"type_name":"Script","desc":"数据准备函数，[回调函数] 准备数据函数，运行过程中只调用一次，在 initialize 前调用，准备交易中需要用到数据。目前支持设置交易中用到的股票列表，设置到 context.instruments。更多见 https://bigquant.com/docs/develop/modules/trade/usage.html","specific_type_name":"函数","language":"script.py","default":"# 回测引擎：准备数据，只执行一次\ndef bigquant_run(context):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"prepare"},{"type_name":"Script","desc":"初始化函数，[回调函数] 初始化函数，整个回测中只在最开始时调用一次，用于初始化一些账户状态信息和策略基本参数，context也可以理解为一个全局变量，在回测中存放当前账户信息和策略基本参数便于会话。","specific_type_name":"函数","language":"script.py","default":"# 回测引擎：初始化函数，只执行一次\ndef bigquant_run(context):\n    if 'initialize_functions' in context.options:\n        for func in context.options['initialize_functions']:\n            if not func(context):\n                # 如果有处理函数返回False，则表示跳过后续执行\n                return\n","auto_complete_type":"python","type_code":"code","name":"initialize"},{"type_name":"Script","desc":"盘前处理函数，[回调函数] 每个单位时间开始前调用一次，即每日开盘前调用一次，该函数是可选函数。你的算法可以在该函数中进行一些数据处理计算，比如确定当天有交易信号的股票池。","specific_type_name":"函数","language":"script.py","default":"# 回测引擎：每个单位时间开始前调用一次，即每日开盘前调用一次。\ndef bigquant_run(context, data):\n    pass\n","auto_complete_type":"python","type_code":"code","name":"before_trading_start"},{"type_name":"Float","desc":"成交率限制：执行下单时控制成交量参数，默认值2.5%，若设置为０时","specific_type_name":null,"min":0,"max":1,"type_code":"float","name":"volume_limit","default":0.025},{"type_name":"Enumerated","desc":"买入点：open=开盘买入，close=收盘买入","specific_type_name":null,"values":["open","close"],"multi":false,"type_code":"choice","name":"order_price_field_buy","default":"open"},{"type_name":"Enumerated","desc":"卖出点：open=开盘卖出，close=收盘卖出","specific_type_name":null,"values":["open","close"],"multi":false,"type_code":"choice","name":"order_price_field_sell","default":"close"},{"type_name":"Float","desc":"初始资金","specific_type_name":null,"min":0,"max":1.7976931348623157e+308,"type_code":"float","name":"capital_base","default":1000000.0},{"type_name":"Boolean","desc":"自动取消无法成交订单：是否自动取消因为停牌等原因不能成交的订单","specific_type_name":null,"type_code":"bool","name":"auto_cancel_non_tradable_orders","default":true},{"type_name":"Enumerated","desc":"回测数据频率：日线 (daily)，分钟线 (minute)","specific_type_name":null,"values":["daily","minute"],"multi":false,"type_code":"choice","name":"data_frequency","default":"daily"},{"type_name":"Enumerated","desc":"回测价格类型：前复权(forward_adjusted)，真实价格(original)，后复权(backward_adjusted)","specific_type_name":null,"values":["真实价格","后复权"],"multi":false,"type_code":"choice","name":"price_type","default":"真实价格"},{"type_name":"Enumerated","desc":"回测产品类型：股票(stock), 期货(future), 期权(option), 数字货币(dcc)","specific_type_name":null,"values":["股票","期货"],"multi":false,"type_code":"choice","name":"product_type","default":"股票"},{"type_name":"Boolean","desc":"显示回测结果图表","specific_type_name":null,"type_code":"bool","name":"plot_charts","default":true},{"type_name":"Boolean","desc":"只在回测模式下运行：默认情况下，Trade会在回测和实盘模拟模式下都运行。如果策略中有多个M.trade，在实盘模拟模式下，只能有一个设置为运行，其他的需要设置为 backtest_only=True，否则将会有未定义的行为错误","specific_type_name":null,"type_code":"bool","name":"backtest_only","default":false},{"type_name":"doc","desc":"用户自定义数据，在回调函数中要用到的变量，需要从这里传入，并通过 context.options 使用","specific_type_name":"字典","name":"options","type_code":"doc","default":null}],"visible":false,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.099000"},{"_id":"use_datasource.1","name":"use_datasource","version":1,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":true,"serviceversion":1,"friendly_name":"数据源","category":"数据输入输出","arguments":"(datasource_id=, start_date='', end_date='', instruments=None, features=None)","doc":"\n        输入数据api名称和时间段，输出提取出来的数据，dataframe格式。用于替换DataSource语句。可用的数据api见帮助文档的【数据字典】部分。\n        ","desc":null,"doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据源","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":"String","desc":"ID或别名，示例 bar1d","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"datasource_id"},{"type_name":"String","desc":"开始日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"start_date","default":""},{"type_name":"String","desc":"结束日期","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"end_date","default":""},{"type_name":null,"desc":"代码列表","specific_type_name":"列表|DataSource","name":"instruments","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":null,"desc":"特征列表","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.100000"},{"_id":"winsorize.1","data":{"source_deps":"","visible":true,"cacheable":true,"source_code":"","desc":"\n    去极值.\n    ","arguments":"(input_data=, features=None, columns_input='', median_deviate=3)","category":"数据处理","doc":"\n    去极值.\n    ","friendly_name":"去极值","opensource":false,"interface":[{"type_code":"output_port","optional":false,"specific_type_name":null,"type":"通用","type_name":null,"desc":"去极值数据","name":"data"},{"type_code":"input_port","optional":false,"specific_type_name":"DataSource","type":"通用","type_name":null,"desc":"输入数据","name":"input_data"},{"type":"通用","name":"features","optional":false,"specific_type_name":"列表|DataSource","default":null,"type_name":null,"desc":"因子列表","type_code":"input_port"},{"auto_complete_type":"feature_fields,bigexpr_functions","name":"columns_input","specific_type_name":null,"type_code":"code","default":"","type_name":"Script","desc":"指定列","language":""},{"name":"median_deviate","min":-2147483648,"type_code":"int","max":100,"specific_type_name":null,"type_name":"Int","desc":"指定标准差倍数","default":3}],"doc_url":"https://bigquant.com/docs/","serviceversion":1},"updated_at":"2019-07-15T18:09:53.779000","name":"winsorize","shared":true,"rank":0,"owner":"bigquant","version":1},{"_id":"winsorize.6","name":"winsorize","version":6,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":6,"friendly_name":"去极值","category":"数据处理","arguments":"(input_data=, features=None, columns_input='', median_deviate=3)","doc":"\n\n 去极值，属于常见的数据处理模块，将剔除偏离中位数5倍以上的数据.\n\n    ","desc":"\n\n 去极值，属于常见的数据处理模块，将剔除偏离中位数5倍以上的数据.\n\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"去极值数据","specific_type_name":null,"name":"data","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入数据","specific_type_name":"DataSource","name":"input_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"因子列表","specific_type_name":"列表|DataSource","name":"features","optional":true,"type":"通用","type_code":"input_port","default":null},{"type_name":"Script","desc":"指定列","specific_type_name":null,"language":"","default":"","auto_complete_type":"feature_fields,bigexpr_functions","type_code":"code","name":"columns_input"},{"type_name":"Int","desc":"指定标准差倍数","specific_type_name":null,"min":-2147483648,"max":100,"type_code":"int","name":"median_deviate","default":3}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-01-06T10:53:12.102000"},{"_id":"index_custom.1","name":"index_custom","version":1,"owner":"bigquant","shared":true,"data":{"source_code":"","source_deps":"","cacheable":true,"opensource":false,"serviceversion":1,"friendly_name":"自定义指数构建","category":"量化分析","arguments":"(input_1=, factor_name=, weight_method='市值加权', stock_pool='全市场', benchmark='中证500', sort='升序', rebalance_days=2, cost=0.001, quantile_ratio=0.1, stock_num=0)","doc":"","desc":null,"doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"data_1","specific_type_name":null,"name":"data_1","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"data_2","specific_type_name":null,"name":"data_2","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"data_3","specific_type_name":null,"name":"data_3","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"因子数据","specific_type_name":"DataSource","name":"input_1","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"因子名","specific_type_name":null,"can_set_liverun_param":null,"type_code":"str","name":"factor_name"},{"type_name":"Enumerated","desc":"加权权重","specific_type_name":null,"values":["等权重","市值加权"],"multi":false,"type_code":"choice","name":"weight_method","default":"市值加权"},{"type_name":"Enumerated","desc":"股票池","specific_type_name":null,"values":["全市场","沪深300","中证500","中证800"],"multi":false,"type_code":"choice","name":"stock_pool","default":"全市场"},{"type_name":"Enumerated","desc":"基准","specific_type_name":null,"values":["沪深300","中证500","中证800","中证1000","创业板"],"multi":false,"type_code":"choice","name":"benchmark","default":"中证500"},{"type_name":"Enumerated","desc":"排序,","specific_type_name":null,"values":["升序","降序"],"multi":false,"type_code":"choice","name":"sort","default":"升序"},{"type_name":"Int","desc":"调仓天数","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"rebalance_days","default":2},{"type_name":"Float","desc":"交易成本","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"cost","default":0.001},{"type_name":"Float","desc":"指数分位数","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"quantile_ratio","default":0.1},{"type_name":"Int","desc":"指数成分数","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"stock_num","default":0}],"visible":true,"created_by":"biglearning"},"rank":null,"keep_source":false},{"_id":"factorlens_custom.2","name":"factorlens_custom","version":2,"owner":"bigquant","shared":true,"data":{"cacheable":true,"opensource":false,"serviceversion":2,"friendly_name":"因子分析(自定义)","category":"因子研究","arguments":"(features=, start_date='2019-01-01', end_date='2019-12-31', instrument_list=None, market='CN_FUND', expr=None, rebalance_period=22, quantile_num=5, buy_commission_rate=0.0005, sell_commission_rate=0.0005, ic_method='Rank_IC', is_winsorize=True, is_standardlize=True)","doc":"\n    因子分析。对输入的因子公式或者因子数据，做因子分析。\n    ","desc":"\n    因子分析。对输入的因子公式或者因子数据，做因子分析。\n    ","doc_url":"https://bigquant.com/docs/","interface":[{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data_1","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"数据","specific_type_name":null,"name":"data_2","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"保存数据,连接保存因子模块","specific_type_name":null,"name":"data_3","optional":false,"type":"通用","type_code":"output_port"},{"type_name":null,"desc":"输入因子-来自输入特征列表等模块","specific_type_name":"DataSource","name":"features","optional":false,"type":"通用","type_code":"input_port"},{"type_name":null,"desc":"因子数据","specific_type_name":"列表|DataSource","name":"factor_data","optional":false,"type":"通用","type_code":"input_port"},{"type_name":"String","desc":"开始日期，分析数据开始日期","specific_type_name":null,"can_set_liverun_param":true,"type_code":"str","name":"start_date","default":"2019-01-01"},{"type_name":"String","desc":"结束日期，分析数据结束日期","specific_type_name":null,"can_set_liverun_param":true,"type_code":"str","name":"end_date","default":"2019-12-31"},{"type_name":"Script","desc":"代码列表，每行一个，如果指定，market参数将被忽略","specific_type_name":null,"language":"","default":null,"auto_complete_type":"stocks","type_code":"code","name":"instrument_list"},{"type_name":"String","desc":"过滤表达式， 参考示例代码和[DataFrame.query](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.query.html)，包含特使字符的列名需要使用反单引号(\\`)引起来，例如 \\`close_10/close0\\` > 0.91","specific_type_name":"字符串","can_set_liverun_param":null,"type_code":"str","name":"expr","default":null},{"type_name":"Int","desc":"调仓周期(交易日)，单位为交易日","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"rebalance_period","default":22},{"type_name":"Int","desc":"分组数量","specific_type_name":null,"min":-2147483648,"max":2147483647,"type_code":"int","name":"quantile_num","default":5},{"type_name":"Float","desc":"手续费及滑点","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"buy_commission_rate","default":0.0005},{"type_name":"Float","desc":"手续费及滑点","specific_type_name":null,"min":-1.7976931348623157e+308,"max":1.7976931348623157e+308,"type_code":"float","name":"sell_commission_rate","default":0.0005},{"type_name":"Enumerated","desc":"IC类型","specific_type_name":null,"values":["Rank_IC","IC"],"multi":false,"type_code":"choice","name":"ic_method","default":"Rank_IC"},{"type_name":"Boolean","desc":"因子去极值","specific_type_name":null,"type_code":"bool","name":"is_winsorize","default":true},{"type_name":"Boolean","desc":"因子标准化","specific_type_name":null,"type_code":"bool","name":"is_standardlize","default":true}],"visible":true,"created_by":"biglearning"},"rank":null,"updated_at":"2022-06-23T10:15:54.242000"}]